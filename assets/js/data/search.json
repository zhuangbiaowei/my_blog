[
  
  {
    "title": "开源学：开源史学纲要",
    "url": "/my_blog/posts/openology-historiography/",
    "categories": "OpenSource, Openology, Historiography",
    "tags": "",
    "date": "2021-11-24 09:00:00 +0800",
    





    "snippet": "按照上一篇文章的描述，我试着从历史学的角度，来切入“开源学”的话题。所谓纲要，其实就是一个提纲，作为一个历史学的外行，来畅想一下：假设我是一个历史学家，我会如何来研究开源。一、从历史看开源我最喜欢的历史学家钱穆先生，在《国史大纲》的前言中说道：“治国史之第一任务，在能于国家民族之内部自身，求得其独特精神之所在。” 按照同样的思路来看开源的发展史，也不能仅仅把一堆人物、事件、技术、企业罗列出来，而是要寻求发展背后的独特的“精神”所在。是什么促成了开源的出现？又是什么，推动开源不断的发展变化？1. 开源的史料在哪里？当然，研究历史，基本功还是要有。首先，就是收集史料。但是，开源的史料在哪里呢？第二个问题：开源的史料，如何整理呢？目前看来，开源相关的信息，绝大多数，都是在互联网上以公开信息的形式，存在着的。但是，要想完整全面的收集，却非常困难。如下所示，是我最近正在思考的一个关于开源的元数据提纲，尽量能够容纳与开源相关的所有信息。  基础数据          编程语言      包管理工具      授权协议      镜像站      开发平台      数据源      分类      标签        实体数据          软件基础信息      人员基础信息      组织信息      知识产权信息      社区与生态信息      质量信息        行为数据          开发行为      社区行为      组织行为        关系数据          组织与成员关系      组织与项目的关系      个人与项目关系      更多请参考 OpenSource MetaData这些内容，从大的分类来说，可以分为两类：算法能够处理的数据、与人工才能阅读理解的信息。相较过去的历史学，我们的确可以做更多的数据处理工作，从中看到比例、趋势以及特征。但是，那些无法结构化，无法汇总统计的事情，依然是非常重要的。最近我正在读的一本书《历史的技艺》，其中有一段非常有启发：“如果历史学家屈服于自己的材料，而不是把自己强加于材料，那么，那些材料最终会对他说出历史谜团的答案。 ”2. 开源的历史上有哪些重要的时间点？在软件开发领域，我们通常会划分N个里程碑。如果是小的里程碑，我们的软件版本，大概会是从1.1到1.2，甚至1.1.1。如果是大的里程碑，则可能从1.x，升级到2.0。在历史领域，也非常重视里程碑的标志性作用。XXX事件，标志着某某事件，进入YYY阶段。对于开源来说，最重要的一个时间节点，自然是1998年2月，Open Source Initiative（开放源码促进会）成立。标志着开源正式诞生！但是，在这一重大时间的前后，还有哪些时间节点呢？2.1. 自由软件运动  1983 年 Richard Stallman 发起了GNU项目  1985 年 Richard Stallman 发表了GNU宣言，并成立自由软件基金会  1989 年 GPL v1 发布2.2. Linux内核项目  1991 年 Linux 内核0.1版发布  1992 年 Linux 内核0.12版，采用GPL  1993 年 Debian GNU/Linux 项目启动  1994 年 Linux 1.0 版发布  2000 年 1 月 IBM 宣布将在所有产品中支持 Linux2.3. 开源软件运动  1997 年 Eric S. Raymond 发表了《大教堂与集市》  1998 年 1 月 网景公司宣布开源 Navigator 的源代码，与此同时，“Open Source”这个词被投票选出  1998 年 2 月 开放源码促进会（OSI）成立  1998 年 4 月 Open Source Summit 召开，正式确定采用“Open Source”2.4. 互联网与万维网爆发  1969 年 APANET 正式投入运行  1975 年 TCP/IP 协议  1989 年 万维网诞生  1998 年 开源套件 LAMP 兴起  20 世纪 90 年末，互联网泡沫 &amp;amp; Web 2.0 热潮2.5. 云计算兴起  1994 年 Gartner 公司 提出 SOA 架构，2006 年，由 IBM、Oracle、SAP 等公司共同成立了 OSOA 联盟（Open Service Oriented Architecture）  2005 年 Peter Rodgers 提出微服务概念，2014 年，Martin Fowler 的文章引爆微服务时代  2010 年 OpenStack 发布第一个版本  2013 年 Docker 发布第一个版本  2014 年 Google 开源 Kubernetes  2015 年 Pivotal 公司提出云原生的概念  2015 年 CNCF 成立3. 如何理解开源的发展历程我想提出的一种历史研究的思路是：虽然不能简单的断定因果，但是可以做依赖分析。在历史发展的过程中，一个事物的诞生，虽然我们不能找全所有的充分必要条件，但是必要条件（前置依赖项），是可以找到的。3.1. 开源诞生的文化基因  人类基因：          在人类的基因中，天生携带着进化的蓝图，可以用来建设一个美好的社会。我们的天性中，原本就包括：友谊、合作、内群体偏好、社会学习和教育等等特征        礼物文化：          互惠互利，来而不往非礼也，这样的礼物文化在所有的文化中，古已有之        科学共同体的原则：          公有主义：科学发现的共同所有权，据此，科学家放弃知识产权以换取承认和尊重      普遍主义：对真理的要求是根据普遍的或非个人的标准来评价的，而不是根据种族、阶级、性别、宗教或国籍      无私利性：科学家因其行为方式在外界看来是无私的而得到奖励      有条理的怀疑主义：所有的想法都必须经过检验，并接受严格的、有组织的社区审查        黑客伦理          使用计算机以及所有有助于了解这个世界本质的事物都不应受到任何限制。任何事情都应该亲手尝试      信息应该全部免费      不信任权威，提倡去中心化      判断一名黑客的水平应该看他的技术能力，而不是看他的学历、年龄或地位等其他标准      你可以用计算机创造美和艺术      计算机使生活更美好        乌托邦精神          美国一直是乌托邦的一片“沃土”        行会文化          内群体偏好，使我们更加认同自己的社区身份      3.2. 开源发展的推动力  社区文化基因：理念驱动  基于授权的协作：法律驱动  社区技术能力：创新驱动  商业利益加入：经济驱动  基于数据运营：数据驱动  协作中的永恒矛盾：利益驱动4. 如何给开源的历史分期？似乎，历史学家都喜欢给历史上的长长短短的时间，进行分期，然后再给起一个好名字。比如“青铜时代”、“封建社会”、“黑暗的中世纪”、“镀金时代”等等。有些时代，有明确的起止时间，有些却是混沌一片。不过，既然要学习历史学家的思维模式，咱们也不能免俗，应该试着给开源的发展历程，再分一分期。4.1. ~ 1983 蒙昧时代在 GNU 与自由软件运动出现之前，整个软件行业，对于源代码的相关权益，都处于蒙昧的状态。4.2. 1983 ~ 1998 自由软件时代从 GNU 成立，到 Open Source 出现之前，是自由软件高唱理想主义的时代。4.3. 1998 ~ 2018 开源黄金 20 年从 OSI 成立，到微软收购 Github、IBM 收购Red Hat。开源、互联网与商业的关系，越走越近，互相促进，共同发展壮大。4.4. 2018 ~ 至今 开源混沌期2018年，尤其是2019年之后，我们在开源社区观察到了很多不和谐的现象：修改License，赶走创始人，开源与云计算的矛盾，中美对抗等等。一方面欣欣向荣，另一方面又暗藏隐忧，这样的混沌期，还不知道何时会结束。以下的内容，目前我还没有能力写出来，先存目吧……二、从开源看历史1. 今后的历史会发生在哪里？2. 开放式的史料数据库，是否可能？3. 时间、地点、人物是什么？4. 简单的因果链条，如何演变为复杂的因果网络？三、从开源历史看中国1. 在中国的开源事件有哪些？2. 目前的中国开源，处于哪个阶段？3. 未来的中国开源，将会如何发展？四、从开源历史看世界"
  },
  
  {
    "title": "从法律思维的角度看代码——《Code 2.0》读后感",
    "url": "/my_blog/posts/legal-thinking-for-code/",
    "categories": "OpenSource, Openology, Legal",
    "tags": "",
    "date": "2021-11-20 10:02:00 +0800",
    





    "snippet": "《Code 2.0》是一本常读常新的书，不时翻阅，也常常会有新的收获。这次建盛的开源之道读书会，又组织了一次《Code 2.0》的共读活动，大家开了一个腾讯会议，各自聊聊从这本书里读到的感想。果不其然，畅谈之后，作业就来了。会上说了一次，群里又催了一次，我也答应了，周末写出来。理解 Lessig 的思路首先，Lawrence Lessig是一位法学家，而且是一位密切关注技术发展的法学家。因此，《Code 2.0》这本书的出发点，依然是法学的立场。在书中，作者总结了四种规制的类型：法律、社群规范、市场与架构。而我之前的另一个总结，则是从时间维度来梳理的：情、礼、法、Code，随着时代的进步，规制的手段会越来越依赖于架构/Code。虽然，早期互联网的理想主义者们，希望互联网永远是一片“法外之地”，但是法学家的看法才是更加深刻的。政府、法律、规制的力量，一定会进来。不但会进来，而且会来到互联网世界，借助Code进行规制，成为“控场”的力量。我们不仅要认清这一趋势，而且需要基于这一趋势来思考：我们可以做些什么？虚拟空间的地理学早期的理解，我们会觉得“互联网就是一个平坦的，毫无阻碍，没有边界的虚拟空间”。但是，我们现在会发现：平台与平台之间，可能联通不畅。国家与国家之间，并不是没有边界，也不是与物理国界一致的一条边界。从A到B，再从B到C，的确存在“某种距离”。在读书会上，我假设了一致场景：我们坐飞机出国，要办理签证、经过海关、还有购买机票。于是，我身处国外这件事情，就是能够被确认，也确实被允许的。然后我在国外的网络环境，访问一个网站。这当然完全合法。那么：购买一个VPN，借助VPN访问国外的网络，与签证、海关、机票之间，是否有某种对应关系？或者说：是否应该有某种对应关系？现在的虚拟空间里面的道路与桥梁，大道与小路，还在飞快的变化之中。所以，我们需要关注这个领域的地貌变化。一个思想实验其实，我们在讨论技术的伦理时，往往存在两种心态：一种认为技术是无所谓善恶的，关键在于谁在使用他们。另一种却认为技术非常危险，所有发明与创造技术的人，都有某种层度的伦理责任。前者我们往往会以菜刀来举例子。后者我们却会提到原子弹的例子。那么，是不是可以认为：当一个技术，没有那么危险的时候，就是无所谓善恶的。而当一个技术达到某种非常危险的程度，技术人员就会被卷入伦理责任之中？在讨论《Code 2.0》的时候，我们也会判断：Code代表的某种规制的力量，到底是善的？还是恶的？是否需要警惕的？于是，我就在会上提出了一个思想实验：假设有某种输入法，是随时可以连接到网络服务器的。而这个输入法的运营平台，非常智能，能够实时的知道打字的人，目前正在输入什么样的内容？这听起来是不是很邪恶？那么，假设一个即将自杀的人，正在用这个输入法，输入自己的遗书。这个时候，我们是否能够通过智能分析，预测他即将自杀，然后及时展开援救呢？当一个技术，强大到什么程度，我们才需要开始担心？而所谓的“正确使用某种技术”，又由谁来判定其是否正确呢？结束语在我看来，未来的世界，一定是一个物理+数字，或者说虚实混为一体的世界。在这样的世界里：Code是其中的重要组成部分。Code是由千千万万开发者，基于各自不同的理由写出来的。我们不仅要讨论这些Code实现了哪些功能，更需要思考：这些Code贯彻了谁的意志？"
  },
  
  {
    "title": "我们需要建立“开放式架构”的思维模式",
    "url": "/my_blog/posts/open-architecture/",
    "categories": "OpenSource, Openology, Architecture",
    "tags": "",
    "date": "2021-11-16 09:00:00 +0800",
    





    "snippet": "今天在听CHAOSS China的一档播客节目《Episode#01-聊一聊有机的开源运营》，突然连贯着想通了一个架构方面的问题。1. 自建模式早期的架构，早期的代码，我们几乎都是从头开始的。所以，所有的问题都由我们自己解决，当然所有的风险也都是我们自己造成的。设计模式那20多个设计模式，每一行代码我们都看在眼里。要在自己的项目里使用，当然也是一个字母，一个字母的敲进电脑里。即使后来的IDE工具非常先进，能够帮忙自动生成代码，或者帮忙重构代码。那些代码，依然是我们自己掌控的。架构模式在自建一切的概念下，架构当然也是我们自己搞定。ER图是我们自己画的，数据库表结构是我们从头定义的。每一个模块，我们分工以后，也是一个一个的写出来的。我们会阅读一些技术文章，了解一些最新技术。然后：还是会自己去写代码。在开源繁荣之前2. 黑洞模式当开源越来越多之后，我们的架构思维并没有发生变化，只是在开源社区里，发现了很多“好东西”，我们可以拿来就用。当我们下载了开源代码以后所谓黑洞，就是一种心态的“切割性”。外面的开源项目，外面的代码，那是外面的。当我们下载代码回来以后，这就变成了我们自己的代码，我们想怎么用，就怎么用，想怎么改，就怎么改。为何会变成黑洞为了保持可控性，我们沿用了自建模式的传统思路，尽可能吃透所有外面的代码，把他变得像自己的代码一样熟悉。当然，接下里我们会持续使用这些代码，但是“回馈”？不存在！  没有必要：我自己用得好好的，为啥要回馈？  没有可能：我自己的修改，社区也不一定接纳呀？  没有收益：甚至可能会损失我的利益3. 生长模式事实上，我们后来才发现，软件不是写完一次就完成了的。他们会不断的出新的版本。自建下的生长我们自己的代码，也会不断生长。我们会维护一个越来越庞大，臃肿，甚至无法理解的代码库，然后小心翼翼地修改代码，“定期”发布新的版本。开源软件也在生长我们以前觉得，那些可以拿来就用的开源组件，其实也在不断的推出新版本。那些新版本的功能，我们也很喜欢。但是：我们的上一个版本，用了“上一个版本的”开源组件。当我们想要同步升级的时候，真正的痛苦出现了：“我们没有为升级，做过准备”。当初就是拿来就用，甚至随便乱改，随便乱用。我们并没有一种“生长型的架构模式”4. 开放式架构模式我们的软件，处于开放式生态之中  我们的软件，使用了很多种，通常是开源的新兴技术  我们的软件，使用了很多开源的框架、开源的组件、开源的工具  我们的软件，运行在由很多开源系统、开放服务组成的开放式环境之中  而且，这些我们依赖的技术、组件与服务，都不是保证可靠的，都不是安全无风险的所有这一切，都在不断变化/生长之中我们的架构，不能再以自建的、封闭的方式来设计  要更加重视开源选型          用哪个开源框架作为项目的底座？还是用自己的框架作为底座？      哪些组件应该自己开发，哪些可以选用开源的组件        在使用开源软件、组件的阶段，也需要更多的思考          区分主动依赖的开源软件，以及由开源软件的依赖，引入的“被动依赖”      在架构设计时，应该考虑如何预防与隔离，由开源软件引入的各种风险      要关注开源软件的生命周期，及时替换掉已经过于老旧的开源软件版本        我们要关注开源软件的修改问题          最好不要修改（以便更好的升级新版本）      能不能只在外围修改，或者做一个适配层？      如果一定要修改，如何才能正确的修改？                  如何定义正确呢？我的建议是以社区是否会接纳为准                    我们的修改，是否能够尽快回馈到上游社区？                  我们是否在做通用性的修改——对别人也有用          我们是否隔离技术需要的修改与业务需要的修改？          我们的这些修改，如果回馈到上游，是否会损害我们的竞争力？                    当我们在谈竞争力时，我们究竟在谈什么？也许，我们应该放弃将静态的，一段一段的代码，视作竞争力的思路。在一个不断生长的，开放式的架构模式下：生长能力、适应性、松耦合、架构可靠性这样的能力，才是一款软件的核心竞争力。只有在架构观念转变的基础上，我们才能够真正理解：为何Upstream First并不是在做慈善，而是一种对于企业来说，更加富有竞争力的架构策略。5. 心态转变  在开源的时代，我们的软件不是孤立于开源生态之外的存在，而是整个开放系统中的一份子  一个能够与整个生态，健康交流的软件系统，才是一个健康的系统  Upstream First作为一种架构策略，需要被认真的思考与实践  不要用静态的眼光，而是用发展的眼光，来看待软件开发与架构设计愿与大家共同探讨！"
  },
  
  {
    "title": "什么是开源学？",
    "url": "/my_blog/posts/what-is-openology/",
    "categories": "OpenSource, Openology",
    "tags": "",
    "date": "2021-10-05 20:49:00 +0800",
    





    "snippet": "在上一篇文章《「开源学」：如何分门别类理解开源》中，我第一次尝试提出“开源学”这个名词，但是，本质上这只是一个“书单”。里面罗列了很多我看过的，想看的，甚至只是听说过的书。当然，还喊了一些口号，比如：“以万法观开源，由开源融万法”。但是，什么是开源学，并没有得到很好的解释与介绍。因此，还需要另外一篇文章，认真的来介绍一下：“什么是开源学？”在上一次演讲时，我还没有看过任何一本教育学相关的书籍，所以只能很惭愧的，放了一张约翰·杜威的照片，算是撑撑场面。最近我真的开始看教育学的书了，目前正在看的是叶澜老师的《教育概论》，一本非常好的书。人家就把教育和教育学，定义得清清楚楚的。比如：教育是有意识的以影响人的身心发展为直接目标的社会活动。那么，教育学，自然就是研究这一社会活动的一门学问。但是，开源学，却不能这么定义。以万法观开源在上一篇文章中，我提到了可以分门别类，使用历史学、社会学、人类学、经济学甚至哲学的角度来理解开源。以教育为例，可以有：《教育史学》、《教育心理学》、《教育社会学》、《教育人类学》、《教育经济学》、《教育哲学》等等学科，这些交叉学科，实际上就是用某一个学科的方法与思维模式，来研究教育的学问。我们可以把以上这些学科对于教育的研究与分析成果，汇集起来，成为教育学的各个组成部分。于是教育学，就得以建立起来了。因此，我们可以按照类似的模式，创造出《开源史学》、《开源心理学》、《开源社会学》、《开源人类学》、《开源经济学》、《开源哲学》等等科目，然后再把这些成果汇集起来，于是就有了《开源学》。唯一的区别是：教育学是一门历史非常悠久的学科，早在那些交叉学科出现之前，就先有了对于教育本身的研究。后来的交叉研究，只是进一步丰富了教育学的内涵与外延。而开源学，目前却处在一无所有的状态。只有借着其他各门科学的“滋养”，才有可能建立起来。这是《开源学》的第一层含义：以万法观开源。由开源融万法从各种学科的视角，来看开源，还只是第一步。事实上，我们之所以如此热爱开源，希望推广开源，甚至希望开源能够“出圈”，影响到软件开发技术圈之外的世界，是因为我们认为：开源不仅仅是一种“开发软件的模式”，更可能是面对未来世界，最需要的一种方法论。所以，我们不仅希望各门学科的专家们能够来研究开源，还希望能够通过他们对于开源的研究与分析，得到一些收获。这些收获，对于原来的这些学科，也会有所帮助。还是以教育为例。从教育学的视角，来研究开源社区的开发模式，会发现很多人在社区里，通过Code Review，完成了教与学的过程。这与约翰·杜威、克伯屈、马克马利提出的“做中学/Learn by doing”、“设计教学法/The Project Method”，有很多相近之处。但是，实际的“做中学”的探索却往往受到各种批评，这也许是由于教师的项目设计，不够好的原因。如果，通过研究开源社区里实际的项目治理情况，将其中的最佳实践，以教育学的眼光加以整理和提高，再以此为指导原则，设计教育场景中的“动手环节”/“项目课题”，也许就能够起到更好的效果。当然，如果在研究的过程中，能够总结出更加具有普遍性的原则和方法，可以改进更多的学科与实践，那就更好了。这是《开源学》的第二层含义：由开源融万法。从开源看中国事实上，我们这些热爱开源的朋友们，经常需要思考的一个问题就是：在中国，开源是否可能？例如，我们以历史学的眼光，来看待开源的发展历程。自然就会思考：开源为何会发生在“软件开发这个领域”，为何在1998年，Open Source这个名词会诞生？为何全世界大多数的开源项目的创造者，核心开发者，要么出生在美国，要么早晚会移民到美国；大比例的开源开发者，来自欧美国家？现在在中国，开源当然也如火如荼的发展起来。但是，现在在中国发展着的“开源”，与20年前，从美国诞生的“开源”。相同之处何在？相似之处何在？区别又何在呢？哪些区别，是开源范围内的区别，哪些又是背离了开源的区别呢？如果在当年的美国，有那样的思想资源、社会资源、法律资源、文化资源、历史资源，才得以诞生了那样的一种开源。那么在现在的中国，我们有哪些资源？又欠缺哪些资源呢？如果要在中国发展开源，又需要做哪些努力呢？这是《开源学》的第三层含义：从开源看中国。从开源看世界反正是接着畅享，我也就不管是不是冒昧了。如果开源，能够成为一门《开源学》，这门学问，对于世界，能够产生哪些帮助？正如在我们《开源人宣言》中所说的那样：“每一位投身开源的朋友，都或多或少是理想主义者。我们相信：这个并不完美的世界，理应变得更好。我们也相信：通过自己掌握的技术，借助开源的方法，能够把这个世界变得更好。我们还相信：开源的精神内涵，应该被推广到更多的领域。我们更相信：创造更加美好的世界，是开源的终极追求。”这是《开源学》的第四层含义：从开源看世界。以上，就是到目前为之，我对于《开源学》的理解，期待有更多的朋友能够加入，一起探索这个全新的领域！"
  },
  
  {
    "title": "「开源学」：如何分门别类理解开源",
    "url": "/my_blog/posts/openology/",
    "categories": "OpenSource, Openology",
    "tags": "",
    "date": "2021-09-17 14:20:00 +0800",
    





    "snippet": "来自：OSCAR开源大会，下午场的演讲。引言我们拥抱开源需要知识的导引，那么开源究竟是什么？有没有一个明确的指引的点，让任何人都可以去遵照执行，是现代人的困惑。在 OSCAR 2021 的大会上，我们非常荣幸的邀请到了开源社理事，2020、2021年度理事长，庄表伟先生，他在开源圈卜有着相当高的声望和知名度，也一直在开源的世界里耕耘，并会提携年轻人。最近他本人也加入了华为开源能力中心，我们就看看他是如何看待开源世界里的知识的。很高兴今天能够来到北京来到这样一个分会场来讲一个天大地大的题目：这个题目大到什么程度了呢？当我看到这个题目的时候，当时就一激灵，这种题目也想的出来，适兕邀请我，让我讲「开源学」，让我分门别类的讲开源。大家参加过开源读书会的人知道，这是一直以来所有人的理想，适兕本人也一直在研究开源，他让我来讲，我对此表示感谢。所以对我来说，我能够把这个PPT写出来我已经很满足了，我会很享受这件事情，大家可以看的到后面很多很多页都非常像我们读书会的PPT。当然，要研究开源，我们可以从不同的角度来看，比如我们如何看待开源，它到底是一种现象，一场运动还是一次革命，这是一条线索。第二条线索，这是一种技术，或者它是一种技术底座，或者他是某种技术的推动力。第三条线索，我们如果把开源当成某种方法论，甚至他背后有某种哲学，我们是不是可以分门别类的去研究它。如果我们把他看成一种现象，一场运动或者是一种革命的话，我们至少可以从四个角度来看，历史的、社会学/人类学的、经济学和法学的眼光分别来看它。先说历史的眼光，我们来看整体的，从最左边的一本书，这就回到读书会的感觉了，大家一看到这个，就是到读书会了。这么多本书，我们从最左边的这本书讲起。《大历史与人类的未来》，这本书非常好，他从宇宙诞生的时候开始讲起，一直讲到现在，这是历史学界的潮流，现在研究历史要先从宇宙历史开始研究，然后到银河系的历史，然后再到太阳系的历史，然后再到地球的历史，然后再讲人类的历史，再讲人类从古代到近代到现代这样一个历史。第二本是从考古学家的角度来讲的，第三本不是一本书，它是「理想国」APP 里面叫做《从中国出发的全球史》，它不是分国别的，它是全球视角的研究历史，当然，现在越来越多的会进入到我们比较熟悉的领域，比如说计算机的历史，软件工程的历史，为什么要这样来看这些历史书呢？因为我们要越来越清晰的理解到开源这样一个现象它发生在什么时代，它发生在什么样的背景，以及他为什么在这样的时代背景，在当年的美国能够发生，通过我们研究这些历史，我们来想，反过来问我们自己，问我们现在的中国，中国现在的历史条件下开源会如何发生，这是一个历史学的问题，或者说我们如何在历史之中认识技术的发展，认识开源的发展？这是第一条线索。第二条线索，是社会学和人类学，这个领域可以稍微多讲一点，因为最左边的那本书是卫剑钒老师翻译的《大教堂与集市》，《大教堂与集市》提到一个概念，就是说最原始的人类是一种金字塔的命令体系，上面是君主国王会命令下面的人去干活，这是命令的体系。到了资本主义社会叫做交换的经济，就是我给你钱，你帮我干活，互相之间有交换。但是到了社区，到了开源社区以后，它叫做礼物文化，礼物文化背后的逻辑是，我之所以在这个社区很有地位，很有声望、很有名誉，是因为我向这个社区贡献了那些好的开源代码，做出了很多的贡献，这就是我献给社区的礼物，这是《大教堂与集市》里面的说法，但其实这本书他引用的是第二本，就是《礼物》，这本书就是人类学的著作，其实这个人类学著作讲的是那种原始部落，在部落里的人们，是用礼物来确立自己的部落里的地位，当然还有第三本是讲的中国农村的礼物文化，到了第四本第五本是偏社会学的，为什么会讲这种人类学和社会学的眼光呢？因为我们来讨论所谓的地位，或者说所谓的动力/动机，一个人在这个世界上他做事情的动机是什么，做事情的目的是什么，他有什么收获，这个只是从个人的角度来讲，我向这个世界贡献的礼物能够获得什么？但是也更有意思的是，如果我们去看企业的话，在第三本书叫做《礼物的流动》里面讲到，在中国近代其实就已经有村庄里面结婚的时候，我们大家可能都知道这样的风俗，叫做礼单，一个人到人家家里面去参加婚礼，他送的礼，主家会把所有的人送的礼记下来，甚至还会公开的记录下来，这就是一份礼单，这个礼单证明两件事情，第一个是各家人家结婚收到的礼的多少，这个是各自可以用来攀比的，我收的礼是最多的，证明我们家在这个村子里，在这个地区有足够的声望，这是礼单。第二个攀比是送礼的人也有排行，你在场婚宴里面你送了多少钱，你送了一千块五千块还是一百块这也是一个排行，这件事情在我们开源社区里面其实也有礼单，我们在linux内核的贡献是有排行榜，而这个排行榜的排行单位是企业，这其实是企业级礼物的竞争。我们再拓展一层，我们现在这个世界，国家与国家之间有可能是一种什么竞争呢？很可能也是一种礼物的竞争，就比如像美国这样的国家，他向这个世界奉献了什么样的礼物呢？他奉献了像开源这样的东西，以及很多重要的开源技术是从美国那边发生出来的，因此他在国际上的地位其实是由美国向这个世界贡献的礼物所决定的，当然不仅仅是开源技术，还有很多的思想、文化，甚至是风俗习惯，甚至是社会潮流，包括可口可乐，这也是美国向这个世界贡献的礼物。如果我们以这种眼光来看国与国的竞争，看全球化竞争的话，我们中国又应该向这个世界贡献什么礼物呢？这也是一个从人类学和社会学角度来做的思考。下一个当然是从经济学的角度来看开源，那就更复杂了，比如说第二本书又不是书了，是音频项目，是《像经济学家一样思考》的音频课程，我非常喜欢，里面讲了很多东西，但是他本质上讲的是模型思维，我们用一个一个的模型去刻画这个世界，然后看看这个世界是不是像我们所思考的所想象的那个模型一样去运作。比如说第四本书讲的是《公共事务的治理之道》，这本书我刚刚在看，非常好，他其实讲的也是模型，这本书最开始讲的是叫做公地悲剧，比如这是一片草地，这片草地没有主人的，我们有十家二十家都是放牧的，既然没有主人，我们所有人都可以在牧场上放牧，最后的结论是这个牧场一定会被我们的羊把草吃光，公地就废了，我们的羊也会饿死，这就是公地悲剧，但是这个无法解释现在很多社会上存在的合理的或者友善的合作现象，或者无法解释我们在开源社区基于奉献的合作，无法解释，我们光是用公地悲剧这样的一种博弈论模型是无法解释人类的合作现象，这本书叫做《公共事务的治理之道》，写这本书的人还是世界历史上第一个获得诺贝尔经济学奖的女性，这是一本非常好的书，这是从经济学的角度来看开源。下一个是从法学的角度来看开源，开源最开始都是一份一份的法律文件，这些法律文件规范了一个个源码开放的规范授权逻辑，背后全都是法律，所以我会说他最开始法律是为了源代码的开放做出了重大贡献。而后面一本书叫《Code 2.0》这本书我也是非常推荐的，他讲的是如果我们深入的理解代码这件事情，我们可能会发现这个世界背后运行的道理，从法律的变成是代码的，举一个例子说，比如说我们要进门，原来有一个门卫站在那，那个门卫执行了一条规则，说凡是我们公司的员工就能进，不是我们公司的员工就不能进，现在门卫不要了，有一个刷卡的机器，只要拿了工卡一刷就能进去，规则还是还是规则，但是现在我用代码来执行这个规则，那么更厉害的是什么呢？现在假设我们有防疫政策了，这个人不能只刷工卡还要刷绿码，甚至走过路过的时候边上有个红外的东西，走过就显示一个温度，这个温度如果低于37度就能进，高于37度38度39度就不让你进，这些背后的规则都是代码来执行的，但是它比由人来执行更加的灵活、方便、快捷，这就是法律逐渐的代码化。甚至我们将来会说以后所有的Code都有可能变成法律的一部分，这个时候我们如何来看待那些源代码，这些需要有法学的眼光，所以这本《Code 2.0》的书是非常好的一本书。为什么会放两本《西方法律思想史》和《中国法律思想史》两本书放在这，还是要从历史的视角来看法律怎么演变的，我上次在「开发者生态」大会上讲，法律的演变是叫情理法的社会，最开始的社会讲人情世故，然后讲礼义廉耻，再来讲正经的法律，最后要讲的是用Code来执行的法律是情、理、法、Code，这是用历史的眼光来看法律，同时又用法律的眼光来看代码，这是我们理解开源的第四个角度。接下来讨论技术的部分，当然开源是技术，而且是很重要的技术。我本职工作是架构师，所以我会来聊架构的问题，聊工程的问题，当然还会聊生态学和技术伦理的问题。架构的眼光，是我本职工作在研究的领域，就是说现在的开源已经渗入到我们软件的方方面面。软件吞噬世界，开源吞噬软件，所谓的吞噬其实是整个软件的基础变成了开源，很难想象任何一款软件里面没有开源，当然我们也可以说整个世界的基础是软件，你很难想象这个世界背后的各个角落没有软件在运行，当然在软件背后又是开源在运行。我们来假设，我是一个软件的架构师，我要设计一款软件的时候，原来我们在做架构师的时候，感觉这就是关起门来自己在做一件事情，现在我并不是关起门来做事情，我的系统不是从头设计的，我用到的所有的组件都是从左边右边前面后面各种各样地方“扒”过来的，最后组装成一个我们的软件，这当中这个所谓的一致性怎么保证，我如何保证我四面八方“扒”回来的东西，最后在我整个架构里面是一个合理的、完整的，互相之间没有歧异的一个整体，这是在开放性架构当中的第一个难题。第二个难题，当然也是因为我们的代码来自四面八方，而且我们的系统运行在各种各样的开放系统上面，不是一个封闭系统，这样的一个系统可靠性又如何保证。我都不知道我的代码当中，比如我70%的代码其实不是我写的，甚至不是我们公司的员工写的，我怎么知道他的代码是可靠的、安全的、没有病毒的、没有后门的，我怎么保证这件事情，但是我又得用，我不可能不用开源。同样的还有一个叫做规划与迭代的矛盾，因为我们在开始讲敏捷的时候，我们说不要紧，任何事情不要慌，慢慢迭代，但是光靠迭代不足以让我们进入一个新的时代，就像我们不可能通过迭代马车，来得到一辆汽车一样，我们不可能在老的架构，在老的思路下面不断的迭代来适应现在的，这样一种开源的世界，这样一种开源的架构。我们应该如何面向开源，面向开源的生态来做思考，这是我们架构师需要考虑的问题。下一个问题是软件工程的角度，同样的也是因为我们要做一套软件工程，我们原来做的是比如说敏捷、极限编程、看板这些都在搞，但是现在我们的系统既然是一个开放性的系统，在一个开放性的系统下面我们如何来做软件工程，这个领域是我的本职工作，我在华为开源能力中心就是干这个的，就是在做我们公司内部的软件工程面向开源的治理，其实有另外一篇演讲就是讲这个的，我稍微总结一下，我们要做的是软件工程的数字化转型，比如说我们先要做到一个复杂系统，我要做到可见性，就是要保证看得见，他到底发生了什么事情。比如说我们公司所有的代码、所有的软件资产、所有的相关数据、所有的业务流程，我要都能看的见。这其实就涉及到非常多非常多一致性的问题，很多原来的软件工程用的是一堆的软件开发工具、编译工具、测试工具，他都是散落在各个地方的，这些东西怎么集中起来存放，而且让他的数据是一致的，这是看得见的部分。当然拿这个跟老板讲很容易，你能看见老板眼睛就亮了，你有一个东西给他了，他会知道这个世界上到底发生了什么，咱们公司到底发生了什么，咱们软件到底怎么样，其实就是这样的东西，首先要看得见。下面一层就是管得住，假设他是一个软件工程，我们清楚的知道他里面有很多不可控的因素，这些不可控的因素我们要去分析，要去把控，要理解他的断裂点，然后把他的断裂点转化成为控制点，然后转化成为一套完整的互相之间没有矛盾的控制策略，这样才能够保证控得住、管得住。然后没完，这样只是完成了僵化的部分，僵化了之后怎么优化呢？我们要有一套逻辑来讲，这个系统到底算不算好，到底应该以哪些指标去衡量它，以什么样的模型去评估它，以什么样的方式去改进它，首先我们得定义什么是好，我们才能真正的做到管得好，这是我认为软件工程或者说面向开放系统的软件工程所需要追求的背后的一套逻辑。再来看，还是这些技术，但是我们以生态学的眼光来看，这是我们公司的同事叫梁辰晔提出的，他在公司内网发了一篇文章，他不是说生态学，他说的是叫生物学，因为我们内部在讨论，假设全世界有那么多种开源软件，我们怎么给他做分类，他联想到生物学的分类体系这样一套结构来分类开源软件，我就在想分类不够，或者说仅仅以生物学的方式研究开源组件是不够的，我们要考虑的是他是一个生态，这些生态当中，组件之间互相依赖，就像在一个热带雨林当中，各种各样的动植物形成了一个食物链，甚至是一个食物网，社区的繁荣到底意味着什么？或者我们说一个生态的健康到底意味着什么？然后社区与社区之间他们的关系，就像生物群落与生物群落之间他们到底是合作关系还是竞争关系？我们如何去刻画去评估两个生物群落或者两个社区之间的竞争合作关系？这其实可以从生态学当中得到很多的启发。所以如果我们将开源比喻成为一个生态圈的话，我们说一粒种子是什么？一粒种子可能就是一个个人开发者最早开始创建的那个项目，当他向下生长其实意味着他能够接触到更多的土壤，伸出更多的根系，或者说不用比喻，用实际情况，就是说他能够招揽到更多的开发者，帮助他这颗种子更快的成长，这是社区要做的事情。而向上生长，长出看的见的枝叶其实是给商业看的，是给市场看的，是给潜在的用户看的，这个部分又应该做成什么样子？当然我们说一个生态系统，或者说一株植物或者一片森林，我们如何做它的环境保护和生态建设，这又回到我们做开源社区，或者我们做开发者社区要做哪些事情？这些都是可以用生态学的眼光来思考来分析，或者说通过他里面的一些思考模型可以对我们有很多启发。接下来是关于伦理方面的思考，其实这是我前段时间思考的比较多的一个问题，原因是什么呢？我曾经写过一篇文章，讲到在开源社区之后，其实出现了一个运动，是叫做“道德源码运动”，这个“道德源码运动”他批评开源的一个最大的理由是说OSD里面有两个最著名的条款，叫非排他条款，一个条款叫做不排斥任何领域，第二个是不排斥任何的人，你们都能用，甚至在OSI的网站上面的官方解释里面，就会说我们不会阻止坏人用我们的软件，而“道德源码运动”的发起人就会说，开源，你们怎么能这样？你们怎么能够说坏人也能用？你们应该阻止坏人用你们的开源！所以他就发起了一种“道德源码运动”但是那个“道德源码运动”在美国闹的沸沸扬扬，背后有很多美国的历史背景，我为什么思考这件事情呢？其实我在思考的，第一OSD到底有没有错，或者开源的非排他性，在技术伦理上是不是站的住脚？或者他是所谓的技术上的无动于衷，其实我们很多时候非常容易接受这种技术上的无动于衷。比如说生产菜刀的人有什么错，拿菜刀砍人的人才是有错的，我们可以简单的这么说，但是如果一种技术他越来越强大，越来越能够有可能、有潜力、有某种风险会造成伤害的时候，那个技术的发明人真的没有道德责任吗？就像原子弹，是不是意味着只有最后那个投原子弹的人才有责任，就是那个飞行员有责任，那个给飞行员下命令的人有没有责任，那个给空军司令空军部队下命令的总统有没有责任，建造原子弹的团队有没有责任，发明原子弹原理的人有没有责任，一层层往前推，是不是只有最后那个人才有责任，还是说在整个链条上的每一个人都分担了一部分责任？我其实不太明白，或者说我现在正在看书、正在学习，伦理学也是一个非常艰深，也非常复杂的领域，但是他又非常重要。我们这么理解，如果这门技术对这个世界没有什么影响，不构成任何的损害，你根本不需要去研究技术背后的伦理，但是如果这个技术真的已经强大到有可能损害、甚至毁灭这个世界的时候，比如像现在讨论的最多的两种科技，一种是原子物理学背后的伦理，还有一个生物基因工程背后的伦理，开源这件事情，它在我们肉眼可见的范围内正在变得越来越强大，它既然都已经有可能成为整个世界背后运行的基础了，我们真的不能够回避开源技术背后的伦理问题，所以这块也是需要去理解和学习的。下一个我们说开源他是一种方法论和哲学，我们又可以从四个角度去看它当然首先是从教育学的角度，不过实话实说，这方面的书我还没开始看，我前面列的那些书我基本上都看过，但是教育学的书看的很少，几乎没怎么看，但是在社区里学习的时候我稍微查了一些资料，讲到基于项目的学习，或者做中学，这是一个很重要的学习理论是杜威提的。社区里面比如说我们来做Code Review，这其实就是一种教与学的过程，教与学的过程它背后在教与学的原理上是不是可以得到更加深入的剖析，以至于他能够应用在教与学其他的教育上，这是我觉得可以思考的部分。再下一个管理学，为什么我们要看管理学呢？因为一个开源社区、一个开源组织、一群人，他们在做一件事情，受到很多方面的质疑，凡是在企业里面的人，像微软早期万圣节文档所披露的那样，他们认为这帮做开源的人怎么可能搞的成？他们根本没有组织、没有管理、没有目标、没有计划，没有任何方向性，他们只是在玩而已。但是为什么这群人玩着玩着就能把事情做成了？《第五项修炼》的这本书是我很多年前看的，那时候还没有接触开源，那时候在谈学习型组织的一种管理思路，后面《开放式组织》《自由企业》，已经把企业自由化了，有这样的追求了。还有一篇文章非常值得读，是彼德·德鲁克写的《如何管理知识工作者》，有哪些具体的东西要考虑？该如何去管理？甚至该不该用管理这个词？当然这几本书肯定不够，我们要从管理的思路去想两个问题，第一个问题是我们能否想象另一个管理，这种管理从开源社区来，有没有可能甚至改变企业，让企业也变得更像社区一样的管理，有没有可能？在管理学上说不说的通？在管理学的实践上有没有可能？当然 RedHat 会说我们已经是这样了，其他企业有没有可能？这是一个管理学的问题，也很有意思。再下一个问题是政治学，为什么会说到政治学？其实我们去看 Apache 基金会的官网，会看到我们的社区是怎么治理的，其实它背后的逻辑就是政治学，或者说就是一群人如何争论、如何讨论、如何决策、如何做一件事情，如何把这件事情在达成共识的前提下去做出来，而且在这个背后为什么Apache之道说：“community over code”，他们认为一个运作良好的社区才能够真正写出好的代码，这个背后其实是有价值观的东西，是有政治哲学的考虑，这些书当中我没有全看，第一第二第三本看了，第四本还没看，我知道我得看，因为这是在豆瓣上评价很高的一本书。这里面其实有一个很有意思的点，社群主义的这本书，我前段时间翻了，是因为这本书的英文名是叫做Communitarianism，他其实是社区主义，而在西方政治学里面的话，他是把社区主义和自由主义是对立的，你可以认为说社区主义更加偏向于认为集体更重要，集体的意志、集体的目标、集体的方向感更重要的这样一种政治哲学，而个人主义的话，那是我个人更重要，我个人的自由意志更重要，但是很有意思的是，我们去看我们现在绝大多数的开源社区，无论是中国的、还是欧美的开源社区，里面绝大多数的人都是自由主义者，而这样一群自由主义者却组成了非常非常理想的社群，这个背后的政治学，我觉得政治哲学家们、或者政治学家们，没有好好研究过这件事情，但这是很值得研究的领域。终于聊到哲学了，当然我们可以用哲学的眼光来看开源，而且我也很喜欢从这个角度来看。我们来谈三观，世界观、价值观、人生观。世界观是什么呢？我很喜欢的一本书是《黑客》，还有一本书是《黑客伦理与信息时代精神》，我没有找到这本书中文版的封面，虽然我看的是中文版，但是中文版的封面太丑了，所以我就找的英文版的封面，《黑客》这本书讲的是黑客伦理，是我非常喜欢的一套，跟我们的开源社区黑客的背后逻辑是非常一致的。他相信第一，世界是可以被认识的。第二，世界并不完美，我们不相信一个神创造了完美的世界，我们已经在最完美的世界里了，不是的。第三，世界是可以被改造的，而且是可以被我们改造的，我们自己动手就可以把这个世界改造好，所以背后是什么呢？所谓的黑客伦理，我们应该做一些酷的事情、漂亮的事情，去把这个世界改造的更好，而且这件事情我不想单干，我想分享出去，让别人跟我一起来，当然人生观很重要，just for fun，这是几乎所有喜欢开源的人都很喜欢的一句话，首先是要开心，而且还不光是一个人开心，独乐乐还不如众乐乐，这样的一种世界观、价值观和人生观，这个是开源社区也好，做开源的人也好，比较能够形成共识的一套哲学。但是我们稍微再来聊深一点，我们把这件事情回到中国，我们如果说我们希望在中国这样一个本地化的地方来发展我们的开源，在中国传统的思想，在中国传统的哲学当中，我们有没有可能开掘出更多的思想资源？而这些思想资源是能够与开源相契合的，这又是一个比较困难的问题。我知道适兕肯定也在思考这件事情，而且他会对这件事情比较悲观，但是我还是偏乐观，因为我个人是一个儒家信徒，我觉得这个事情不矛盾，所以我曾经做过一个演讲，讲黑客精神，以及讲叫做孔颜乐处，什么叫孔颜乐处，这在儒家里面很重要的，就是说儒家讲的快乐是什么呢？讲的是孔子有什么快乐，孔子讲食不知肉味，不知老知道将至，他在学习当中快乐得忘记了自己的年龄，忘记了吃饭睡觉，这是一种快乐。这种快乐和我们写代码这背后的快乐是很相通的，这种精神之源也许可以拿来帮助我们在中国的场域里面发展开源，这是哲学的层面。还有很多交叉学科可以用来帮助我们理解开源，比如说复杂学，还有博弈论、认知心理学还有传播学，好多我没看，这些书当中我基本上没有看，只有《复杂》这本书我看过了，另外四本还没有看，我知道他们很重要，如果要理解开源是怎么回事的话，这些书也得看，「开源之书·共读」就是把我们带到这么大坑里面，发现很多书要看才能更好的理解开源。回到我们今天的主题，适兕给我一个题目叫「开源学」，刚才我们聊了这么多，已经看出来它肯定是一门交叉学科，一方面我们要通过这些其他的交叉学科，比如复杂学科、博弈论或者说认知心理学去理解开源，同时我们也可以去想，开源学应该怎么样立足，怎么样作为一门交叉学科而出现而创立而存在而发扬广大，这可以思考。下面说一下，这是一个个人对这个世界理解的问题，因为这个起因也是适兕在群里面推荐的一本书叫《社会变迁》，这本书是美国的一个社会学家，大概是在1922年的时候写的，我看了一下以后，我自己发明了一些概念，就是说社会粘稠度是什么概念？假设一个泥潭，你往里面扔一块石头，这个泥潭能够产生多大的波澜，这个波澜会荡到多远，这是一个。然后这个泥潭变成池塘，你同样往里面扔一块石头，它会更容易的波浪荡出去。我们会从古代、现代这样的历程当中，我们会发现这个世界的粘稠度逐渐降低，而且池塘与池塘之间已经连成了一个整体，所以当我们现在再发生一样的社会变迁的时候，会传播的更快，而且振荡的更快，会迅速的传播出去，而这个过程我们就认为我们这个世界是在不断的加速演化，这是一个趋势是很明显的。世界在加速演化的时候，我们说什么样的要素正在促进这样的社会变迁呢？两个东西非常重要，一个叫做技术要素，比如我们说蒸汽机发明推动了工业时代，比如说马登推动了战争技术的进步，比如说互联网把整个世界连在了一起，这些技术都会越来越快，越来越大的加速这个世界的进化。而另外一方面是方法论，我也是因为看另外一本书叫做《发明社会学》，里面就讲到创新发明这件事情经历了几个阶段，最开始的时候是个人英雄，开始发明一些东西，我今天发明一个、明天发明一个，但是其实到了爱迪生那个时候发生了很大的变化，爱迪生开始组建自己所谓的实验室和发明团队，他开始批量的在做发明，后来越来越多的企业、大公司在组建自己的实验室，然后他们开始用某种方法论在指导自己发明，当然这种方法论逐渐的传播出去以后，他会让这个世界发生更多更快的发明，也发生更多更快的变化，所以方法论和技术要素加起来是推动这个社会极速变化的两大主因。现在我们说开源当然是一种革命性的技术要素，他是技术的，他是改变世界的因素，而且因为他是一种源码，所以他通过借助互联网的全球传播，他会更快的改变这个世界，而另一个方面，开源作为一种方法论，我们也认为他有非常大的潜力成为一种方法论级别的改变世界的要素，这个方面我们还需要进一步的探索来再推动这个世界变得更快，这个是我们看这个世界变化背后变迁的要素。这个纯粹属于闲聊了，我最近自己在琢磨这个东西，我们想象一个近未来，就是我们自己活着能够看到的那个未来，称之为近未来，就是未来30-50年这样。“近未来”我们认为有两样事情会发生，一个是什么呢？人类正在逐渐的变成后人类，比如说自我认知，我们变成是一种多系统的人，我们在互联网、在物联网，通过穿戴设备，与人机共生的方式存在在这个世界上，而且我们对于自我的评价也越来越多的以量化数据化的方式在评价自己，比如说我们戴的手表里面还能够记录我们的心跳睡眠时间，第二天早上看数据报告清清楚楚，而且我们说最早没有时钟的时候，我们只是看太阳日升日落大概估计一个时间，最开始的钟表是圆盘的，现在我们带的手表绝大多数都是纯数字的，甚至精确到秒，我们正在越来越精确的判断数据，当然我们去做体检，我们去记录自己的步数都会去看。同时我们评价别人用的也是数据，你有多少粉丝，你有多少人关注，你有多少人回复评论，全都是数据，我们对于自身的，对外、对内的评价都开始数据化、量化了，同样的，我们的角色定位也开始碎片化，或者斜杠化。比如我们现在同时手里拿着两个手机，拿着笔记本，然后我们其实同时身处在多个场地，比如说我们在听演讲，我们可能在手机上同时在处理几件事情，我们可能笔记本上还在跟人处理另外一个事情，切换一个窗口就切换一个身份，切换一个窗口就切换一个话题，因此我们的身份、我们的角色、我们的人都会变成多核的，或者说我们也得变成多核的，这是人的角度。从社会的角度，我们如何成为一个复数空间呢？我特别喜欢举一个例子，比如我们现在面对面建群，我拿出微信来今天大家输0917大家建了一个群，大家觉得这样的行为是一个物理空间的行为吗？还是数字空间的行为？他同时发生在数字空间和物理空间，他同时具有现实意义和虚拟意义，是这样的一个复杂社会，我们如果把两件事情分开来看，这是物理世界，这是数字世界，不是，我们如果从数学上来说的话，数学上有一种数叫复数，他是实数轴和虚数轴构成的一个复平面，在复平面上面发生的事情就是一个复数空间里面的世界，而我们的社会，我们整个世界正在变成这样一种复杂世界，复合空间，他会变得越来越困难，越来越难以把握。之前我们说到的《CODE2.0》那本书里面讲到过法律问题，他说一个人在美国的某个城市的家里面，他写了一篇煽动性的文章发在国外服务器的某一个站点上，他到底触犯了哪个国家的法律？以及如果有人要起诉他该到哪里起诉他，如果警察抓他该在哪里抓他，这些都是复数空间的问题，或者这也是复杂的社会问题。在这样的一个世界里面，一方面整个世界正在加速变化，人类和社会、世界都在加速变化，变得越来越复杂，变得越来越难以把握的时候。甚至我们在说奇点，当然这个扯太远，但是正在这样变化的事情我们需要做好哪些准备？以及开源学能不能够有所帮助？所以这个口号或者说这是一直以来我在想要努力的一件事情，前面叫做以万法观开源，如果有了开源学这样的东西，由开源融万法，让它变成未来世界，对于那个不可把握、不可预测的世界提供某种指导，提供某种方法论，提供某种哲学。比如说我们作为个人如何做好准备，个人成长，第一如何成为多核多线层的人？如何成为一种开放的、自驱的人？以及如何成为有软实力或者甚至是超强软实力的人？我们说原来我们有的那些实力可能都不够用，我忘了一个具体的数据了，类似于我们大学毕业多少年之后，我们大学里学的学科就没有用了，或者现在的小孩让他现在学的知识，到了他工作的时候也没有用了，甚至再过十年二十年新出现的职业我们现在都没听说过，我们该如何去培养人？如何让这些人去适应那些未来还没有出现的职业，还没有听说过的，还没有想到过的挑战，这当然是教育学首先去考虑的问题，如何培养这样的人？如何让这样的人能够以开放的自驱的方式去适应未来的复杂世界？这是我们从人这个角度，从个人这个角度需要去讨论的问题。从企业的角度，当然企业也在面临飞速变化的世界，从技术的角度，这个很现实，哪些开源技术他需要关注，企业应该如何用好开源，然后如何把开源变成企业的助力，这当然是非常简单的部分。第二个部分就是管理的角度，刚才我们说的如果我们思考管理学，我们有没有可能有另外一种管理，另外一种对于组织的思考，另外一种对于管理重新的定义，企业有没有可能变得越来越开放？企业的文化是不是变成一个拥抱开源、开放、变化的组织？这个时候企业文化是什么？企业的边界到底是什么？这是从企业的角度要去思考的。第三个作为世界，这个世界当然正在变化，它要做哪些准备呢？有一本书是我认识的中国人民大学刘勇谋教授，他的《技术治理》这本书要出版了，但是现在还没出版，他讨论的是未来社会是用技术来治理的社会，好比我们现在做疫情防控是精准施策，全靠技术。我们要思考两个部分，第一部分如何用技术来治理社会，但是第二部分也很重要，社会应该如何治理技术，这也是很难的一个部分。我们来考虑如果这个社会面向飞速发展的世界，技术的基础设施是哪些，当然提的新基建一堆，包括5G，没有提到开源，但是最新的报告是提到开源了，开源作为这个世界的基础设施，我们应该如何发展？再说如果为了发展开源，开源所需要的基础设施有哪些，我们如何去发展好开源？这是基础设施的角度。第三个角度是什么呢？我们说科学探索，我举一个例子，我原来认识一个朋友是玩改装车的，他给我讲了一个很重要的道理，他说那些玩改装车的人都很差，他们不懂得要并重。既要改装发动机还要改装刹车，你不能只把发动机改装的很好，刹车不改，那你一定会出车祸。假设说这个世界飞速发展，那么这个世界的刹车系统在哪？防范风险的系统在哪？这些系统有没有得以同步的增强，没有！很少！我们现在还一直在说文理之争，还在说理科比文科重要，人文学科和社会学科的那些学科就是我们这个世界所需要的刹车，所需要的反思能力，所需要的监控能力，如果没有这样的能力，我们光是飞速的、再快一点地往前发展，有多大的威胁？这是我们社会需要去思考的问题。下面一个名词，这是我在网上搜了以后发现有一家公司已经叫这个名字了，其实这不是正式的名字，但是我很希望它以后如果有个东西叫“开源学”，它的英文名称能够翻译成 Openology，听上去很酷，但是已经被人注册了，已经是一家公司。接下来说两本书，这两本书我正在看，一本叫做《发明社会学》，另外一本是《教育人类学》，为什么拿这两本书来对比？这两本书讲了两个新的学科，都发生在从1920年开始逐渐成形，然后到了1950年之后，差不多到了他们鼎盛时期，接下来不一样了，接下来整个奥格本学派就没了，奥格本大师去世了之后，整个这个学派就没了。但是教育人类学差不多50年代开始逐渐的发展，到现在还在，而且是一门非常重要的学科，为什么一个学科搞了半天没了，另外一个学科长期的持续的发扬光大下去，这个背后到底出现什么问题？假设我真的认认真真想要搞一门开源学的学科，它到底要避免哪些坑不至于掉下去，它要怎么样才能够吸引到更多的人加入进来。通过这两本书，我比较下来，最重要的两点，第一个要尽早的成立学会，某某学的学会，第二个要有高校的老师能够继续带研究生，这门学派、这门学科要传承下去，不是光这一个人写了点东西最后就没了，这是可以值得思考的，如何创建一个学科。当然我完全适兕被带到“沟”里，今天就和大家分享这么多，未来可期，谢谢大家。欢迎大家加入我们！"
  },
  
  {
    "title": "基于DevOps的开源治理",
    "url": "/my_blog/posts/DevOps-based-Open-Source-Governance/",
    "categories": "OpenSource, DevOps",
    "tags": "",
    "date": "2021-09-04 14:20:00 +0800",
    





    "snippet": "本文内容选自2021中国DevOps社区峰会 · 大连站，我的演讲内容整理稿。很高兴来大连跟大家分享我最近的工作，我现在在做公司内部的开源治理，我会讲一个比较大的命题，叫做“软件工程的发展趋势”，就是把软件工程这么多年的发展趋势，按照我的版本来讲讲，看看有没有道理，再讲开源、架构、工程、DevOps的事情，大概是这样的提纲。软件工程的发展趋势最早，软件工程的第一个阶段，就是软件工程被提出来的时候，大概是在60年代到80年代的时期，为什么说在1960年代出现了软件危机呢？是因为在此之前没有几个人真正研究过软件工程，等到开发一些复杂软件的时候，发现软件做不出来了，软件危机的唯一目的就是要按期做出来。如果超期也不要超太多，所以在那个年代，过去没有思考过软件工程这个事情的时候，那些专家们都是数学家转行过来写软件，我们就向别的工程方法学习。学建筑工程、桥梁工程，瀑布模型就是这样出来的，结构化工程也是这样出来的，这个是第一个时期。我们可以认为那个年代的软件和软件工程是被军工所驱动，你可以这么理解，那个时候你生产一份软件通常卖给一家，卖给两家都不太可能，很难想象一个软件卖几百万套。等进入PC时代，个人电脑出来了，大量的企业和个人都开始有了自己的电脑，于是软件成为一门赚钱的生意。比尔盖茨写了一封信——《写给电脑爱好者的一封信》：你们这些人拿了我的软件就复制给朋友们用，你们号称软件爱好者，你们就是在偷我的钱，你们一直这样干，就没有一家软件公司能够赚到钱，就没有一家软件公司可以帮你们把东西写出来。当时这封信在电脑爱好者当中产生了剧烈的影响，所以软件行业才起来了，商业软件才出来了。软件才进入到下一个阶段，就是商业软件驱动的软件工程，不仅仅要把软件做出来，交付给军方、NASA等等。我们要尽快把软件做出来，把更多的功能堆上来，尽快的拿出去卖钱，原来结构化编程不够了，我们要面向对象编程，瀑布模型不够了，我们要从RAD、DSDM、SCRUE、XP到最后的敏捷宣言。我之所以梳理这样一个版本就是在讲，驱动我们技术领域的、工程领域、方法领域的变革，背后的趋势都是联在一起的。当然，开源领域那时候刚刚出来，一直到1998年Open Source才刚刚出来。到后来互联网出来了，软件有了什么样的变化？原来做出来是卖给用户的，是在自己的公司里用。现在我们要部署一个服务，要有一个集群服务成千上万的用户。原来的架构不足以支撑这样的用户量，以及这些用户量带来的变化。首先是云计算出来了，服务化、微服务化、无服务化等等都是被互联网不断增大的压力所逼出来的，编程方法也发生的变化，不光是敏捷宣言，所以DevOps就出来了。到了云计算这个时代，我们必须这两者一起考虑，所以工程方法出来了，不仅仅是Dev和Ops一起考虑，这些还只是云计算以及相关领域的变化。另外一个是已经蓬勃兴起的开源软件，这时候开源软件趁着互联网的大潮，开源软件无处不在了，我们所有用到的软件和技术，我们所有探索的任何新的领域都是开源，我们已经绕不开了，开源生态已经渗透到企业的方方面面了。开源吞噬软件之后所以，最新的挑战是什么？最新的挑战是我们处在一个被开源逐步吞噬的世界，开源、平台、生态、云计算、物联网、AI大规模跨组织协作，开源生态无处不在，面向云的开发组织与架构，围绕API组织开发，面向AI的开发与被AI增强的开发等等。这背后所谓安全、可信的软件如何做出来？这个是一个在网络上截的图，地球那么小，软件正在吞噬世界，开源吞噬软件，云吞噬开源，多云正在吞噬云。如果开源软件这么普及，我们要如何应对？所谓的应对是我们的工程架构，我们的软件架构，我们的组织架构都应该作出什么样的变化？这个是我从新思科技找到的一张图，他们在2020年审计了1546个代码库，平均每个代码库有158个漏洞，这个漏洞已经进来了，我们还要用，我们不是在一个坚实的地基上写软件，我们在一个不可控的世界上祈祷不要摔跤，扫描到的漏洞平均年龄是2.2岁，就是这个漏洞发生了两年多了，可能你不知道，黑客知道，但是你把它上线了，这就是现实。我们以为开源是免费的却没有认真地计算：使用开源、维护开源、参与开源社区所需要付出的成本。很多企业，都是被教育的，就是逐渐被线上事故、法律诉讼教育的，才知道开源还有这些麻烦，我们现在需要了解这些事情。有一个说法，有一个房间里面有一个大象，我们都假装没有这个大象，我们也不去谈论它，但事实上大象一直在房间里，98%的代码库，包含开源代码，75%的代码由开源代码构成。84%的代码库，至少包含一个漏洞，平均每个代码库，有158个漏洞。最近五年，开源代码的漏洞百分比，均有增加，精确追踪与定位漏洞，依然相当困难。投入开源的开发者的数量在逐年增长，越来越多的人参与开源代码的开发，意味着越来越多的新手在开源社区里面写代码，他们写出来的代码你就敢用了吗？稍微有一点不好意思的说，开源代码的整体质量在下降，和开源社区人数不断上升的背后是有因果关系的。还有一些问题，不光是漏洞，还有就是任何开源的软件背后都有许可证。你们听说过，这些不是互相之间相安无事的，而是冲突的。你用了我的开源软件，你就不能用别的开源软件，你在做开源软件选型的时候，只看功能，我都拿来用，后来发现开源软件有许可证冲突。还有很多开源软件其实就是一些爱好者，想也没想就把代码给扔出来了，没有许可证（License）就证明没有任何可靠性的承诺，不给你承诺，你怎么就敢用？所以，超过90%经过审计的代码库，含有许可证冲突、自定义许可证或根本没有许可证。除了许可证风险的代码库比例依然很高，商业软件中过时的开源组件已成常态。我们在用开源的时候，我们用各种包管理工具等，一口气引入很多包进来，就编译成功了，过了一年两年，里面用的开源组件没有升级，在社区里面暴露出来的安全漏洞也不看。91%的被审计代码库中包含：过去两年中没有进行过功能升级、代码优化和任何安全问题修复的依赖项。这就是房间里的大象。开放性架构与开放性软件工程但我们是不是不再用开源呢？这不能是我们的选项，因为开源太香了，那么方便，那么好用，怎么可能不用呢。今天也是架构专场，我们讨论开放性架构的问题，比如说什么叫拼接与一致性的矛盾？我们原来做架构师，想当然认为架构都是我们设计的，其实有多少东西不是你的？你只是抓过来放在你的篮子里，可能鸡蛋大小型号不一样，甚至不是一种鸡蛋，你怎么才能把这些组件搭建成一个一致性的架构，让他们相互之间没有冲突，可以让他们配合良好。这个在开源越来越普及的现在，越来越困难。第二个就是开放性与可靠性的矛盾。我们的代码来自四面八方，而系统运行在开放性的环境里，我们运行在某一个云上面，一层一层往下看都是开源组件，一直到下面的操作系统，上面可能是别的开源。你想他同时是一个开放式的网络环境，我们如何保证这样的一种开放性的系统和开放性的网络环境在运行过程中是安全可靠的呢？在系统架构中如何考虑进去呢？第三个就是规划与迭代的矛盾，我们信仰重构和迭代，但是我们从马车重构迭代是不可能获得一辆汽车的，我们有一些风险在一开始做规划设计的就要思考，甚至是艰难的判断取舍这样的事情。有一个吐槽，我们在很多的技术大会上听到很多成功故事，可为什么我们没有成功？我们给大家的也不是答案，这些问题也很难，在任何一个领域、公司、企业、架构公司里面都是难题，我只是把这些问题说出来了，不能单纯的想如何简单快速地把功能做出来。下一个问题是一个开放性的架构放在那里，我们软件工程实践如何应对挑战？下面说DevOps的层面。基于DevOps的开源治理刚才有一个做医药的兄弟在说，他们项目组的DevOps实践，我想提出一个公司层面的DevOps。先说项目组，我们这个项目在选型阶段，我们该如何决策这个事情？该引入什么样的开源软件？以及这个软件的质量如何判断？这个是需要重视的。不是我自己的DEMO跑通了就用了。在使用阶段，要分析我们使用那么多款的开源软件相互的依赖关系，选择了一个组件，甚至有上千个组件会不会连带带进来很多很多的问题，我们如何预防和隔离这些风险，以避免我的选择给我将来制造麻烦。第三个就是重视修改规范，我们拿了外面的开源软件进来，有时候这些开源软件不够用，我们会去改。一旦把别人的开源软件改了之后，外面的开源软件还活着，还有新版本出来，你怎么办？下一个版本出来了，你在新版本上再改一遍吗？你的改法跟原来的也不一样。如果要改的话，尽量要正确的修改，加入你的修改回馈到社区，社区是要的。我们更建议是要主动回馈到社区，这个版本出来改都不要改，因为已经在里面了，这些都是在项目范围内需要考虑的。下一个问题是企业级的DevOps，我来自华为的开源能力中心，这就真说到我的本职工作了，现在有八万多的研发人员，下面有很多的项目，这些项目多多少少都会用到开源软件，是不是各自都去用了呢？肯定不行，要在公司范围内做集中管理，我首先要知道，全公司有100个产品，用了12000个开源软件，去重之后只有6000个，大概有100个产品线都在用，只有一个产品在用我也要知道，各自用的版本，这些开源软件的来源是什么？从哪里下载的？如果从正经网站下载就算了，如果从莫名其妙的网站下载我也要知道，有一个白名单的制度，是某某知名开源软件官方网站提供的下载，我要知道他们到底用了什么。比如说你们产品线用他们的软件的6.0版，另外一个产品用了他们的软件的7.1版，出了某一个安全漏洞，这样一种漏洞通知是使用管理的一个很重要的步骤。还有一个就是对外回馈，我们真的修改了开源软件，我们要有一个判断，怎么样才能判断如何把这款开源软件某一些修改的部分回馈到社区，这里面非常的复杂的部分是，比如说我们有三个产品线，都改了一个开源软件，比如说OpenSSL的1.1.1版本，他们各自改了不一样的版本，在公司范围内，同一个对于开源软件三个不同的修改，到底归一还是各自管理？我们有一个委员会，来判断到底是否规范，到底哪些修改是要回归到社区，这个就是公司级的DevOps，尤其是面向开放架构的DevOps管理，细节有很多很多，因为很麻烦。软件工程的数字化转型下面回到软件工程的数字化转型，这是一个架构，这个我们在公司里面讲了很多遍，原来DevOps不是解决方案吗？这个就是公司级的DevOps和我们普通DevOps的最大的区别，我们要建立一个数据服务层和业务管控层，原来在DevOps有很多的工具，比如说各种开源软件、扫描等等工具，都是各自开发或者某一款开源软件的，有采购进来的，也有自己开发的。我们要把所有工具的用户、决策收到统一管控层。一个人有什么样的权限在DevOps下的权限是一致的，否则下一个环节就做不到了，这就是管控层面。我们要有一个审批的流程，比如说你们部门要用一款新的开源软件，这个新的开源软件要经过一层一层的审批。这个审批通过之后，要有一个工具，从外网把某一个外网仓库的开源软件下载回来，然后再初始化。这个流程用规则把它固化下来，什么样的级别和什么类型的开源软件，什么样的部门在什么情况下用什么样的开源软件，把这个做成一个公司流程的业务管控层。同样，我们说数据服务层，我们从外网下载很多的开源软件，到底有多少款？每一款到底什么样？地址是什么？被什么样的人用了？都要独立存放，而且还至少分为两部分数据，一部分是外网的公共数据，一款叫OpenSSL的开源软件等等。还有一些企业内部数据，基于这些数据，我能够有算法层，我可以做运算甚至是一些AI算法，或者聚类算法，通过算法可以做出一些有价值的报表，这些报表可以看出下面的运行情况。当然，这些算法以某种数据服务的能力提供出来，最后中间的所谓的技术解决方案，就是要把所有的数据服务层、业务管控层和DevOps串联起来，就是一个最简单的解决方案就是源码初始化，一个团队到业务管控层申请一个开源软件，流程通过了。从外网抓取，然后初始化，再写到服务层，这一整套完成了，再串联解决方案，这算是一个0层架构，下面展开每一个都非常多的，这个就不多展开了。我们聊一下数字化转型，我讲的是软件工程的数字化转型，我们针对复杂系统首先追求的是看得见，所有的软件资产集中存放，所有的相关数据集中存在，所有的业务流程集中呈现。都先集中，而这个集中背后的难点是什么？原来在公司里面有无数大大小小的系统，这里面有无数种的数据，想办法把它的集中放在一起，同类的数据归并到一张表里面，同样的数据归并到一个库里面，这样才叫做看得见，我们跟领导讲这个目标，领导很高兴，我能看见。如何在一个企业内推数字化转型，就跟领导讲，领导你想不想看见下面什么情况，领导说当然想看见，领导看得见就是第一个需求，我们想办法把数据集中起来再呈现出来。一个开放性系统如何提升它的管控性？就是管得住。什么概念？那么多DevOps的系统，里面充满了断裂点。这个环节跟下一个环节需要人工调整或者再改一改，总会有问题，这些断裂点就是我们需要把它补上，把断裂点变成控制点。我们举一个编译构建的例子，有一个团队这次编译的时候，其中什么JAR包编译进去了，等到我们有一个漏洞中心，突然收到一个消息，外网告诉我们，这个开源软件1.1版有一个安全漏洞，下次编译就不会通过，因为你的开源软件用到了1.1版，你要升级到1.2版才可以通过编译。我说的这种是非常粗暴的一种策略，但是在整个的DevOps的一个一个的环节当中，我们来通过各种各样的控制策略，把它都能够管控起来，或者是限制、上报、智能修改、智能工具加下来就是管得住。第三层讲就是自我评价，这个系统到底做的好不好？首先要定义什么叫管得好，我们想要探索、试错等等，如果这个指标很精准，拿数据的实证模型来验证它，内部组织结构或者内部的系统架构都是清晰的，我们可以创建的是一个实证的模型。如果系统特别的复杂，甚至可能是一个黑盒状态的话，我们可能猜它内部是一个什么样的东西，我们要做的就是探索模型，看能否探索到这个系统架构。另外一个说，可以拿来做为经验的就是谈指标的时候，没有用的指标叫做展示型指标。如果一个指标是1500左右，到底是好还是不好？领导看到的这个1000、1500、2000到底能干什么？什么意义都没有，这个指标拿出来被领导看到，我需要有什么动作。比如说体温37度我可以不管，但是38度、39度我需要吃药，有这样一个指标展现在领导面前，领导就知道我需要干什么，我们在企业内的各种各样的指标的时候。指标不是越大越好，指标也不是越漂亮越好，指标要指导我们到底怎么样改变？指标这个事情上来就应该告诉领导，我不知道，我们需要探索。这个事情你要说我们要一起探索，而不是说在外面找了一个最佳实践，那你就完了。把自己和领导带入到坑里面去了。我们关注的是结果型指标，结果是最容易判断的，我们对结果指标的应用渐渐有了经验之后，我们反过来反推过程性的指标，但是千万不要一开始就去制定过程性的指标。这个危险性在于很容易指导团队去做一些看上去漂亮的指标。我们找一个缺陷率，还有测试覆盖率，就是一个过程性的指标。一个团队追求测试覆盖率的时候，是可以无所不用其极的，我们要做数字化转型的，尤其在研发、工程类的，要看得见、管得住、管得好，要老老实实的告诉领导和团队，我们是需要一起探索的，这样才能做得更好。除了软件工程领域的数字化转型，比如说我们在工具层面要做转型，同时我们在方法论的层面也要转型。我们如何探索？如何看待工具？腾讯朋友也说到工具可以帮助企业转型，光靠工具还不够，我们在探索的方式上也要有所尝试和思考，还有就是软件开发的其他领域，不光是软件工程，现在非常热门的智能编程、代码自动补全，这些都是智能化非常早期的阶段。我们应该假设，整个华为范围内，我们可以拿到所有研发员工相关的数据，包括它的静态数据、行为数据、过程数据，我们全部都拿到，再加上想象力，我们可以做出更多的智能化探索。今天这个事情就不展开讲了，这完全就是开脑洞的事情，可以搞出很多玩法，今天就不多讲了。谢谢大家！Q&amp;amp;A环节提问1：老师您好，您讲的非常精彩，有一个小问题，关于管理权限，业务管控层面那个，提到说整个环节中比如说同样一个角色，或者不同角色在这个过程中，有相同的组件，比如说测试阶段别人打不开，为什么要有这样的角色？比如说你测试的不是你需要管控的。庄表伟：比如说有两个工具，一个是代码托管工具，可以触发流水线，触发代码检查工具，这是三个工具，理论上我的权限我的代码提交，就可以触发流水线，如果这个流水线提示我哪里代码报错了，我可以看到报错信息，就是代码检查工具，所谓错的地方的展示信息我也可以看到，否则我这里走不通，因为是三个工具。提问2：虽然上一位观众也说过了，我还想说一句，非常精彩，DevOps开源治理，目前我想了解一下，咱们华为对于开源治理已经做了哪些比较好的实践？就像刚刚您提到集中管理、资源管理、使用管理、回馈管理，目前有团队落地了，是小范围还是大范围？庄表伟：这个事情很难，我们已经干了两三年，但还需要再干三两年，涉及到细节，会有无穷无尽的细节，一开始的时间初步可以解决，还有就是效率问题，还有就是一致性问题，诸如此类的，只能慢慢来，绝大多数华为内部的开源软件都可以做到统一管理，但是还没有做完，至少还要做两三年。"
  },
  
  {
    "title": "产品经理的伦理学",
    "url": "/my_blog/posts/ehtics-of-product-manager/",
    "categories": "Technology, Philosophy",
    "tags": "",
    "date": "2021-08-21 14:20:00 +0800",
    





    "snippet": "技术有病，谁有药？昨天读到了一篇很有意思的文章《技术有病，谁有药？》，有一些哲学家，对于当今的技术问题，产生了“普通用户” 的困扰。当然，一般的用户，可能仅仅是简单的困扰，而哲学家们，却由此引发了更加深入的思考。  大家都在睡觉前玩手机，甚至因此拖到很晚。  大家都在吃饭的时候看手机，甚至没空和同桌吃饭的家人朋友交流。  大家都更加相信手机导航，也因为导航失灵，掉到了“坑”里。  大家都遇到过网络失灵、PC死机、手机死机、App出现bug。到了哲学家这里，这个问题会被“抽象”的讨论。比如：人对技术的依赖，人被技术所异化，以及人被技术所拒绝。但是，作为一个技术出身的圈内人，做过程序员、做过架构师，也做过产品经理的人。这个问题不会被这么“抽象”的讨论。这不就是一个产品设计的问题吗？所以我发了一条朋友圈：“技术有病，产品经理有药。”结果，非常有意思的是，另一朋友回复到：“产品经理有毒”。我又再次回复给他：“毒药也是药，是的，产品经理既能为善，也能作恶。”产品经理也要关注伦理学？因为与文章中的刘永谋老师认识，于是我把这段有趣的对话，发给了刘老师。并且说道：“其实不开玩笑的说，我觉得确实应该重视“产品经理”的作用。在技术如何变成产品的过程中，产品经理的作用越来越重要，而这个岗位，现在的目标还是完全不思考“善恶”的。”于是，在刘老师的鼓励下，我打算认真的思考一下：产品经理的伦理学在动笔之前，我思考的第一个问题就是：“这篇文章会写给谁看？产品经理吗？”如果我以“用户体验”为出发点来谈，产品经理们是会看的。但是，上升到伦理学的高度，估计他们就摇头走开了。为啥呢？因为他的KPI里，没有这一项。汽车上的安全带与刹车系统是如何进化的？简单的回顾一下历史：  1885年，那时欧洲普遍使用马车，那时的安全带只是简单的为了防止乘客从马车上摔下来。  1910年飞机上开始出现安全带。  1922年，赛车场上的跑车开始使用安全带，  1955年，美国福特轿车开始装用安全带，总体来说这个时期的安全带以两点式安全带为主。  1955年飞机设计师尼尔斯到沃尔沃汽车公司工作以后发明了三点式安全带。  1963年，沃尔沃汽车公司开始把尼尔斯的三点式汽车安全带注册，并在自产的汽车上装配。  1968年，美国规定轿车面向前方的座位均要安装安全带，欧洲和日本等发达国家也相继制定了汽车乘员必须佩带安全带的规定。  我国于1992年11月15日颁布了通告，规定1993年7月1日起，所有小客车(包括轿车、吉普车、面包车、微型车)驾驶人和前排座乘车人必须使用安全带。简单的总结就是：因为汽车越来越快，我们需要对乘客有越来越好的安全保障。类似的，从1885年时没有刹车的汽车，到1900年的鼓式制动器，1950年盘式制动器，1990年以后的防抱死制动系统（ABS）。汽车制动系统，也从无到有，并变得不断的先进与智能。产品设计为何能被迫进化？有一个经典的案例，发生在美国。因为1993年的一起车辆事故，一辆1979年生产的雪佛兰汽车被撞起火，导致车上6人严重烧伤。其中她的5岁的女儿艾丽萨不仅失去了右臂，而且被烧得面目全非，共做过70余次手术；另外两个孩子的烧伤面积也多达百分之六十。结果原告律师起诉，要求通用汽车赔偿49亿美金，其中1亿美金为补偿性赔偿，其余48亿美金为惩罚性赔偿。原因就在于：“通用汽车公司早已知道这一型号汽车的油箱存在着潜在危险，但公司出于成本和利润方面的考虑，对此采取了置之不理的做法。” 经过1999年的二审，最后的赔偿金额，由原来的48亿美元降至10.9亿美元。简单总结就是：如果没有重大人身伤害，没有相关诉讼，没有高额赔偿。产品设计在安全性、便利性、合理性、友好性方面的改进，完全可能动力不足。相对而言，绝大多数的PC上的问题、手机上的问题，网络方面的问题，都不至于导致用户的生命财产重大损失，往往只是引发抱怨，用户不满而已。两种引发改进的力量一般来说，我们能够观察到两种力量，一种是市场，一种是法律。前者我们怕它不灵，后者我们又怕它太慢了。市场失灵，也是一个老话题了。尤其在互联网/IT这个领域，赢家通吃，一旦经过了早期竞争阶段，市场只剩下他们一家的时候，唯一能够推动他们改进的，就是利润。而不是：用户满意度。除非用户满意度下降，可能减少他们的利润。法律强制力当然是够的，但是往往只能在“灾难级现象”发生之后，才会有法律介入。虽然亡羊补牢，犹未为晚。但是，毕竟还是晚了。尤其是那些称不上灾难的小小不适，法律也不方便插手啊。工程师的伦理守则如何？在上次与刘永谋老师的交流中，我们也聊到了“工程师的伦理教育”问题，当时我还只是考虑了一个方面：工程师/产品经理，应该如何提高自身的修养与意识，能够在自己的工作过程中，做出更好的设计与开发。正好今天翻到了《美国土木工程师学会ASCE的伦理守则》，其中的第一条也是：“工程师在执行他们的专业职务时，应该将公众安全、健康、福利摆在最高位置，应该努力遵循可持续发展的原则。”问题在于：无论是工程师，还是产品经理，他们如何才能知道，自己设计的产品，将会如何影响到公众安全、健康与福利呢？如果，他们缺少这样的思考框架，缺少实际的案例反馈，他们又如何能够具备必须的意识与能力呢？仅有伦理守则是不够的！还是需要基础研究还是回到汽车的例子，如果一辆车要想开得又快、又安全、又舒适、又便捷。仅仅有动力系统是不够的，还需要有制动系统。甚至仅仅有制动系统也是不够的，还需要行驶系统、传动系统、转向系统、悬挂系统。如果将来我们的AI越来越发达，智能驾驶技术不断成熟，甚至还需要加上预判风险与紧急避险的系统。同样的，一个社会的不断发展，当然依靠科技的推动力量。但是，制动的力量在哪里？监控的力量在哪里？避震的架构如何设计？操作技术的逻辑是怎么体现的？随着技术的能力越来越强大，我们如何预判技术带来的风险，又如何规避或减轻这些危害呢？还是需要更多的基础研究一些不成熟的思考，想想还是写出来，共大家参考吧。正好，在写作这篇文章的时候，微信给我推送了一个TEDx演讲，《老年人如何在数字时代里享有尊严｜TEDx深圳》，也推荐给大家阅读。"
  },
  
  {
    "title": "为什么大家都喜欢在开源社区“吵架”？",
    "url": "/my_blog/posts/fighting-community/",
    "categories": "OpenSource, Community",
    "tags": "",
    "date": "2021-07-08 14:20:00 +0800",
    





    "snippet": "本文来自接受CSDN的一次专访。【编者按】《程序员》杂志自2001年创刊以来，就凭借其深度专业的内容和开放新潮的观点陪伴了一代又一代的程序员成长，斗转星移二十年，初心却未改。一路走来，曾经意气风发的少年们早已功成名立，他们有的已经晋升企业高管，有的通过创业早已实现财富自由，有的在技术领域独领风骚。今天我们邀请到了华为云产品专家、开源社理事长庄表伟，他将为我们讲述自己“从读者到作者再到技术专家”的程序人生成长之路。一款游戏引发的投稿冲动我其实真正开始接触《程序员》杂志是在2005年左右。在此之前我是很少会看程序员相关的杂志。一个偶然的机会我从上海的东方书报亭路过，顺手买了一份《程序员》杂志的合订本，结果发现里面有很多不错的文章，所以后来我就养成了一个习惯，每次路过书报亭都会去看一眼新一期的《程序员》杂志出来了没有，有的话就买一本。后来发生了一件很有趣的事情，让我和《程序员》杂志的关系变得愈加紧密。那段时间我特别沉迷于一个游戏，类似于现在的消消乐，五种颜色的球连在一起就可以拼成一个什么东西。玩了一段时间后我发现它和管理有点像，于是便写了一篇文章投稿到了《程序员》并且被收录进去了。那次以后我和很多CSDN的编辑都认识了，有一回刘江老师（前《程序员》总编）听说我要到北京出差还专门约我吃饭，我们那天聊到很晚，彼此收获也都很多。接下来的每个月我都会留意《程序员》杂志又出了什么新的内容，我最喜欢的就是每期的要闻点评环节，国内很多顶尖的专家都会轮流去给大家介绍这个月在技术圈又发生了什么新的变革。这是一个特别有意思的部分，通过他们的介绍读者们知道了很多新的东西，这在那个年代里是很宝贵的东西。到了2006年的时候，我又投稿了一篇《关注软件开发项目中的人》、2007年投了一篇《知易行难的软件开发风险管理》。给“年轻人”的一点建议其实不光是《程序员》杂志，还有CSDN网站都为广大开发者提供了很多的机会，通过这个平台，我认识了很多新的技术圈朋友，也有很多朋友原本就认识，然后在CSDN又碰到了。CSDN就像是一个大本营，这个圈子里的朋友早晚都会在这里碰到。有一期《程序员》还组织了一次英雄会，把所有给杂志投过稿的朋友全都请了过来，有的人之前可能都互相认识，有的人甚至还在网上吵过架，但在那样的场景下遇到大家都很开心。像这样的事情还有很多，我们现在聊开源聊社区，其实在很早以前CSDN就有一种社区感，在国内我相信很多技术人一开始都是从技术社区慢慢成长起来的，然后才逐渐深入到一个特定的社区，比如开源社区，要么去贡献，要么去参与，要么去学习。现在国内有很多能够写深度文章和专业技术的作者，我们需要一个能把大家聚拢起来的高端平台，我也很希望能通过《新程序员》可以把以前的那些老朋友们找回来，这是一件很有价值的事情。而且我很好奇他们最近都在思考什么问题，在研究什么新东西，大家互相交流，相信慢慢就会产生一些新的话题和新的方向。我还想提的一点是，我们那个时候想要搜索一个问题的答案是很困难的，但往往是当你查遍了资料、动手实践了无数次以后，才会有所收获。随着整个互联网环境的普及，现在网上的内容能够帮你迅速解决问题。但是解决完问题以后，你的脑海里什么东西都没留下，因为你很容易地就把问题给解决了，太容易办成的事情，留下的印象就不深刻，成就感也不高。没办法，现在的人都太急功近利了，所以当我得知《程序员》复刊了，我心里真的特别高兴，只有这种有深度、有思考、多角度、多维度的内容，才能给开发者带来真正的帮助。从《觉醒年代》谈到中国的开源其实我最近一直在看《觉醒年代》，我发现一种新的思想进入中国，其实会经历多个阶段，就好比开源，在最开始的阶段我们称之为“别人的开源”，在这个过程中我们是需要不断去学习的。第二个阶段才会变成“我的开源”，不管别人是怎么做的，我先加入进去成为其中的一份子再说。但是要想真正地让开源在中国成长为一个有活力有生命力的东西的话，它最后需要变成“我们的开源”实际上，我们在所有的开源社区都能够看到“吵架”的现象，在争论我们为什么要做这个事情，为什么不做那个事情，怎样是对的，怎样是错的。在讨论中大家渐渐形成共识，而不是因为Linus说了什么、理查德·斯托曼说了什么，我认为这才是开源的核心。"
  },
  
  {
    "title": "开源：献给世界的礼物",
    "url": "/my_blog/posts/opensource-gift/",
    "categories": "OpenSource, Anthropology",
    "tags": "",
    "date": "2021-06-15 14:20:00 +0800",
    





    "snippet": "01 如何理解开源？如何理解开源呢？我们可以描述开源定义，比如维基百科或百度百科上的定义，还可以念英文的定义，好像很厉害。但是讲完了之后，对方能听懂多少？可能你和对方介绍「什么叫做开放源代码？」「什么叫做开放其内部的代码？」，他一听，跟计算机有关、跟代码有关，那是不是跟我就没关系了？开源（Open Source）定义【维基百科】是一种在电脑程序的出品前和开发中提供其内部代码的做法。开放源代码在互联网上获得广泛使用，参加者需要大量更新电脑源代码。开放源代码使得生产模块、通信管道、交互社区获得改善。随后，一个新著作权、软件授权条款、域名和消费者提供创建的，一个新词开源软件诞生。【百度百科】开源（Open Source）全称为开放源代码。市场上开源软件层出不穷，很多人可能认为开源软件最明显的特点是免费，但实际上并不是这样的，开源软件最大的特点应该是开放，也就是任何人都可以得到软件的源代码，加以修改学习，甚至重新发放，当然是在版权限制范围之内。【Wikipedia】Open source is source code that is made freely available for possible modification and redistribution. Products include permission to use the source code, design documents, or content of the product. It most commonly refers to the open-source model, in which open-source software or other products are released under an open-source license as part of the open-source-software movement. Use of the term originated with software, but has expanded beyond the software sector to cover other open content and forms of open collaboration.第二种，我们再“学究”一点，我们可以引用“官方”定义，「Open Source」是个专有名词，这个词诞生在1998年，开源软件促进会（Open Source Initiative, OSI）成立后，发布了开源定义（The Open Source Definition, OSD），一共有十条定义。如果有一款软件，它以符合这十条定义的方法对外开源，我们才认它是开源软件。那在这里大致介绍一下：比如说如果我把我的源代码放在一个地方可以让别人随便下载，这算不算“开源”？远远算不上，这种只能叫做“代码可获取”。但是如果再加上其他的，比如说我允许别人把他下载的代码再分发出去，这就符合第一条，叫“自由再散布”；再比如说我还允许别人修改之后再发出去，这个叫允许“派生”等等。然后，如果我说「对外开源，但又规定所有中国的公司不能用我的开源」，这就不符合第五条“不得对任何人和团体有差别待遇”；再比如，我说「我这个开源软件不能用于制造武器，只能用于美好的善良的目的」，也不行，违反了第六条“对程序在任何领域内的利用不得有差别待遇”。这十条全部符合，才能算是一款合格的开源软件。讲完以上这些，大家对开源软件是不是更了解呢？未必。那我们还可以尝试着给别人讲开源的历史。比如，自由软件（Free Software）是什么？Open Source是什么？在自由软件诞生之前发生了什么事情？Linux在1991年启动开发；Eric Raymond所著《大教堂与集市》在1997年出版；Open Source这个名词在1998年诞生。然后再告诉他，有多少著名的软件都使用了开源，比如手机上用的安卓系统是开源的，再比如说你用的Git是开源的……讲完之后，虽然你还是不知道开源是什么，但是你已经学会了给别人讲故事。能够讲一遍故事，再加上一点专业词汇，感觉似乎也是略懂一点开源，看上去算是一个业内人士了。讲开源简史是有用的，但对于真正理解开源，效果不是很好。还有一种方法就是打比方。我曾经有一次去给一群中学生介绍“什么是开源”。  如果老师布置了一项作业，你们一人做一遍——这个很正常；  你们班上成绩最好的同学说：你们抄我的作业吧——这个不是开源；  你们不但抄了他的作业，还帮助他一起改进这个作业，全班同学，一起完成一个更好的作业——这个有点像开源了；  公开一份作业给全世界，然后大家一起来改进，一起来完成全世界最好的作业——这个差不多就有点像真正的开源了。开源就像抄作业？开源就像联合做作业？这个比喻是不是能拿来理解开源呢？当然不行。这个比喻中对的地方是「协作的方式」，而不对的地方是「“开源”没有老师给布置作业」。通常那个第一个把“作业”做出来的人，做的不是“作业”，是他有一个好的点子、创新的念头，想要做一个新的东西，然后他就开始做，做完以后把它开源，没有人命令他去做，也没有谁让他去“交作业”。所以，“开源”不是完全像抄作业，但是“做作业”“抄作业”这个比喻能够帮助很多同学部分地理解开源，尤其是开源的协作，但是不完全。我们用不同的比喻可以帮助人从不同的层面理解开源，但是也会误导人。  供应链？断供？  生态圈 食物链？× → 食物网 √  一粒种子 —— 最先的一个创意  土壤 —— 全世界的开发者我们一直在说，可以把开源比喻成供应链。不知道大家有没有听说过“断供”，就比如说「美国卡我们脖子，不给我们芯片，手机就不能生产了」诸如此类的话。在经济学管理学中，有一个“供应链”的概念，我们可以想象一环扣一环的一根链条。比如说，我要先依赖于这个原材料来得到一个初级产品，然后将初级产品再加工得到一个中级产品，最后得到一个成品。如果我们的软件生产也是以这样一种供应链的方式去理解的话，那是不是当中的某一段断掉，整个软件就生产不出来了呢？当然不是。如果我不把开源比喻成“供应链”，而是把开源比喻成一个“生态圈”，我们会想到一个词“食物链”，看上去也是单根的，一层层下来的，但其实真正的食物链不是一个链条，而是一个“食物网”。很少有一种生物，无论是动物还是植物，它只依赖于单一的下游，如果这个下游灭绝了就完了。如果是这样的话，这个植物或者动物，它的生存能力就太脆弱了。通常会有多个选择：在这个食物网里面，它的下游有多个。这是“生态”的概念，而不是链条的概念。再回到刚才说的“作业”。如果我们来谈“做作业”这件事情的时候，我们忽略了开源软件互相之间的依赖关系。我们要有多个零件，然后才能组装出来一个大的东西，这是有依赖关系的。但是前面这个“做作业”的比喻，感觉是他自己独立作业，互相之间没有依赖关系。所以说，每一个比喻都是不完整的。如果要说一个我比较认可的“开源”的比喻，我会更倾向于把它比喻成“生态圈”。比如说，我有一粒种子，这粒种子是我一开始的一个创意，然后我把它埋在土壤里，这个“土壤”就是全世界所有的开发者。当这粒种子开始向下生长的时候，就意味着有越来越多社区里的开发者愿意帮我一起来为这粒种子的生长做贡献；然后当它往上生长的时候，就意味着这棵树或者说这个植物长出了越来越多的功能，变得越来越强大，变得越来越强壮。这是「种子→树」的一种比喻，再来说「生态圈」的比喻。假设有一个热带雨林，这个热带雨林里有几百、几千、几万种动植物，它们共同构成了一个生态圈。然后当我们这样来看问题的时候，我们就会用某种环境保护的眼光、生态建设的眼光来看“开源”，这又是不一样的。所以，我们用不同的方法，从不同的层面去理解“开源”，哪怕讲到这里，大家对开源的理解依然停留在表象上。进一步的理解要靠大家真正深入到某一个开源社区，成为社区的一份子，然后又会有一些切身的体会。再比如说，还是举例子。除了开源软件，还有开源社区。开源社区就是由一群人组成的。那这群人为什么会来一起做一个软件？为什么会无偿地义务地把这个软件写出来？而且每个人都很高兴。这是开源社区需要研究的问题。如果要做一个开源社区，或者说在学校做一个开源社团，你也要思考这些问题，这些人为什么会来？他们来了之后，为什么会留下来？他们的兴趣，他们的热爱，他们的满足点，他们的喜悦在哪？他们的收获是什么？你要不断地去思考这个问题，然后帮助他们。（怎么做一个开源社区？）02 礼物接下来进入今天的正题——礼物。我推荐所有对开源有兴趣的同学去看《大教堂与集市》这本书，这是当代开源软件技术领域最重要的著作，不仅仅是开源领域，它可以被称为开源运动的“圣经”。我们今天只讲其中的第三章“开垦心智层”中的一个概念：开源参与者的内在动机问题。即，这些人为什么会来？他们为什么会愿意在社区里做贡献。书里面的原话是：他研究了“集市”开发模式的社会动力学，指出想要最有效理解这种模式，应该参考一下人类学家所称的礼物文化，而不是传统的交换经济，这种文化下，其成员通过送出礼物而竞争社会地位。这本书讲的是人类的两种协作模式。所谓“大教堂模式”，就是一个最高领导招募一群中层，中层再招募一群基层，然后要开始建一座大教堂，有非常严密的规划、非常严格的纪律、非常复杂的管理流程，最后把大教堂建成了。而“集市模式”，就是制定一些简单的规则，一群人就在一个大集市里，开始你付出一点我也付出一点，你贡献一点我也拿一点。通过这样一种方式，最后居然也把一个东西做出来了。这是一个很奇怪的事情。但是很多很多的开源软件，它背后的开发模式都是集市模式。因此他研究了其社会动力学，这些人为什么会来？然后参考了人类学家所称的“礼物文化”（[法]马塞尔·莫斯《礼物——古式社会中交换的形式与理由》）。书里比较了“命令体系”“交换经济”“礼物文化”三种不同的模式。命令体系，就是国王拥有一支军队，有将军、军官、士兵，通过一层层的命令来驱使人做事。交换经济，通俗点说就是我给你钱，你给我干活。我给你的钱多，你就在我这；另一家公司给得更多，你可能就过去了。而礼物文化恰恰是另一种不同的模式。书中说，礼物文化并不是对物质稀缺的适应，而是对物质充裕的适应。简单的说，就是如果我给你钱，你给我干活，那证明你缺钱。那如果你不缺钱，我想让你帮我干活，我拿钱买不到你的劳动力的时候，我拿什么来吸引你？这个时候就是，充裕性会使命令关系难以维持（我无法命令你了），会使交换变成无意义的游戏（我给你换什么你都不要）。在礼物文化中，社会地位并不取决于你控制了什么，而是你给予了什么。那么在开源社区里面，成功的唯一标准就是他在一群人当中的声誉，所以有一个声誉竞争模型。即，什么样的人是最厉害的开源的大牛。其实就是因为他在这个社区里面贡献了最多、最好、最有影响力的代码，所以大家听到他的名字就肃然起敬。不是因为他们有多高的行政职位，也不是因为他们手底下管着多少人，只是因为他们给这个世界贡献了多少东西。这就是所谓的“礼物”。那么这样的一群人是怎么长出来的？很神奇。为什么这些人会来到社区来贡献？因为在开源刚出现的时代，这些人恰恰是一群最不愁吃不愁穿的人，不在乎那些钱，但是他们会愿意做一些更有趣的事情、高难度的事情，他们被称为“黑客”。所谓“黑客”，不是那些去破坏网络、网站的“黑客”，而是用最漂亮、最神奇的办法做出一些高难度的技术性工作的人。这些人就是在社区里拥有最高声望的。「自称是黑客不代表你就是黑客，只有其他黑客认为你是黑客，你才是黑客。」书中提到了“礼物”，也提到了马塞尔·莫斯，因此出于好奇，我找了《礼物》这本书的原著来看。这本书是1925年出版的人类学著作，而马塞尔·莫斯也是现代人类学理论的重要奠基者之一。《礼物》开创了一个很重要的体系，后来很多人类学家到各个地方去研究当地的人类、部落、文化，都会去考察这个地方的“礼物交换”。但是这本书很难读，被称为社会人类学领域中最著名也是最晦涩的作品。《礼物》一书中不只讲了一种礼物，他讲了好多好多不同的古代世界的礼物，比如库拉圈（Kula Ring）、夸富宴（Potlatch）、通家（Taonga）等等。在《大教堂与集市》中只提到了夸富宴的概念，类似于我通过请人吃饭来夸耀我的富有，所有人来随便敞开吃，而且只要你来我就给你发红包，让你满载而归，这是夸富宴。但是真正美洲西北部落的夸富宴，不仅仅有请人吃饭、给人送礼，他们甚至还当众销毁或者毁坏那些珍贵物品来展示他们的慷慨。第二个更有意思的是，在马塞尔·莫斯《礼物》这本书里它原文写的是“礼物经济”，而不是“礼物文化”。它是礼物经济与现代经济之间的两种不同经济的对比。因为在真实的人类社会里，礼物是有交换的。比如说我送一个礼物给你，你收到礼物后会有回礼的压力（义务），因为“礼尚往来”。更有甚者，毛利人在解释「为什么我把通家（Taonga）送给你后，你要回礼给我」时，说：因为在通家里蕴含了我们这里一种叫做「豪（HAU）」的东西，是「礼物之灵」，背后藏有一种诅咒。就是说，如果你收了我的礼物，还不回礼的话，诅咒就会跟着你，所以收到礼物的人必须要回礼。而且书中还反复强调说，“礼物”是一个总体呈现的体系，因为参与交换的并不是个体，而是这些个体的中介，即整个家庭或整个氏族。Eric Raymond在写《大教堂与集市》时，为什么要去引用“礼物”呢？似乎哪儿不对？具体哪里不对？↓↓↓03 在开源社区理解“礼物”在开源社区里，所有的“礼物”都是「非物质性」的（比如源代码，补丁，意见和建议，其他贡献）。所谓「非物质性」就是，我把一个东西给了你，我自己并没有减少。比如一份代码，你拿去复制一千份、一万份，我手里并不会少；且不会因为我给了你，其他人就拿不到（礼物的排他性）。在开源社区里，特别强调的是「非排他性」。我一份“礼物”可以给无数人，而且是不做限定的给任何一个人。这跟传统的物质性礼物有很大差别。  OSD第5条：不得对任何人或团体有差别待遇  OSD第6条：对程序在任何领域内的利用不得有差别待遇第三点，在马塞尔·莫斯的《礼物》中，很强调“回礼”（迫于一些原因，必须要回礼）。但是在开源社区里，其实不构成回礼的义务，而是共同创造的邀请。我开源出来的一个软件，这个软件没写完，它不是一个完成品——「非完成性」，它是一个开放的、共同创造的邀请，欢迎全世界所有人跟我一起来完成这个作品。——它是一个「邀请」，不是一个完整的、不能再改动的「礼物」；当然，这样的一种「邀请」也可以被认为是一种更好的礼物。所以，当我们撇开这些差异来看开源世界里“礼物”的含义，一个不限制任何人而且没有回礼压力、构成一种共同创造激情、非物质性的智慧的创造力——这其实是一种更好的礼物。Eric Raymond有一点没有说错，那就是：任何一个社会都会褒奖那些无私、分享与贡献的人。尽管在细节上来看，他引用“礼物”的概念有诸多不一致的问题，我们可以去挑出来，但本质上来说是对的。我们之所以在社区里更崇敬那些做出贡献的人，就是这个原因。04 更加复杂的礼物现象因为好奇，我还看了其他人类学的书，比如《礼物的流动》。这本书讲的是一个更复杂的礼物现象。因为马塞尔·莫斯研究的是古式社会或者说是原始社会，但阎云翔老师研究的是中国黑龙江的一个村庄从1949至1992年的各种礼物相关的田野日志，这个时间在中国农村这样一个环境下，礼物有哪些形态。在马塞尔·莫斯《礼物》这本书里其实没有对礼物进行分类，但是在中国农村，其实礼物有很复杂的分类。比如说，阎云翔老师至少将礼物分了四类。第一类是仪式性场合的表达性送礼，如婚丧嫁娶、盖房与拜寿、被大学录取与参军等；第二类是非仪式性情境，如逢年过节走亲访友、拜年、小孩孝敬老人，老人给小孩压岁钱等；第三类是日常生活，如食物交换、爱情信物；第四类是工具性送礼，如间接付酬、“溜须拍马”“走后门”送的礼。因为有这么多种不同的送礼现象，我们不能简单地说他是通过送礼来展现他的慷慨，然后来获得自己的社会地位，因为有更复杂的礼物关系。而且送礼者和收礼者之间，有可能是平等的关系，也可能是上下级的关系。所以作者在书里列了一张表，所谓的横向关系就是两个人是平级的（平辈的）；但是上下级关系（纵向关系）的话，有可能是父母和子女之间，有可能是长辈和晚辈之间，有可能是领导和下属之间，都是上下级关系。这时，X给Y送礼，礼物从哪里流向哪里，权力与声望并不一致，是否获得优势也很难判断。作者写了很长的章节来一点一点地分析其中的关系，比如下属给领导送礼也有两种情况，逢年过节送礼是一回事，请领导帮忙办事又是另一回事。不同的送礼的情况，达到的效果也不一样。马塞尔·莫斯《礼物》一书中提到的“夸富宴”是送礼竞争（我比你送得多，我就比你有更高的声望）；但是在中国农村，其实有另一个说法，是收礼竞争。根据《礼物的流动》中所说，当地村民办活动时，会专门请一个师傅来记账（礼单），礼单会一直保存在家里，定期拿出来看。他们记下这个礼单是为了将来回礼。更有意思的是，所记礼物越多、人数越多的礼单，越值得珍藏，因为这是这家人“有面子”的表现。再回过头来看，为什么收礼越多，反而面子越大呢？这时候的社会，和原始社会又不一样了。问题更复杂了，我们是不是能够简单地把“礼物”的概念套到开源社区里？不能这样。05 在开源社区理解“礼物”所以我们回到开源社区里再来理解礼物。简单社会，比如说原始社会，其实比较容易，就是一个人，他做了什么行为，然后基于他的行为，社会给予相应的评价，他的社会地位因此也会发生变化。但是到了复杂社会，一个个人他的行为，我们不会直接去评价，我们会基于它不同的社会地位给他不同的社会评价。我们再来看一个人的社会地位，其实可以分为四种。比如说最简单的，通过贡献获得的荣誉地位；第二种，由个人奋斗而来的成就地位，比如我通过个人奋斗成为了这个村的首富，会有一个成就，当然如果能成为全国的首富就更厉害，地位更高；第三种，你在一个组织架构中获得的结构性地位，比如村长、校长等，是由组织任命而来的职务地位（结构性地位）；第四种，由人际关系而来的关系地位，比如说，虽然你不是首富、不是村长、不是什么厉害的人物，但是你家里有人是，这个时候你的地位也有了，这是由人际关系形成的。如果你认识一个人，他的社会地位很高，那么你跟他的关系越近，你的地位自然也越高。但是，在开源社区，由于剥离了个人的其他地位属性，我们不去看他的身份、地位、成就，只看他在社区里贡献的东西，所以能够更加靠近简单社会的评价模式。所以当我看《礼物的流动》这本书时，我看得很起劲，因为书中描述了很多我不理解的社会上的现象。但是回过头来对照开源社区，会发现很多的不同。开源社区没有那么复杂，或者说，开源社区至少现在还没有那么复杂。这是我们对社区的理解。但是开源社区也有“礼物”，我们可以讨论“礼物”的两种含义。第一种是一款开源软件，我是一款开源软件的作者，我把它献给社区；第二种是向一款开源软件做贡献。那么，相当于是这款开源软件，从社区里不同人、不同企业那里收到“礼物”，它需要有一份“礼单”。在Linux内核社区，每年都会出一个内核贡献排行榜。右边这个表格就是在Linux内核5.10这个版本时的榜单，华为公司的贡献占到了8.90%，排名全球第一。他们要通过厂商排行榜，不断地向社会发布一些消息，让这个社会意识到哪个厂商/公司的贡献是最大的。这个事情其实在我们日常生活中也是可以理解的，人类学中讲到“仪式”，我们为什么要办各种各样的仪式？无论是大型的庆祝仪式，还是大型的聚会，所有的仪式都是为了调整集体记忆。比如说村子里一户人家办了一场仪式，来了500人，那么村里人都会记得他们这家人的社会地位在上升，因为家里越来越有钱了，或者有人当官了等等，这些事情都会调整这个村庄的集体记忆。同样地，我们在开源社区也会不断发布这种榜单。通过不断发布这些榜单，来不断地调整对开源社区的不同开源贡献者的评价，也是去调整集体记忆。06 开源世界的冰火两重天最近出现了两个新闻，一个是「Babel项目陷入财务困境」，另一个是「涛思数据完成4700万美元B轮融资」。我们会觉得开源世界里“富的富死，穷的穷死”，哪怕是同样非常著名的、非常好的开源项目，他也会有不同的待遇。我就发现，在开源社区有两座冰山，一座是在海面之上看得到的开源项目，就是那些投资商会关注的，有重要商业价值的，有很大收益的，但这些只是开源世界里的极小部分。剩下的很多开源项目，它们几乎没有商业价值，也没有投资前景，它们只是默默地存在着。但海面之下的开源项目，不仅重要，还是海面上的开源项目存在的基础。另一座是开发者，即开源社区里所谓的“大牛”们，他们是海面上的那座冰山（一小部分人），而在海面以下的那部分人，他们其实很多时候没有那么受到关注，也没有收到那么多回报，没有享受到礼物文化带来的回馈，他们的贡献甚至被忽略了，他们在社区里的地位也只是说还行。任何一个领域，真正站在聚光灯下的都是少数，不光是开源。我为什么会来谈这件事情？就是因为我们一直很喜欢《大教堂与集市》这本书，用里面的礼物文化来激励自己，也用它来吸引新人——你只要贡献的越多，你就会获得越高的社会地位。但事实上我们自己心里清楚，能够被礼物文化的高光照耀着的毕竟是少数。所以，我们再回过头来看，礼物文化究竟处于人类历史发展的哪个阶段？在人类学本身的解读中，分为两个阶段。第一阶段是礼物经济，即部落与部落之间、氏族与氏族之间互相交换礼物，进入市场经济（第二阶段）后，礼物渐渐被边缘化，现在成为我们生活中的一部分，但已经没有经济效益了。根据Eric Raymond的解读，是命令体系→交换经济→礼物文化，“礼物文化”似乎是第三阶段，是人类发展的最高阶段，好像觉得有点像共产主义。其实开源在西方刚起来的时候，很多人会把开源和共产主义形成某种映射关系，认为他们强调共产主义，强调共享。但是，马克思提到了两种共产主义。一种是原始共产主义，一种是真正的共产主义。原始共产主义是会过去的，过去之后会进入奴隶社会、封建社会、资本主义社会，然后才会进入到真正的物质充裕的共产主义社会。我认为，Eric Raymond之所以说「黑客会享受礼物文化」（是有时代背景原因的），其实在上世纪六七十年代、七八十年代，早期的那些黑客之所以会感受到物质充裕，恰恰是由于当时的软件开发从业人员严重供不应求。他们是当时金字塔顶端的一小群人。最开始的时候，写代码的人被称为科学家，后来是工程师，再后来是技术人员、码农。随着写代码的人越来越多，会写点程序的人越来越多，其实他的社会地位在下降。未来的共产主义其实还不太能看得到，现在还是处于资本主义和社会主义的阶段。07 如何理解开源？又回到这个问题「如何理解开源？」有一种解释说，我们非常喜欢Eric Raymond对于礼物文化的解释，认为礼物文化是人类发展的最高阶段，而在黑客世界率先实现了礼物文化。那之后会如何发展呢？好像现在越来越不是这样了。另一种解释说，我们看重的不是礼物，我们更看重的是开放式协作。什么是开放式协作呢？就是一群不确定、没有固定编制的一群人，在一个开放式的组织下面，通过某种开放的办法，一起来做些事情。所有的过程都是一边商量，一边讨论，一边尝试着去往前走，这是开放式协作。在这种开放式协作中，我们要不断地去思考：这群人协作背后的动力是什么？他们的心理是怎么样的？他们的动机是什么？他们的激励因素有哪些？他们为什么愿意继续参与这样的开放？接下来就是，如果这个社会不断发生变化，时代变了，社会变了，经济关系变了，技术条件变了，我们还是希望用开放式的方法去协作，我们哪些地方也要进行变化？“礼物”的概念还能不能用？如果继续用，有哪些地方要发生变化？比如说我们有没有可能引入某种区块链的激励机制，引入某种更公平、公开、透明的激励机制。这些都是需要不断思考的问题，因为是开放的，所有的未来都还需要我们去探索。这是开源社写的《开源人宣言》中，对于开源的理解。在这个过程中，我们谈了三要素：开放、平等、分享。通过这三个要素，形成了一种被称之为开放式协作的模式，通过这个办法，我们一群人汇聚在一起，共同创造更加美好的世界。这是我们对开源的理解，但这样的理解是不是准确呢？其实也未必。所以，再回过头来看我今天讲的内容，其实我之所以会顺着一本书里面的一小段话一直往下追，然后去看很多人类学的书，有点“刨根问底”的意思。但我“刨根问底”下来之后得到的感受就是Eric Raymond当初写这本书时，他应该没有仔细地看过太多人类学的书，只是稍微看了一下，然后觉得还行就拿过来用。如果我们真的去深究“礼物”的概念，会发现未必是这么回事。所以我前段时间看完了另外一本书，叫《寻找亚洲》，里面有一段话特别好，说的是理论的旅行，你从一个地方看到一个概念，把它挪到自己这个领域来用的时候，理论的旅行需要一个必须的条件，那就是它需要脱掉直观的外衣，变形为与不同社会历史相应的新的形态。在这种变形之后，理论原有的框架和结论都不再具有重要意义，而它所提供的洞察力本身则会以不同的形态再生。这就是说，我们如果真的非常深入地去思考一些概念，哪怕这些概念用在我们自己的领域里未必适用，它也会给我们很多启发。08 开源世界中“礼物”的第三种含义我们前面说了开源世界里“礼物”的两种含义，第一种是一款开源软件，第二种是向一款开源软件做的贡献。那么开源世界里“礼物”的第三种含义是开源作为一种方法论。这种方法不仅仅可以应用在软件开发这个工作，我们也可以把它应用于更多的领域，比如说开放式教学、开放式协作、开放式组织。所以，为什么大家要了解开源？不仅仅是开发软件，我们是来一起探索一种开放式协作的模式。以某种敞开的、开放的心态，一起来想办法创造一点什么东西，不管创造出来是的是一个软件，还是一首歌、一部戏剧，都可以。任何一种创造，一种开放式的创新，它都可以用到这种开源的方法。而且像这种探索的过程，你在这里尝试过了，将来一定可以应用到其他地方。这才是了解和学习开源最重要的价值。我现在在做很多这种相关的思考，也是希望“开源”不仅仅用在开源软件，我也想把它推广到其他地方去。这是我想做的事情，也可以供你参考。今天的分享到这儿就结束了，结论就是：“开源”这种方法论本身，它是一种献给世界的礼物。"
  },
  
  {
    "title": "License之外，社区的规则与潜规则",
    "url": "/my_blog/posts/community-rules/",
    "categories": "OpenSource, Community",
    "tags": "",
    "date": "2021-06-05 14:20:00 +0800",
    





    "snippet": "各位朋友，大家好！很高兴来到这次中国开发者生态峰会，与大家聊聊规则相关的话题。咱们会场第一排有桌子、有水、有杯子，第二排后面就没有，这是一种规则。我上次去一个数字中国创新大会，在桌子的前面还有一排真皮沙发，一个位置是两个人那么宽，这也是一种规则。不同的社区，不同的场合，有不同的规则。我们今天就来聊聊关于规则的事情，当然除了规则，还有潜规则。首先是前置说明，包括何为规则，何为潜规则，何为社区等等。这其实只是一个思考框架。这个ppt还会不断的生长，也许某一天会变成更长的一篇文章，或者是n篇文章，甚至会演变成合集等形式。何为规则首先是情、礼、法三部分。人情世故，基本的人情冷暖，人和人之间是什么样的关系，这些都是基本的伦理规则，这是第一部分。我对你讲礼，你也对我讲礼，礼尚往来，要有礼仪、懂礼节，这些是礼仪、礼节方面的规则，这是第二部分。最后才是法律，当我们说到规则，很多时候都会只停留在第三部分–法律，我们往往会把规则理解为法律，但其实规则不仅仅是那些成文的法律。我们有成文法，成文的规范，我们社区有License，有授权协议，有CLA等，这些都属于法的层面。但是为什么会存在Code呢？简单来说，我们认为这个社会在不断发展，在原始的、几百人的小村庄时，大家互相之间不会讲礼或者法，只会讲基本的伦理道德，到了奴隶社会或封建社会就开始讲基本的礼节，再往后发展成道、德、仁、义、礼这样的一个过程。最开始的时候，人们都讲道，然后开始讲德，然后讲仁、讲义。普罗大众在丢失了仁义道德之后才会讲礼。等到不守礼之后，才会制定法律。因为社会变复杂了：你的礼和我的礼，你的道理和我的道理都不一样。这个时候就需要一种有强制力的，更具有一致性含义的成文法律来规范社会。但是法律其实是很落后的，因为所有的法律需要有专业人士来解读，需要有专业人士去执行，比如律师、法官、执法人员等等。所以会出现代码，比如说，一张门卡在门禁处刷一下，门就开了。这背后其实是一条规则，即有权限的人能进门，没有权限的人不能进门。但执行的人不是门卫，而是一个智能的，可以执行的代码。它背后其实也是规则，只不过它被更加迅速的，不会产生任何歧义的执行了。这是我们所理解的规则。何为潜规则潜规则的特征就是在制定规则之前的那部分。比如说，我们建立一个微信群，有一天有人发了一篇广告，我们就制定了第一条规则：发广告之前必须先发红包。等到有人每天都在发广告，我们又制定了一条规则：发广告之前必须先发大红包。这样的过程就是从潜规则变成了规则，但这种规则很难被执行，如果他跟群主关系特别熟或者给群主某些好处，他就可以在群里一直发，也不会被踢掉，因此还是存在潜规则。但是这些规则并不是每次都会生效的，要看管理者的意识，管理者背后的原因，但有些原因是不公开的。在大一点的社区，我们会观察社区里各种现象，我们会形成部分小圈子，在背后揣摩，为什么他被封了，为什么他被禁言了，为什么他的帖子被删掉了等等，我们会揣摩各种原因，比如他可能做了某些事情，或者他没做某些事情，这些东西就是潜规则。我们可以发现任何社区都会有潜规则，没有社区是没有潜规则的，完全公开透明的。何为社区首先，是一群志同道合的人聚集在一起，共同创造一些东西，比如说做一款开源软件，在做这款开源软件的过程中，我们不断地打磨、改进、提升、完善作品，形成的社区就会产生某种“近悦远来”的效果：越来越多的人会因为你的产品、开源项目，社区氛围而来。社区里的人也会沉浸其中。当人多了，随之而来的矛盾冲突也会多，所以我们会不断地去完善规则。这个时候又会回到志同道合的过程，因为在完善规则的过程中，我们会不断地思考，在社区里，哪些事情能做，哪些事情不能做，哪些事情是被鼓励的，哪些事情是不被鼓励的。如果这个社区有足够的群体意识，我们会自省：我们为什么会走到一起，为什么做社区，我们的志向、初心是什么？所以我们才会制定规则。因此这是一个循环。如果做的好就会有良性的发展，社区会聚集越来越多的人，而且有越来越完善的运作良好的规则，会创造更好的作品。这就是一个成功的开源社区会发生的事情。普通伦理我认为“己所不欲，勿施于人”是最简单的伦理。在任何社区，我们都会看到一些现象，即争论哪些事情能做，哪些事情不能做，这个时候我们就会回到这一条伦理：己所不欲，勿施于人。还有一条是君臣父子长幼有序，这是传统中国的伦理，但在开源社区或技术社区还是这样吗？未必。因为在技术社区，强调人人平等，但是又强调贡献。具体的背景我们待会展开来说。当然，仁义礼智信这些也是社会需要的伦理，在这里就不多赘述了。黑客伦理黑客伦理其实是绝大多数开源社区最信奉的基础伦理。有两本书，一本书叫《新教伦理与资本主义精神》，另外一本书叫《黑客伦理与互联网精神》，内容是关于黑客怎么做事情的。书里提到不迷信权威，促进分权，因为每个人在本质上都是平等的，我们去评价黑客的标准，应该是他们的行为，而不是他们的学位、年龄、种族、性别、职位等等虚假标准。这是黑客伦理当中非常重要的一点。人人平等与精英治理在开源社区存在一种现象：人人平等与精英治理。其背后潜在某种矛盾性。最初大家都是平等的，慢慢地，那些做了很多贡献的人拥有更高的地位、更多的话语权甚至最多的特权，他们犯了错误也不容易被追究。举个例子，有一个叫Linus的人在社区里骂人，甚至竖中指。虽然社区里会有人批评Linus，但是那些批评的人不重要。大家会觉得，他是大牛，大牛好厉害，大牛好酷。在社区里面存在这种不公平。从某种意义上来说，我们需要抑制这种现象，但这种现象必然会出现，因为我们很自然地会去崇拜那些做得最多、最好、最快、最牛的人，我们必然会崇拜他们，而且我们必然会对他们更宽容。我们必然会在很多事情上对他们的评价偏高而不会偏低。相反地，社区来了新人，当他提交代码的时候，大家就会用一种警惕的眼光看着他，对他会比较苛刻。这种现象也是需要抑制的，如果一个社区能够对新人比较友好，那么这个社区就能更好的成长。但是一些自我认知特别强的社区，很容易对新人不友好或更加苛刻。社会之礼与社区之礼我们再来说礼的部分。左边是社会的礼，右边是社区的礼，今天我们把它分成礼仪、礼节和礼物。我们的社会存在各种各样的礼仪，比如说婚丧嫁娶，我们要办仪式或办酒又或是请客吃饭，这是社会礼仪。我们一群人通过今天这样的大会认识新朋友，大家一起聊天，这是我们的社区礼仪。第二部分礼节。在社会里面，我们待人接物要有礼貌，第一次见面要以什么样的称谓、姿态称呼对方，这就是社会的礼节。在日本就更夸张，比如他们鞠躬的度数都会有规定，对不同地位的人，鞠躬的角度是不一样的，这是他们的礼节。而在我们社区里面，其实也有一些礼节，比如说，你第一次到社区去提问的时候，你要想清楚该如何去提问。而当你在社区里面跟人交流的时候，应该是一种什么样的姿态？“跪求答案”“求人救救我吧”“在线等，急！”等等这些都是非常糟糕的社区交流姿态。反过来，如果你以非常客观、平和的的方式去提问，反而会得到更多的尊重。这就是提问的艺术。至于礼物，无论是在社会，还是在社区都会强调。因为礼物这件事情，在开源社区是有传承的。有一本书叫做《大教堂与集市》里面提到社区的人为什么愿意把自己的代码贡献出来，为什么在把自己的代码贡献出来之后，会得到整个社区的普遍尊重，其实这就是一种礼物文化。不论是在传统社会还是现代社会甚至是原始社会，那些贡献礼物最多的人，拥有最高的社会地位。对应开源社区，那些写出最高水平、最优秀、最重要的开源项目、开源代码的人，他们向社会贡献了最重要的礼物，他们就会有最高的社会地位，这就是社区的礼。社区中的成文法社区中有很多成文法，比如说许可证、商标、隐私、Code of Conduct、GDPR、Code Style、信息安全、商业秘密知识产权等等。这些都是专业人士去研究的，因为我是非专业人士，所以我就跳过了。社区中的自动化规则接下来谈的是Code，有一本书我非常推荐，是一名法学家写的叫《Code 2.0》。在互联网刚刚诞生不久，他就研究在互联网当中的各种Code，他认为Code is Law,所有能够通过代码的方式自动执行的规则，未来会在社区里，在社会上，甚至在全世界占据越来越多的比例。我曾经在一个叫JavaEye的社区呆过，它是最早在社区里实行某种积分与权限挂钩模式的。比如，最初进入社区时你的等级是一颗星，慢慢地，随着你写帖子的数量就会变成两颗星、三颗星、四颗星、五颗星，然后变成一个皇冠、两皇冠，逐渐到五皇冠。你的星和皇冠代表着你的积分的权重。例如有一篇帖子我们觉得很差，点击认为它是垃圾帖，当一个垃圾帖的获得投票的积分达到了20分，那么帖子就会直接被收到垃圾箱。每个人只能点一下，但是权重越高的人投票的分值也越高。不管是Stack Overflow还是思否，都有自己的积分体系，背后的逻辑，有自己不同的设计，我们认为他们都是被代码所自动化执行的规则。当然还有GitHub的自动化规则，比如说Action、Robot，还有一个近几年出来的叫做Issue &amp;amp; PR Template。再比如说Gerrit，它也是一种Code Review的工具，它代表的是，如果一段代码有超过两个人或者三个人认为这段代码很好，那么这段代码就能够被合并到主干。在我们公司其实也在用类似的积分规则。这个积分规则产生了很多种变体，比如说我们可以规定当超过五分或者三分时，某段代码才能够被合并。每个人手中的权重最多两分，甚至是一分，那么也就意味着，团队人数越多，那么就需要更高比例的人同意这段代码。这些规则是用来更加简便地调控社区的各种行为，有助于更公平、合理地管理社区。社区中的潜规则社区里有很多人设，在一个社区，别人是如何看待你，你为自己定的是什么样的人设，这很重要。有这样一种人叫做发帖机器，他们在微信群里通常先发帖，再发一个红包，请大家帮忙转发。这种人在社区里是食物链的最底端，他们或许是被迫干这种事情的，但所有人都不会尊重他们，也不会重视他们。他们就是这样的人设。有次我在微信跟某商学院的教授聊天，发现他也在干这种事情。他把自己写的一篇文章发到群里面。过了两天，他又重发了一遍，群主就提醒他说你发重了吧。他轻描淡写地说“哎呀，不好意思。”我就跟他说，你在社区里是有人设的，你的人设决定了别人会不会看你的文章。如果你的人设是发贴机器，哪怕你的文章写得再好，别人也不会看。这个潜规则是没有人会告诉你，你的人设是发帖机器，一旦你被人打上这种标签，你在社区里就会很难生存。很多刚刚开始做社区运营的朋友们，尤其是小朋友们，特别容易把自己最初的人设定位在那儿。我特别希望做社区的小朋友们，如果可以的话，做更高端一点的人设，别人也会更接受你。还有一些人特别喜欢在社区里找存在感，例如杠精。这种人一旦识别出来，应该第一时间踢掉，因为这种人他不增加整个社区讨论的质量，不提升整个社区讨论的层次，他们只会带来流量，而这种流量是有毒的。但如果是纯粹以KPI方式运营的社区，会对这种人又爱又恨，觉得他们至少也是社区活跃的一份子，也引发了社区的争论。但是这种人会毒害社区的。当提及大妈体质的时候，我首先想到的人是周琦（Python大妈），他在社区里张罗大大小小的事，这种人其实很了不起，他是社区存在的核心或者说是社区存在的原因。当我们开始做社区运营时，不做成杠精，不做成发帖机器，而立志成为社区的大妈，那么这个社区就会比较有希望。当我们在一个社区时，我们要想清楚自己的定位，想清楚我希望别人怎样看待我。比如我自己比较喜欢的人设，是别人觉得我的讲话都比较有道理。如果能够维持这样人设，那么别人在遇到一些事情时就会来问我：你对这个事情怎么看？因此你在这个社区里就是一个分享者，别人愿意接受你的意见、你的看法，那么你就会成为某种KOL。而这是值得追求的人设。规则的宽容度在前面已经说过，因此这里不再赘述。社区内部的沟通渠道，通常“繁荣”的微信群还会有某些鲜为人知的小群。这些小群就是小圈子，用于打小报告、私下探讨。前不久我在微信群里遇到一个“杠精”，群里很多人对他的风格、他的语言颇为不爽，轮流跟他吵。后来我私底下找到群主，暗示群主能够把他踢掉，后来他果然被踢掉了，于是整个群优回到了和谐、愉快的氛围里，这就是潜规则。还有一个潜规则很重要，如果你是社区的运营者，你要对社区有直觉。你要知道社区现在是什么氛围，是好还是坏，某条规则应不应该执行，如何去执行，去调整。这些都是要靠社区运营的直觉的。结语：禅与社区运营艺术一个社区运营最重要的特质是要有社区直觉。所以，我很想推荐一本书，叫做《禅与摩托车维修艺术》。这本书的作者在书里提到了一个词，翻译成“良质”，英文叫quality，即质量的意思。他反复地说：我不能定义什么叫良质。在我看完这本书以后，我也不定义什么叫良质，我们可以采用循环定义，什么叫良质？即能够被品味所感受到的。什么叫品味？即能够体会到良质的能力。比如说我是一名美食家，我觉得某道菜很好吃，即我是一个有品味的人，这道菜就有良质。那么，如果某个人不是美食家，他不知道这道菜好吃还是不好吃，他就是没有品味的人。做任何一行，都要不断磨练你的技艺。比如你是一个美食家，能够分辨菜好吃还是难吃，但是你并没有能力自己做一盘好菜，因为你技艺不行。所以首先你得有品味，要不断的磨练自己的技艺，最后不但能够知道什么是良质，也能够创造出良质。回到社区运营的情况和语境，你要沉浸在社区里，不断地感受社区是好还是坏，不断地去体会、去理解这个社区的规则是如何运行的，它的规则应该如何发生作用，你要不断磨练自己的技艺。最后，你有可能创造出一个越来越好的社区。谢谢大家。"
  },
  
  {
    "title": "《禅与摩托车维修艺术》读后感",
    "url": "/my_blog/posts/about-zen-motorcycle/",
    "categories": "Technology, Philosophy",
    "tags": "",
    "date": "2021-05-23 08:53:00 +0800",
    





    "snippet": "前几天，因为朋友的推荐，我终于开始读《禅与摩托车维修艺术》这本听说了很多年，却一直没有开始阅读的书。一旦开始，就一发不可收拾，大概花了4天的时间，我就读完了这本书。趁现在满脑子都还是书里的内容，还是写一下我的读后感吧。哲学家的宿命哲学家可能都会有一种宿命，就是被“误读”。因此哲学家们常见的选择会有两种：一种是尽可能写得简单、直白、甚至不惜反复重申，百般比喻，只求世人能够读懂他的思想。另一种则是反其道而行之，生僻、古怪，拗口，发明新词，拒绝定义，总之希望自己的思想，不要落入他人解读的思维定势之中。比如本书中最为重要的概念：“良质”。作者就反复拒绝为之下定义，在他看来：“良质是一种思想和陈述的特质，我们不能经由思考的方式了解它，因为下定义是一种严格而规范的思考过程，所以良质无法被定义。”现在，在维基百科上有一个专门的词条：《Pirsig’s Metaphysics of Quality》，其中一段类似的描述：”Quality,” or “value,” as described by Pirsig, cannot be defined because it empirically precedes any intellectual construction of it, namely due to the fact that quality (as Pirsig explicitly defines it) exists always as a perceptual experience before it is ever thought of descriptively or academically.简单的翻译如下：“良质”或者“价值”，如Pirsig所述，无法被定义。因为它在经验上先于任何智力上的构建，“良质”在被描述性地或学术性地想到之前，总是作为一种感知经验存在。作者甚至将“良质”类比为“道”，然后引用：“道可道、非常道”，来加以解释。但是，怎么说呢？无论哲学家选择何种策略，他们不是读者，也无法阻止读者基于自己的经验，从自己的思考出发，或者尽力理解，或者漫不经心的曲解。也许对于东方的读者而言，会简单的将“良质”等同于“道”，再联想到一些禅宗的说辞，然后就觉得自己已经懂了。我对于良质的理解在逻辑学上，除了不定义，还有一种做法，也可以达到“定义了等于没有定义”的效果——循环定义。所以，我这里给出的一个版本如下：  良质：有品味的人在事物之中，能够感受到的特质。  品味：一种能够从事物之中，感受并且比较良质的能力。接下来就进入打比方的阶段了。比如，我热爱美食，能够对于某一种食物，分辨高下。如果我喜欢的食物，推荐给朋友时，大多数朋友都会觉得非常美味。那么，大家就会称赞我，是一个“有品味”的人。如果不是美食，而是文章、音乐、绘画、雕塑等艺术品，我也一样有鉴赏的能力，能够从中分辨高下，这是一方面。如果我们看到一段计算机的源代码，或者其架构设计，甚至是一个化学实验设计，一个物理学模型，一个数学公式，我们能够从中发现其“精妙之处”。这些都是品味，我们所发现的，也都是良质。  良质并非全然相同，却可以被通感所领会。我们从食物里发现的“良质”，与从数学公式里发现的“良质”，可以都称之为良质，但是却很难找到共同之处，这也是其难以被定义的原因。但是，这些良质，会带给我们同样的愉悦，这就是通感能够发生的基础。  品味是一种领域性的能力，一位美食家，未必能够欣赏音乐，一位化学家，也未必能够欣赏物理学模型。品味作为一种能力，固然有跨越领域的相通之处。但是却很难在一个人身上兼而有之。  技艺是另一种领域性的能力，一位美食家，未必是一位优秀的厨师，因为他虽有鉴赏美食的品味，却缺乏烹饪的技艺。但是，一个优秀的厨师，必须具备足够好的品味。否则他的技艺都无法精进。  品味与技艺都是可以被锻炼的能力，前者需要多感悟，而后者需要带着感悟与洞察去练习。带着感悟与洞察去练习就是禅修的实质。所以，无论我们是否坐下来参禅，我们都可以在提升自己的技艺方面，有所领悟。btw: 推荐另一本西方人写的关于禅的书《学箭悟禅录》，作者是一位德国哲学家，在日本向弓道大师学习六年，回国后他记下了通过亲身体会所感悟到的东方禅文化。成功的哲学书，不成功的哲学探索一般来说，哲学书都很枯燥。或者说，因为干货太多，导致读者的阅读与思考的压力太大，要么中途放弃，要么读一会儿，就得再歇一会儿。《禅与摩托车维修艺术》这本书，就非常善于搭配，写写风景，聊聊人生，修修摩托车，再谈谈哲学。旅行见闻，父子交流，心理探案包括一些有趣回忆，都掺杂在其中。这就使得我们这些读者，不至于太过于辛苦。或者可以说，正是由于作者这样的内容安排，使得大多数人，都能够更有阅读的动力和耐力。当然，过于结构严谨，推理严密的哲学书，虽然更加有“学术层次”，却也更容易吓退那些普通的哲学爱好者。另一方面，我也觉得：作者的哲学探索，其实并不成功。他发现了一些问题，勇敢的开始了一些思考，但是为了避开各种“思维陷阱”，感觉就是在辗转腾挪，纵横跳跃，无法给人一种踏实的“获得感”。我们可以说：这本书给了人很多启发。但是却很难说：这本书给我们很多收获。虽然，启发也可以算作一种收获。作为过去读过不少东方宗教经典的读者，我在读这本书的时候，往往非常替作者着急。眼睁睁的看着他在那里跳跃、打转、甚至挣扎，但是却没有看到他最终跳出来。他在与一些西方哲学传统，进行着艰难的战斗，但是：他没有胜利，只是苟活了下来。从这种意义上来说：这是一次不成功的哲学探索！"
  },
  
  {
    "title": "我所理解的开源软件供应链安全",
    "url": "/my_blog/posts/about-OSS-Supply-Chain/",
    "categories": "OpenSource",
    "tags": "",
    "date": "2021-05-12 08:53:00 +0800",
    





    "snippet": "供应链与断供隐喻会帮助人，也会误导人。当我们谈到“供应链”时，会产生哪些联想？环环相扣？缺一不可？掉链子？当我们这样去思考软件供应链，或者开源软件供应链时，同样的“意象”也会出现在我们的脑海里。一条从不知名的远处延伸到我们面前的链条，这个链条的最后一环，是一款我们看得见、用得上的软件。这个链条当中，有很多环节都是别人（美国）提供的。也许有一天，美国（人）一旦决定，拿回他的那一环。我们就断供了，延伸到我们面前的链条就断掉了，我们手中正在使用的软件，就消失了。这就被称为————“断供”。物质断供当一个链条是由物质构成的时候，这个“意象”并不是幻想，而是实实在在的现实。比如：芯片断供，手机缺货。GPU断供，显卡涨价。当我们想要把这个情况，引申到软件、甚至开源软件领域的时候，我们必须重新定义“断供”。这就带来了各种“乱象”。开源软件断供：分类  无法下载从中国，无法下载到美国（Github）上的开源代码。或者无法及时下载到最新的源代码  无法参与上游一个开源社区，用规则或潜规则，拒绝中国开发者，导致中国开发者被排除在外。我们的开发者被禁止向上游提交代码，无法参与、回馈社区  修改License之一：闭源在某个版本之后，该软件不再提供开源代码  修改License之二：排除特定类型用户基于某种License（不允许商业使用、不允许邪恶用途、不允许特定国家使用）  生态限制开源本身不断供，但是开源所依赖的服务，无法使用  代码托管平台断供整个Github不允许你使用  开源软件安全风险具体某一款开源软件的某一个版本，存在安全漏洞，需要修复（或替换）  项目缺少投入，无法继续发展（感谢 @Donald@CNCF@LFAPAC 的补充）一款无人维护的开源软件（维护不及时，不到位），比如曾经的OpenSSL，就是一种值得关注的风险《技术的本质》与其不足之处首先推荐一本非常了不起的著作《技术的本质》（布莱恩·阿瑟），在这本书中，布莱恩提出了一些极其深刻的洞见。例如：技术的本质是对现象的驾驭。以及：技术是组合与递归的。我想继续引申这个观点。类似于我们在做软件开发时，通常会定义的一个依赖文件。一款软件，会依赖一组其他软件（包），而这些软件（包）又会进一步的依赖某些其他的软件（包）。但是，随着包依赖描述的不断改进，我们会区分：开发期（Dev)依赖与执行期(Running)依赖。在更加广泛的技术领域，我们也会发现类似的现象。我们发明一种新技术时（开发期），会依赖一组其他已有的技术。但是，当我们基于这个新技术，生产某一个产品时，会依赖另外一组技术（编译期），当我们的产品被实际使用时，还会依赖其他一些技术（执行期）。当我们泛泛的分析技术时，可以发现其中的组合与递归结构。而当我们更加深入的分析技术的依赖关系时，会发现不同的依赖与递归结构。依赖与风险《技术的本质》告诉我们，依赖一定存在，而且无穷无尽。但是：依赖不能简单的等同于风险，至少不能等于同样大小的风险。当我们对于开源软件，做供应链风险分析的时候。泛泛的树立一个假想敌，然后一概以风险视之，不但将风险不断放大，也将防范风险手段无限提升。我认为：这并非一种理性的应对风险的策略。换一种隐喻如果我们将“链条”的隐喻，换成“生态圈”的隐喻，来看待软件、以及开源软件所面临问题。也许会更加有利于我们朝向正确的方向前进。空气、水、土壤与风，是环境的一部分。温度、湿度、海拔也是环境一部分。对于一个生态圈来说，我们虽然也提“食物链”，但是很难想象：一个单一物种的缺失，会导致整个食物链的断裂，以及食物链上端的物种全部灭绝。所以：事实上现在描述生态系统时，常用的概念是“食物网”而非“食物链”。作为软件行业的从业者，我们应该关注整个生态的健康程度，以及预防可能存在的“污染”和“破坏”。甚至，考虑到生态多样性，我们也的确应该支持更多类似的软件，甚至竞争性的平台。但是：这并非一场“为了防止我的链条断掉”，而发起的一场“伟大战斗”。这是一场“建设更加丰富、繁荣的软件生态的运动”。所以，我的提议是：不再提“开源供应链安全”，而是提“开源生态建设”。与诸君探讨。"
  },
  
  {
    "title": "作为一种实验的2050",
    "url": "/my_blog/posts/experiment-on-2050/",
    "categories": "Dairy",
    "tags": "",
    "date": "2021-04-30 16:30:00 +0800",
    





    "snippet": "毫不意外，2021年的2050@2020&amp;amp;2021，又是一次幸福之旅。只是因为另有琐事缠身，我只参加了2天的2050，在幸福中不免留下了遗憾。在第二天下午，与Elaine的交流给我很多收获，我也当场答应了，要再写一篇关于2050的文章。本来嘛，参加这样一场聚会，沉淀一些什么，也是必须要做的一部分。我的思考方式与写作方式，一直都属于“标题党”，先想到一个好的标题，然后才能想清楚，该写一些什么。另一方面，再尚未动笔之前，就将文章的标题广而告之，也是写作方法论的一部分，这样我就将自己逼上了绝路，必须尽快完成。如何创新：心理学实验2050是王坚博士发起的大会，而博士又有心理学的背景，所以很自然的，我们会猜想，博士是在做一个心理学实验，也因此会在2050大会中，看到很多有趣的心理学现象。格式塔转换今年的2050，有不少新人是第一次参加，我们可以明显的发现两种不同的心态。一种是老友回乡的喜悦与期盼，另一种是新人初到时的茫然、无措与抱怨。这样的对话，也许在很多场地都会发生：这个也找到不到，那个也不知道，现在我要找谁呢？谁会来解决问题呢？——这通常是一个四处乱转的新人不着急，放轻松，咱们一起找找，想想办法。——这通常是一个面带微笑的老人这个组织也太差了，我来这里都浪费好多时间了——这通常是一个焦虑的新人不要紧呀，咱们现在不就是在聊天吗——这通常是一个面带微笑的老人这背后的道理很简单，来2050参加大会，需要一种完全不同的心态。如果心态正确，就会享受其间。如果用传统的参加会议的心态来看待，就会产生各种不适与不爽。那么，如何帮助更多的新人，更快的完成这种心态转换呢？我们需要实验。如何创新关于创新的理论很多，研究创造力的理论很多，但是：如何把人聚到一起，搭建一个创新的舞台，让大家都能在其中尽情的创造呢？如何安排时间，如何安排地点，设计行走路线，规划确定性的相遇，同时也创造各种偶然的巧遇。有通过召集人，召唤而来的伙伴和讨论。也有各种当场介绍、插队交流，甚至还有再次重逢（重新相认）。在这样的人与人的交叠相遇中，创新的火花会在其中诞生。一年又一年，我们还在不断改进这个舞台，加入各种新鲜元素，这个实验，会一直持续下去。特别声明我专门找博士求证了一下，博士否定了我的猜想，哈哈。如何自组织：社会学实验如果我们有社会学的背景，我们自然会对于2050大会中发生的各种自组织现象，感到好奇。按照经典理论：一个不断从环境输入能量与信息的开放系统，能够不断的产生自组织与再组织的现象。在2050的自愿者指南上，有这么一句话：“2050的活动，都是因为先有了人，TA想要办一个这样的活动，然后活动就在2050上出现了。”杨赛的歌也是这么唱的：“那天TA说TA要来，于是我就来了。那天我说我要来，于是你就来了。”不仅仅人来了，还有机器人、无人机、房车、皮划艇甚至家乡美食，都会有人想着带过来。百城千味这样的活动，也就很自然的生长出来了。甚至还让博士完成了一个夙愿：我们可以把盒饭干掉了。来了以后，还是各种混乱，找不到人，找不到地方，不知道时间，不清楚规则，人们开始用“自适应”的方式进行调整。博士的理想是在2050大会上，只有一种角色：全都是自愿者，而且都是自己买票进来的自愿者。那么：这么多人在一个“混沌”的小镇里，会演化出哪些角色呢？厨师、调酒师、运动员、裁判员、向导、搬运工、创作歌手、乐队伴奏、诗人、主持人、演说家、画家、舞蹈家、交通疏导、心理疏导、甚至还有更多……角色会涌现出来，结构也会涌现出来。在十大容器（规定结构）之外，更多的结构开始生长。即使是同样叫团聚、叫约会，也有不同的玩法。这样混沌中的自组织，正是2050的魅力所在。但是：我们应该如何调整受控与失控的比例呢？我们如何创造一种人群的“受控核聚变”呢？这些都还需要每一年的实验与调整。礼物与邀请：开源实验在《大教堂与集市》这本开源圣经里，提到过一个名词，叫做“礼物文化”，这实际上是一个“人类学概念”，最初被称为“礼物经济”，被黑客文化的历史学家以及人类学家Eric S. Raymond，用于解释开源社区中的贡献与分享的动机。出于好奇，我最近都一直在看不少人类学的书籍，包括著名的法国人类学家马塞尔·莫斯所写的《礼物》一书。在书中，莫斯研究了诸多原始部落中，赠送礼物，与回赠礼物的习俗。并以此来反思“唯利是图的资本主义商品交换逻辑”，认为：礼物，以及基于礼物的社会地位和交换体系，是值得借鉴的。Eric Raymond也沿用了类似的逻辑，将源代码开源，向社区贡献代码，映射为礼物的赠送。因为“夸扣特尔族”的夸富宴，就是由酋长们比拼赠送礼物的贵重程度，来为酋长们的社会地位排序的。但是，经过仔细的思考，我发现相比原始部落的礼物赠送和回赠，开源代码有一些关键的区别。主人将礼物（开源软件）赠送给非特定的任何人，因为Bit可以无限复制，主人并无损失，而世界却因此受益。另一方面，在原始部落，收到礼物的人，实际上会感受到一种道德上的、风俗上的压力，必须以大于原礼物价值的礼物，进行回礼。但是，开源软件并不会形成回礼压力。由于源代码可以无限复制、可以持续改进，有遵循License的法律义务，事实上开源变成了一种“共同创造的邀请”，从这个含义上来说，开源软件，是一种更好的，也更加纯粹的礼物。分享礼物、邀请创造，是开源社区的开放模式。当我们来到2050时，我们会发现非常熟悉的味道，所有人都以开放的心态来到2050，开放式协作，开放式娱乐，开放式交流。无论原来他们是否听说过开源，一旦我向他们介绍开源的理念和方法论，他们都会非常认同。在我去年的小作文《作为一个形容词的2050》中，就已经将2050大会，定义为集市型盛会。对于我而言，我不仅希望在2050遇到更多热爱开源的朋友，更加希望为2050引入更多开源的元素，因为2050，就是我的开源实验。但是，这并不是简单的：将2050“开源”出去，而是应该思考如何将开源的方法论，引入2050大会。例如：如何定义大家带来的“礼物”？家乡美食，一场演讲，一场表演也许都是礼物。如何定义和帮助“邀请”得以顺利展开？如何帮助礼物的捐赠者与分享者，能够汇聚在一起，共同创造？在开源社区，有一个很明显的不断改进自身工具的传统（开源社区用到的工具，同时也应该是开源软件），那么，我们能够为2050创造和不断改进哪些工具？作为一个产品经理，我正在思考这些问题。榜样的力量：教育实验杨赛写了一篇《有人跟我说要好好写写2050的蜂巢，于是我好好回顾了一下那些2050的“不靠谱”瞬间》，其中有一段是介绍清晨6点开始的、云栖厅的2050有史以来开始时间最早的“新生论坛”。在她看来，这是非常不靠谱的事情，但是她还不知道另外一段的故事。我因为早上4点多就醒了，全无睡意，一直忍到6点多，起来去了2050的云栖厅，正好遇到雷老师和其他一堆同学坐在台上。我原本是不以为意的，结果看到杨赛也在台上，于是想想不好意思转身就走，于是点头打招呼，坐下来听听。刚刚开始听的时候，还是不以为意，因为雷老师讲的内容，对于小朋友们可能还有点意思，但是对于我来说：就太过于鸡汤了。差点想走，但是那么早的时间，其他地方也没啥可去的。于是又逛回到云栖厅，正好雷老师在说：我给大家放一段短片吧，这个是我和张老师，这次去中国海拔最高的沙漠，库木库里沙漠。海拔4700多米，我们在那边徒步的经历。2020雷殿生攀登徒步探险库木库里沙漠我坐在那里，看着大屏幕上的沙漠，一望无际，2个人走在沙漠上，没有背景音乐，就是高海拔环境下，人在喘息的声音。突然，沙漠里出现了一片湖，那样的蓝，那样的深邃。人类艰难跋涉，走在苍茫的天地之间，终于能够欣赏到那样的绝世美景！我突然就难以抑制的激动起来了，太美了！之前我其实是不理解的：一个人徒步走了十多年，受了那么多伤，吃了那么多苦，穿坏了那么多双鞋。但是，这与我有何关系？为什么，他自己下决心吃苦，却能够激励我？看了雷老师的短片，看了他介绍自己10年徒步，走遍中国的介绍。我突然就明白了：这样的人，他选择了这样的生活，就是在给我们展示一种榜样。原来人可以这样去生活，原来人类的极限那么高，原来信念的力量，可以支撑人走这么远！再联想到教育的话题，那天下午，我去宾馆退房，恋恋不舍的即将离开2050，却正好遇到了雷老师，和一群中学生，在宾馆门口交流。我走过去，看到那些孩子们崇拜的眼神，以及被激发的热情。我也忍不住走过，跟雷老师说：能跟您拍张照吗？回头再想，这些过程，也是一种教育啊，相比那些说得很好，很漂亮的道理，一个真实的人，站在你的面前，这种榜样的力量，也许是一种更好的教育。社区的目标是什么：管理学实验在第一天下午，我们同时有2场团聚，一场是开源人团聚，一场是技术社区运营人团聚，因为主题严重相关，后来大家就合在一起，讨论一个问题：我们向往的社区，甚至我们心目中完美的社区，应该是什么样的？管理学，最重要的大概就是目标管理了，确定目标，分解目标，分配任务，执行任务，最后衡量目标的达成情况。事实上我曾经有过一个吐槽：OKR是比KPI更加直达本质的工具，但是要说有多好，其实倒未必谈得上。在后来的交流中，我表达了自己的观点：有两种社区目标，一种是纯主观的，我想要运营的社区，就是一个我自己也喜欢在里面的社区。另一种是比较客观的，有各种人群分析，目标分析，还有增长目标，再配合一些“KPI”。如果从企业管理的角度，如果我向我的领导汇报：我打算运营一个自己喜欢的社区，估计老板当场就想换人。因为这样的目标实在是太模糊了。还好，开源社是一个纯粹民间的组织，没有老板。不过，企业型社区的运营人，就会比较苦恼了，怎么才能“忠益两全”的呢？（忠于自己的热爱，满足老板的利益）2050也是一场这样的实验，所有自愿者的人，心里都在想着：我喜欢什么样的2050？要搞些什么新花样，才能让2050更好玩？我要怎么让更多的人来这么好玩的2050？只不过，那些投入最多的自愿者，难免会成为大会的“保障人员”，结果就是别人玩得非常开心，自己却只能忙得停不下来。所以，还得继续改进，让更多的人，能够觉得开心，但是也要让每一个自愿者，都能够有机会玩起来。这个就是今后的管理目标了。近未来、搏斗：艺术家们的实验在2050，我最喜欢的活动，就是各种团聚与聊天。这次中国美院的刘畑老师组织了一个《开放问题青年团聚》，也是我此行最大的收获。在聊到最近看些什么书，关注什么话题的时候，我提到一本书《比特城市》，一本出版于1994年的书。令我震撼的是，书中的预言在20~30年后的今天，几乎是历历在目。于是我就在思考：我们是否能够探索30~50年后未来，我称之为“近未来”。或者说，那些我们活着，就能够看到的未来。于是，宋哲老师就提到了不久前，他们美院办了一个跨媒体艺术节，主题就是《近未来：可能生活》，在开幕式上，中国美术学院跨媒体艺术学院实验艺术系主任高世强老师，做了一个主题发言，其中有一段话，对我非常有触动：在我们这里，“近未来”不是科幻，至少不全是。“近未来”首先是一个历史概念，它向相信时间是一道绵延长河的人展开。它不但居于即将发生的现实之中，还是可以变化、可以改造的现实。因此，对我们而言“近未来”是可操作的对象，是一种实践的方法——我们不但以创作参与现实，并且可以用想象力为现实加多一些东西。通过持续不断地创作和展示，我们相信不但可以参与到塑造未来的实践，并终将能够或多或少地按照我们的意愿和想象，影响即将到来的现实，从而塑造我们的“可能生活”。所以，近未来不仅仅是我们看得到的未来，还是我们值得为之搏斗的未来!这个理念，我完全认同。作为一个完全不懂艺术的人，我突然意识到，对于艺术家们的追求，我也能有所理解了。实验者与被实验者在“开放问题青年团聚”上，我们还在聊另一个话题：对于当下的自己，是否有所自觉。或者说：是否能够以一种自我察觉的心态，观察自己，理解自己，洞察自己的所思、所想与所求？写这篇关于2050的文章，其实也是一次洞察。我们可以在2050大会上，看到很多很多的实验元素，看到各种各样的探索与尝试。如果我们能够更加有意识，更加有觉知，就会发现：我们同时是实验者与被实验者。我们来到2050，就成为这个大实验的一部分。我们基于自身的背景、思考与追求，也在2050做着自己的实验。在2050，我们协同创新，自我组织，我们带着礼物来分享，也被他人的榜样所激励，我们带着度假的心情来追求自己最喜爱的氛围，我们也带着探索的心情来思考未来，并为之搏斗。这是每一个人的实验，这是我们自己的2050！明年见！"
  },
  
  {
    "title": "关于开源，回答牧川老师的一些疑问",
    "url": "/my_blog/posts/OSS-FAQ/",
    "categories": "Thinking, IT",
    "tags": "OpenSource, Education",
    "date": "2021-04-15 18:30:00 +0800",
    





    "snippet": "因为前一篇文章《我们需要什么样的开源教育？》,我转发到了一个教育专家的群里，然后收到了牧川老师的一些提问，感觉很有认真回答的价值，所以思索一番之后，回答如下：1. 开源（开放）的边界在哪里！它们怎么理解边界？开源的边界，相当模糊，或者说：有多层次的边界。  你听说有一个开源软件不错，然后找到一个下载地址，然后安装、使用。你就成了这款开源软件的使用者（User）  不仅自己使用，也积极推荐他人使用，成为一个推动者（Promoter）  你在使用的过程中，遇到问题，想找人帮助，你有几个选择          找到相熟的朋友，寻求帮助，他给你解答，问题解决      找到某个论坛，或者加入一个相关的微信群、QQ群，在里面提问，然后得到解答      找到这款开源软件的官方论坛，或者问题列表（issue list），在那里公开提问，然后得到解答      订阅开源软件的邮件列表（mailist），然后发邮件提问，然后得到解答        除了寻求帮助，因为你获得了全部的源代码，也可以自己尝试解决          闷头解决，然后自己使用（此时与社区无关）      将自己的解决的过程，修改的代码，发到网络上，告诉其他人      直接将修改的代码，提交到开源软件的维护者那里，等待他的接纳，成为开源软件下一个版本的一部分        因为喜欢这款开源软件，而且在社区里和其他人的交流也很愉快，于是决定成为长期贡献者  不仅长期贡献代码，因为技术水平令人信赖，被邀请成为开源软件与社区的管理者之一          管理代码（Committer）      其他管理工作——社区运营（Community Operation）      除了自己默默解决问题，不再回馈到社区，以上的诸多行为，我们都会认为是开源社区的一部分（Contributor、User、Promoter）所以，台湾著名的开源人年会，从2006年至今持续举办的，他们的大会缩写就是COSCUP（Conference for Open Source Coders、Users、Promoters）其实，我个人认为，将Coders换成Contributors，会更加合适，因为不仅仅写代码是贡献，很多其他的工作也是贡献。另外根据台湾COSCUP多届召集人Richard的解释，CUP三种角色，都是Contributor，所以不用单独列出来。（我觉得他的说法，更加合理）至于边界的问题，我将其理解为：一群已经是开源人的人，他们如何看待一个新来的人，在什么情况下，会将他看成自己人？这其中，依然会有关系上的差序格局，远近亲疏。最广义的自己人，是你至少是某一个开源社区的CUP之一，近一点的，你是我们这个社区的CUP之一。再近一些的，就会谈及礼物经济。一个人在社区里，做出的贡献越多，他的地位就会越高，我们会称之为核心贡献者。2. 推动开源最主要的动力是什么？阻碍是什么？推动开源，也有不同层面的动力，个人动力、企业动力和国家动力。国家动力太过于复杂了，可以先不谈。个人动力，包括几部分。个人学习成长，解决难题的乐趣，以及因为社区贡献获得的声望。另外还有一个也许较为功利的动机，是在开源社区贡献卓著的大牛，通常也会有相当不错的职业生涯，会有大企业，高薪聘请。企业动力，也分为几部分。首先是法律合规，因为有些开源软件的授权协议，会要求针对开源代码的修改，如果对外发布/销售，同样需要开源。其次是技术成本，因为开源软件的版本一直在向前更新，如果企业内部的修改不能反馈到社区里，就会在每次升级之后，再修改一次。再其次是战略诉求，或积极参与开源，或主动对外开源，则是为了满足影响或主导某一个技术领域的诉求。至于阻碍，按照我的看法，本质上是“没有看清利弊”，无论个人或企业，在没有看清利弊的时候，都会做出错误的判断。认为没有必要，没有价值，为他人打工，喂养竞争对手等等。3.开源教育会为教育（学）带来的最大启发（或冲击）是什么？开源社区，在协作开发软件的过程中，的确形成一种独特的“教学”模式。可以简单的描述一下：在开源社区里，新人要想要成为社区的贡献者，通常要经过一种Code Review的机制，这实际上是一种围绕代码的同行评议。所以，一个人的代码，在被评议的过程中，自然会反复修改，直到符合社区的要求为止。通常社区的要求包括：  不要一次提交一个非常大、非常复杂的功能，每次只改一小部分，这样能够降低评审者的心智压力，也能确保评审足够透彻  无论是代码，还是围绕代码的说明，都应该清晰、简洁、易懂、符合逻辑  作为新人，最好是先“修复错误”，再“增加新功能”  遵守社区的代码风格与质量规范  通过所有的测试，确保正确在我看来，这样一种学习的过程，自然会使得新来者，能够边做边学，小步快跑，逐步的积累经验与成就感。一些好的开源社区，还会特别设计一些简单的入门任务，专门留给新手来做，以提升他们的成就感。因为我不了解教育学的各种相关实践，所以也不知道，在教育和课程设计的领域，是否会有类似的“安排”，以班级协作、共建的方式，完成一个大的任务，通过这种方式，来完成教与学的过程？"
  },
  
  {
    "title": "姚班普信男--一篇后人类观察田野笔记",
    "url": "/my_blog/posts/yaoban-puxin-post-human-observation-field-notes/",
    "categories": "Anthropology",
    "tags": "Internet, FieldNotes",
    "date": "2021-04-13 12:20:00 +0800",
    





    "snippet": "0. 前置说明这是一篇我从未写过的文章类型，所以，可能会写得乱七八糟的。各位看官多多见谅。  因为最近沉迷人类学，所以一直看各种人类学的书籍，也尝试用人类学的思维方式，来看待一些问题  另一方面，又因为对于“后人类”这个概念，比较着迷，所以就生造了一个新的词：后人类学0.1. 何谓后人类与后人类学？0.1.1. 后人类的定义  个人方面：          自我认知：多系统（互联网、物联网、穿戴设备）+人机共生      自我评价与外部评价：量化、数据化      角色定位：碎片化、斜杠化        社会方面：          社会关系：多角色+虚实相间的关系      社会组织：不再需要物理聚集与限定的组织+跨越边界+弱身份认同      社会组织：虚实混成、复杂形态、人+机构成的组织      基于以上的现象，我们判断：人类正在变成后人类，人类社会，正在变成后人类社会。这并不是将来会发生的事情，这是正在发生的转变。0.1.2. 后人类学  后人类：Posthuman  人类学：Anthropology  后人类学：Postanthropology简单的说，就是以人类学的方法，去研究这些正在发生转变的“后人类”，所以，田野调查、参与式观察、民族志写作，就是一种自然的选择。0.2. 如何研究后人类？0.2.1. 传统人类学的方法  找到这个部落，接触这个部落  学会个部落的语言，了解他们的文化  分析其内部关系，内外交互，历史沿革，宗教信仰，民间神话等等方面  尝试参与各项活动，并理解他们的“自我理解”  回来撰写田野笔记0.2.2. 后人类研究方法  后人类部落在哪里？          在互联网上，在BBS，在邮件列表，在Github，在社交网络，在微信群、朋友圈      同时也在线下，他们也聚会，也开大会，也面基（Meetup）        后人类部落的边界在哪里？          参见我之前的一篇文章：关于开源，回答牧川老师的一些疑问      他们并无防备，他们甚至可以不知道我们的到来        后人类部落使用什么语言？          当然，是在用我们的日常生活用语，再加上很多不断诞生的网路用语      各种大大小小层面的梗，转化成一些流行词，是分析后人类的关键入手处，比如：普信男        针对后人类的参与式观察          简称：沉迷网络（对，我们现在有了更加正当的理由）        自我观察何以可能？          尝试以一种多年外宾，回到故乡的心态，来看待那些土著      也可以尝试以一种多年土著，一朝出门，看那些西洋镜的心态      关键的入手点在于：从习焉不察之中，反思那些奇怪的、诡异的、有趣的、莫名其妙的地方      本篇田野笔记，就是一次初步的尝试1. 词语笔记1.1. 黄集伟的词语笔记曾经，作家黄集伟先生维护了一个个人网址，就叫做词语笔记，后来还出了好几本书，号称“一个专门搜集语词蝴蝶标本的纸箱子”。从1999年的《请读我唇》到2009年的第七本《年代剧内心戏》，可惜后来就没有再出了，非常遗憾。黄集伟词语笔记系列1.2. 搜狗输入法的“每日新词”装了搜狗输入法之后，每天都会跳出来一个弹窗广告，会推荐一个互联网新词。很有意思的是：如果你去搜索“每日新词”，会看到：有人在问“如何关掉这个弹窗？”。也有人在问“不当心关掉了，在哪里去找到？”虽然很多人现在并不关心新闻，但是因为安装了输入法，倒是可以对各种网络新鲜词汇，有所了解。1.3. 围绕姚班普信男的词语笔记  姚班          清华学堂计算机科学实验班，首席教授：姚期智院士。更多介绍 姚班概况        普信男          普通却自信的男人，语出杨笠在一场脱口秀大会上的表演：“男人不光美好，还特别神秘，就是你永远都猜不透他那小脑瓜里到底在想一些什么。就是他明明看起来那么普普通通，但是却可以那么自信。”        姚班普信男          张昆玮（zkw），毕业于清华大学姚班，之前在摩根大通和谷歌工作。现在家住山西太原晋中，月薪5万，前一段时间，在豆瓣上征婚，引发群嘲。被称为：姚班普信男事件。        NOI          全国青少年信息学奥林匹克竞赛（National Olympiad in Informatics），张昆玮曾经拿到过一次NOI金牌        女权/女拳          女权是女权主义的简称，但是用同音字“拳”替代“权”，则代表了一种否定性的评价。基本上是用来批评极端女权主义。另一个词是 “中华田园女权”，大意是指代某种具有中国特色的女权主义。来自于“土狗–&amp;gt;中华田园犬”这样的演化过程。        外貌协会          外贸–&amp;gt;外貌，外贸协会–&amp;gt;外貌协会，指代一群以貌取人（只看颜值）的人。        颜值          X值，是一系列的词汇，值得单独分析。本质上是一种“后人类评价观”，一个人的外貌可以被打分，有一个分值，颜值高就是漂亮、美丽、英俊的意思。        宅男/肥宅/死肥宅          宅这个词，来自日本，呆在家里不出去的意思。宅男，自然是指代不出门、不社交、在家沉迷（二次元、网络、P站）之类的男人。肥宅，就是肥胖的宅男，死肥宅则更具贬义。另有一个词“废材”，也有类似的贬义。        月入五万          仅仅是一个人的月收入的表示，这里特别需要解释，是因为“张昆玮”提及自己在山西晋中生活的月收入，并以此作为征婚条件之一。后续围绕这次征婚的讨论，也有很多讨论会围绕这个收入“算不算高”的话题。        斜杠青年          当一个人身兼多个角色时，在自我描述时，往往会以斜杠（/）分割，因此斜杠青年，意指多种角色、职业、身份的青年。        推友/豆友/吧友/知乎er          通常是一个社交平台的用户自称。推友：推特用户；豆友：豆瓣用户；吧友：贴吧用户；知乎er：知乎用户。        简中圈/XX圈/墙内/墙外          简体中文仅仅是一种汉字编码，但是简中圈，通常指代墙内的互联网社交平台上的内容与用户（包括：微信、微博、知乎、贴吧等等）。      墙内：GFW（Great Fire Wall）之内，通常是中国境内，访问海外站点会受到限制      墙外：GFW之外      墙：不仅仅来自Firewall（防火墙），还有作为高墙的隐喻        出圈/出圈指数          互联网上有大大小小的圈子，最小的是围绕个人的朋友圈，最大的可能是某个国家，甚至某种语言讨论的群体。      出圈，则是一个话题，在一个圈子内讨论，后逐步传播甚至转移主要讨论平台的现象      XX指数，也是类似于XX值的概念。同样属于“量化评价”的努力        白左          在简中圈出现的新词汇，用于指代“欧美国家的白人左派”，这个词也已经出圈，在英文世界，直接被写作“Baizuo”，而不是“White-Left”        内卷          最早出自人类学家吉尔茨的《农业内卷化——印度尼西亚的生态变化过程》。内卷化（involution）又译为过密化，原始定义为：一种社会或文化模式，在某一发展阶段达到一种确定的形式后，便停滞不前或无法转化为另一种高级模式的现象。      近年热词，甚至有人将2020年称为内卷之年，现在通常用来指代各种同行、同类、同辈之间的夸张的竞争行为。因为激烈竞争，进一步增加了对方甚至整个群体的焦虑。        把妹达人          把妹，最早来自台湾，意指“泡妞，将一个妹子变成自己的女朋友”。但是，与追求、表白的区别在于：这个词更为轻视/物化女性。      达人，最早出自《左传》，意指通达之人。现在常指在某个领域很精通的高手      将追求女性看做一种“技能”，并自我锻炼，努力学习，甚至传授他人，也是近年来的常见现象之一        小镇做题家          【来自百度百科】指“出身小城镇，埋头苦读，擅长应试，但缺乏一定视野和资源的青年学子”。2020年6月，豆瓣小组讨论时出现的这个词，引发广大青年群体共鸣。        工具人          【来自百度百科】泛指某人在不知情，或心甘情愿的情况下，对他人施以帮助，任劳任怨，随叫随到地付出，在情感上、物质上和经济上不求回报，一直被对方利用，像工具一样被使用或使唤。      2020年11月8日，被《青年文摘》评选为“2020十大网络热词”      备胎、舔狗与“工具人”类似，但多半局限于男女关系中的男方        打工人          打工/打工仔，原本来自“香港”的词汇，类似于“工薪族”，但是打工人则是大陆新词汇，同样入选《青年文摘》2020十大网络热词        反转          转向相反的方向，原本是一个普通词汇。现在往往会特指一个事件，在前期大多数人偏向A倾向。等到更多信息披露后，大家又纷纷偏向B方向。      在网络事件纷繁复杂的情况下，可能出现多次反转      渐渐的，网友开始不急于表态，而是“等待反转”，开始专心扮演“吃瓜群众”        暗箱操作/炒作/运营手段          【来自百度百科】指利用职权暗地里做某事（多指不公正、不合法的）。也说黑箱操作。      在互联网运营领域，炒作甚至都不能算是一个负面评价，属于“基操”（基本操作）      在一些网络事件出现反转之后，往往会有猜测，背后会不会有炒作，或为了达到某种运营目的（这也是吃瓜的乐趣之一）      2. 事件回放"
  },
  
  {
    "title": "我们需要什么样的开源教育？",
    "url": "/my_blog/posts/What-kind-of-open-source-education-we-need/",
    "categories": "Thinking, IT",
    "tags": "OpenSource, Education",
    "date": "2021-04-04 18:20:00 +0800",
    





    "snippet": "0. 文章缘起写这篇文章的原因，是和几个朋友的闲聊。再之前，是因为看到了几篇文章  2020-12-18 《欢迎加入！开放原子大学首批开源讲师认证计划》  2021-03-03 《开放原子大学认证中心公布核心专家名单》  2021-03-12 《开放原子大学认证讲师2021年春季培训课程发布》  2021-03-24 《开放原子大学将于3月27日开展“首批认证讲师”考试》  2021-04-06 《开放原子大学“认证讲师计划”首考顺利完成》不，我不打算为这些文章，一一给出链接。我只是在想：这一口槽，该从何吐起？最终，我觉得，仅仅吐槽这些讲师招募、快速培训与认证考试计划，是不够的。我得认真的谈一谈，我对于开源教育，到底是一个什么看法？1. 招式与心法我很喜欢用武侠小说里的“招式”与“心法”的对比，来讨论知识与经验传递中的很多问题。之前，我曾经用这个比喻，来讨论敏捷软件开发在企业内部的应用问题。招式好学、心法不易，盲学瞎练，伤人伤己。在开源领域，其实一样可以使用这一比喻。我们这些开源领域的“业内人士”，可以从国内外的开源社区实践中，发现很多招式。比如：源代码开放要有配套的License，世界范围内，开源的License有哪些。我们的代码仓库应该有一份质量较好的README文件。我们应该考虑开源社区的治理、运营以及激励机制。世界范围内，其他开源社区与开源基金会是如何运作的？企业在开源领域，有哪些好的实践等等。这些全是招式！至于开源背后的心法，还有待总结。相比其他的学科，开源领域远远不到成熟的程度，更谈不上总结出心法了。在没有深入总结的基础上，通过速成的方式，培养“讲师”，再让他们去培训其他“想要学习开源的人”。我觉得就是：以其昏昏，培养昏昏，再使人昏昏。2. 开源教育的形式要讨论开源教育，应该采用何种形式，首先应该确认：开源这门学科，究竟处于何种发展阶段？咱们可以胡乱的类比一下：数学这门学科，已经非常成熟，几千年的历史，大师辈出，群星璀璨，甚至连理论范式被颠覆这种事情，都已经经历过好几轮了。物理、化学也差不多，可能化学还稍微年轻一些。不过也有几百年的历史了。再晚一些的学科：各种现代工程学、社会学、心理学、管理学，也有了一~二百年的历史了。这些学科，可以算是处在蓬勃发展期。但是：计算机出现至今不到70年；软件工程出现至今，大概是50多年；自由软件的定义是1989年诞生的，开源的定义是1998年诞生的。假设，开源已经是一门学科，我们甚至可以说：开源这门学科的幼年期，才刚刚开始。这个时期的学科教育，我认为主要应该依赖三种形式：2.1. 案例分析首先是分析已知的开源案例，包括开源项目的案例，开源社区的案例，开源企业的案例，开源基金会的案例。这方面，《大教堂与集市》做出了极好的榜样。但是，随着时间的不断向前，案例分析需要一轮一轮的进行。分析变化与趋势，分析内涵与外延，分析区别与联系。2.2. 深入实践其次是投入具体的实践，咱们这个学科，还远远不到坐在书斋里，阅读一大堆“田野报告”，就能够分析总结出理论框架的程度。我们还需要大量的来自社区的，鲜活的经验总结。需要大量的，来自一线参与者的体验与反思。如果我们现在开展理想中的开源教育，首先就需要把学生们，都赶到社区里去，摸爬滚打，体验生活。2.3. 研讨总结在开源教育的课堂上，研讨会应该是一种必不可少的形式。因为，没有哪个老师，有资格侃侃而谈，而下面的学生，只需要记笔记就好。有太多的问题，大家都没有确切的答案，只能教学相长，互相启发，共同探索。老师与学生，组成一个教/学共同体，只有这样，才能不断取得一些成果。3. 开放性理论的范围我想要描述的开源这门学科，需要研究的不只是“开源软件（Open Source Software）”，而应该是一个更加广泛的领域。我愿意将其描述为：“开放性理论（Openness Theory）”。3.1. 开放性人格经验开放性(Openness to experience)是大五人格理论中的五种人格特征之一。它表明了一个人的开放程度。在性格测试中，一个具有高度开放性经验的人喜欢尝试新事物。他们想象力丰富，好奇心强，思想开放。经验开放度低的人宁可不尝试新事物。他们思想封闭、文字性强，喜欢按部就班。在开源社区，我们会发现大量的社区成员，具有鲜明的开放性人格特征。那么，我们应该如何找到这些人，激励他们，帮助他们，与他们一起协作？另外，我们是否有可能更多、更好的培养这种人格特质？这些都是需要研究的领域。3.2. 开放式教/学开源教育，当然需要“开放式的教与学”，但是在开源之外的领域，这种教学形式，是否可以、应该、值得被推广？一个奉行做中学的共同体（Learning by doing Community）应该如何被建立起来，并运作良好？我们需要与教育领域的专家一起合作，来探索这些方面。3.3. 开放式协作开源软件的协作模式，当然是一种“开放式”的协作模式。我们看一个社区，人们自由来去，自由表达，自由贡献。在某种集市的状态下，完成了正规化大团队，无法完成的工作。这样的一种协作模式，是否能够推而广之，应用到其他的领域？不仅仅用来开发软件，更可以用来创造更多其他的智慧成果？如果在这方面能够有所探索，那将是开源对于其他领域非常大的贡献。3.4. 开放性工程从传统软件工程到现在的大量依赖开源的软件工程，最大的区别在于：可控性下降，未知的风险在不断累积。令人感到两难的是：我们却又无法退回到所有的源代码，都在自己的公司里，完全依靠自己写出来的时代。因此：探索开放性的软件工程，成为一个迫切的需要。当然，这样的一种工程难题，不仅仅出现在软件领域。在全球协作式的供应链生态下，我们所面临的众多工程难题，都是由开放的不确定性带来的。因此：开放性工程，也许是一个值得多门工程学科，互通有无，互相帮助，共同探索的领域。3.5. 开放式组织一个开源社区，是一个典型的开放式组织。不过还有很多其他类型的“社区/Community”,以及开放式企业。如何定义一个开放式组织，如何创建与运营一个开放式组织，如何保持组织的活力与创造力，如何衡量一个开放式组织的优、劣、成、败？以及，如何将我们所在的组织，变成一个更加开放的组织？这些都是有趣却又困难的问题。3.6. 开放式度量所有以上这些，我们希望能够展开的研究，除了定性的分析，当然还需要定量的比较与研究。如何定义合理的概念模型、数学模型？如何判断与获取数据，如何测量、如何计算？我们能够得到哪些数据？又应该如何理解这些数据？如何运用这些数据？总之：这些问题都很难，很需要更多朋友，一起来研究。4. 展望以上的这些内容，还仅仅是一个草草思考的半成品。还有很多领域，我没有提到。例如：开源与公益、开源与商业、开源与法律等等。另一方面，要将这个学科创立起来，我们还需要和很多其他学科的专家一起合作，不仅仅是：计算机科学家、教育学家、法学家。还应该包括：社会学、人类学、经济学、管理学，甚至历史学、哲学和伦理学家。总之，我们这些人有一个巨大的妄念，希望能够逐步探索，将这门学科创立起来。写这篇文章，也是希望有更多的有缘人能够看到，能够和我们一起来做这样的探索！Welcome to the Open Source World!"
  },
  
  {
    "title": "开源社区应该选择什么语言？",
    "url": "/my_blog/posts/What-language-used-for-open-source-communities/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2021-03-23 10:40:00 +0800",
    





    "snippet": "前传在开源的世界里，应该讲开发者都能懂的语言！，这是李建盛的一篇博客，发在OSChina上，不过被很多人批评。我想还是需要完整的表达一下自己对于这个问题的看法，因此打算写一篇博客。下篇在我内心打腹稿的时候，当然是先想到的上篇的内容。不过，因为上篇的内容，批评性比较强，所以我打算先写下篇，再写上篇。一个开源社区里，有哪些不同的层面的语言？  项目本身的编程语言  源代码中的变量名、函数名等所用的语言  源代码中的注释所用的语言  项目文档所用的语言  围绕项目本身讨论，所用的语言（Issue、PR等）  项目之外，社区日常交流，所用的语言因为全世界的开源社区，90%都用英语，所以：我们的语言选择，都只能是英语，我认为这个结论，太过草率了。一、编程语言与源代码这个其实应该是最少争议的环节。因为几乎所有的编程语言，都是“类英语”的形式。所以，从阅读体验的角度来说：  我们将一个源代码文件，看做一篇完整的文章。在这篇文章中：中英文夹杂，甚至英文加汉语拼音混杂都是严重影响阅读体验的  包命名、文件名、函数名、变量名等等，都严重建议一律使用英文  在源代码中，我的个人意见是尽量用源代码本身来说话，而无需注释。如果一定要加注释，也强烈建议使用简短英文说明二、文档我的建议是：最开始写文档的人，用你最熟悉的语言来写。然后再量力而为，翻译成其他需要的语言。三、围绕项目的讨论这个问题，需要从两个层面来看，一个是：你参与到一个已经存在的社区。另一个是：你管理自己的社区。  参与人家的社区：入乡随俗  自己的社区：取决于社区的目标所谓入乡随俗，其实很简单：人家社区都用英文，或者都用中文，你就不要冲过去说：“能不能语言自信点？”社区的目标，就比较麻烦了。我只能说：无论基于何种目标，一个健康的社区，与是否使用英语，并无必然的相关性。或者，换言之：下定决心，一开始就用全英文交流，并不是一个繁荣发展的开源社区的，天然保障。四、项目之外的日常交流这个其实更少争论，大家在微信群、QQ群、邮件列表、Slack里，自然就会选择自己最常用的语言交流。如果是一个国际化的社区，自然就会更加多的使用英语。而如果中国人占大多数，自然就会使用中文。强行规定，并无必要。上篇秦灭六国当年秦始皇扫灭六国，然后书同文、车同轨、统一度量衡。肯定是极其伟大的功绩，如果没有当年的统一，现在的中国，搞不好就是欧洲这样的多国语言文字并存的情况。拉丁文其实，欧洲也是有过统一的文字的。拉丁文在很长一段时间里，是整个欧洲的通用语，更是学术圈子里的统一用语。只不过，随着罗马帝国的衰落，黑暗的中世纪渐渐结束，欧洲各个民族国家的兴起，越来越多的文艺复兴学者，都开始用自己本国、本民族的语言来思考和写作。如果说，应该讲大家都听得懂的语言，那么：这个大家，到底是学术圈懂拉丁文的大家，还是本民族老百姓的大家呢？世界通用的候选语言其实，在英语之前，还有法语、西班牙语、葡萄牙语等等，候选语言。毕竟我们也曾经听说过：法语是世界上最优美的语言，是最精确的语言，是最……的语言。而事实上：英语之所以成为目前事实上的国际通用语，就是因为大英帝国，当年占领了最多的殖民地而已。计算机编程语言候选项李建盛在问：“为什么英文是计算机编程语言的主流，而象形文字几乎没有任何机会进入这个领域？”其实，这个问题很奇怪，因为：除了英文，世界上并非只有中文。还有其他英法德俄西葡，都是字母类语言呀。事实上，如果不是美国打赢了二战，我们现在的计算机高级语言，很可能是德语呢？参见：Plankalkül历史的偶然其实，在人类历史上，有很多偶然事件，直接或间接的决定了什么语言成为主流。比如：在数学公式中，有很多希腊字母，那是因为希腊的数学家厉害。在生物、动植物和医学中，有很多拉丁文，那是因为欧洲在这方面的多年积累。现在的计算机技术、软件开发技术、开源社区，通用的语言当然是英语，并不是因为：英文天然、必然、注定会成为最适合的语言。这只是历史的偶然！结论：不要将偶然，解释为必然，然后将当前的现状，再预测为长远的未来。"
  },
  
  {
    "title": "围绕Code 2.0的一些随感",
    "url": "/my_blog/posts/about-code-2-0/",
    "categories": "ComplexWorld",
    "tags": "Essay",
    "date": "2021-02-17 00:00:00 +0800",
    





    "snippet": "引言今天在YouTube上，看了一个讲座《秦晖：学术自述》，其中一段话令我很受启发。现在这个全球化的时代，不懂中国，不足以讨论美国的问题；反之也一样。这与我一直以来的一个思考，有一定的相关性。前段时间看过的一本书《第五次开始》，是一本考古学的入门著作。其中提到了人类历史上的5次开始：  开始使用工具：人类诞生  开始使用文字：创造文化，创造文明  开始农耕：定居，告别狩猎、采集的生活  开始组成国家：城郭、帝国、战争…  开始全球化：世界各地的考古遗迹，大量出现其他地区、国家，甚至大洲的物品我们现在也许可以发现，第六次开始的迹象。越来越多的时候，重大事件并无“考古证据”，而是发生在虚拟空间（数字空间）。或者，我们甚至不能简单的说：一个真实世界与一个虚拟世界，而是一个真实与虚拟，交织在一起的复杂世界。综合以上观点，我的判断是：在这个虚实混合的复杂世界，不懂虚拟世界，不足以讨论现实世界，而不懂现实世界，也不足以讨论虚拟世界。或者说得再明确一些，不是懂了中国，就能讨论美国的问题，或者反过来。而是要在全球化的背景下，讨论世界上的各种问题！也不仅仅是需要更加了解虚拟世界，而是需要在复杂世界这个背景下，来讨论各种问题。对复杂世界的法学理解所谓虚实结合的复杂世界，我们可以通过类比，理解为：实数+虚数构成的复数空间，在这个空间里的点（一个人）在一个复平面上运动（人类行为）。比如在微信群里发红包，这个行为就是一个虚实结合的复杂行为，而不是简单的操作手机，或者实现中的财富转移，或者单纯的群内聊天。在复杂世界中，行为是复杂的，人是复杂的，组织、关系、事件与结果，都是复杂的。要思考这样的复杂性，我们需要从多种角度，拓展自己的思考模式。其中，《Code 2.0》代表的，就是一种法学思考模式。复杂世界的法律，不再仅仅是过去的条款，而是法律条款与Code的混合体。在过去的慢节奏社会，用礼代替法律就能管好；现代社会节奏与变化加快，法律就成为必须；在未来社会，节奏越来越快，法律的能力都会不足，所以必须靠Code。从礼到法，再从法到Code。我的理解是几个进化：  越来越客观、精确。比如：非礼勿视，是一种礼，但是如何执行，没说。在XXX情况下，不能看，这个是法律，就精确很多，但是依然需要解释与执行。到了Code，大家都能懂了。  越来越细致，繁密。比如礼，可能就几十条；法律就是成千上万条；但是Code的规定，可以更加细致入微。  越来越快捷、可执行。比如礼，总要事后“村里的老人来评理”；法律，就有了专门的执行机关；Code，直接就运行了。如果Code is law，将会如何？我们不仅仅需要思考将法律应用于虚拟世界，用法律对虚拟世界进行规制。更加需要思考法律的现代形式。或者说面对复杂世界，我们的规制手段，应该如何进化。在《Code 2.0》一书中，作者描述了四种规制类型：法律、社群规范、市场与架构。可以思考得更加深入一些：  规制的意愿，从何而来？规则如何确定？——比如，一个门，定了一个规则，谁能进，谁不能进。这个规矩，是怎么定的？  规制的执行，如何进行？——是找了一个门卫，还是搞了一个高科技的智能门禁系统？  规则的变化，如何进行？——原来进门不用量体温，现在需要量体温。是给门卫发一个体温枪，还是在门禁系统上，加装一个温度探测仪？  如何判断规则是否得到执行？——监督门卫的人在哪里？门禁系统的日志是否完整，可追溯？  违反规则的人会受到哪些处罚？——通报批评？还是直接从下个月的工资里扣钱？当我们开始思考上述这些问题时（仅仅举了一个较为简单的例子，用真正的法律来讲，效果也类似），我们会意识到，何谓法律的现代形式？一方面，在制定法律，尤其是法律的实施细则时，我们原来的法律条文的严谨程度，已经不够用了。所以，法律制定者，需要具备Code思维。另一方面，这样严密程度的Law&amp;amp;Code的形式，需要更加仔细的思考：法律施行之后的社会效应。有一个简单的思考角度：过去的严刑峻法，主要是由于执法的成功率太低，需要通过杀一儆百，来起到震慑作用。那么，随着执法成功率的上升，是否应该进一步下降法律处罚的严厉程度呢？另一个思考角度：过去的法律，主要是在惩罚犯罪行为的结果方面。那么，有了智能设备，全面联网，是否能够(需要/应该)通过Code，实现预防犯罪呢？这样做，又会衍生哪些问题呢？美国的原典与中国的原典在《Code 2.0》一书中，作者常常会回到美国的宪法，来进行思考。1787年的美国宪法，就是美国的原典。当他们的法律学者开始思考，往往会问：这个问题，在200多年前的宪法条款中，是否能够找到解释的依据。这真是自讨苦吃在中国的古代，曾经有过这样的阶段，比如当年的董仲舒，就搞过《春秋决狱》，就是遇到具体案例，就到《春秋》这本书里，去找微言大义，用来作为判案的依据。这同样的自找苦吃时代在变化，过去的经典，通常不足以解释后世的实际问题。只不过，中国现在早就走出了“原典”时代，而美国，还是一个遵循原典的年轻国家。这就很有意思了。"
  },
  
  {
    "title": "再见 2020",
    "url": "/my_blog/posts/Goodbye-2020/",
    "categories": "Dairy",
    "tags": "Essay",
    "date": "2020-12-31 00:00:00 +0800",
    





    "snippet": "一年忙到头，总算可以躺在沙发上，随便写点年终感想，千言万语汇成一句话：“再见了 2020”。虽然相比很多人，我以及我身边的大多数人的2020年，过得也不算太差。但是，这一年实在是有太多不一样了。“每一天都在见证历史”、“每一天都是活久见的一天”、“加速度正在加速”……年度汉字：疫似乎别无选择，2020年只能选这个字了。因为其他的字，都不足以概括2020。虽然，这一年还发生了很多的事情。年度学习：人类学2020年，我开始大量阅读人类学的书籍，最初应该是从项飚的《把自己作为方法》开始的，现在越看越多，也越看越有兴趣了。年度应用：Notion虽然用得不算太多，但是2021年我打算持续深入的使用下去。年度感受：累虽然每年都很忙，但是今年实在是太忙了。各种加班，再加上各种业余活动（自找的），总得来说，非常充实，自然也没啥好抱怨的。年度娱乐：脱口秀+纪录片今年真的看了好多脱口秀。今年最后一场滚蛋吧2020，其中杨幂的总结非常精到：杨笠是在攻击男人，而李雪琴在消费男人。相比之下，那些男的脱口秀演员，也就不过如此吧（除了王冕）今年还看了很多的纪录片，最近在热播的湖南卫视的《中国》还是很不错的。最后，希望2021，能比2020好点"
  },
  
  {
    "title": "读书札记",
    "url": "/my_blog/posts/Reading-Notes/",
    "categories": "Reading",
    "tags": "Thinking",
    "date": "2020-12-20 00:00:00 +0800",
    





    "snippet": "最近我一直在看各种人类学相关的书籍，也因此有了不少零零碎碎的感想。正好下决心重启blog的写作，就想着还是得记录一下。人类学和社会学的区别是什么？其实这个问题从源头上看，就很简单：人类学是研究人类的学问。而且，在这门学科发展的早期，通常是研究“那些奇怪人类”的学问。直白一些说，在欧洲地理大发现之后，欧洲人，发现了众多原来从来没有想过会存在的（原始）人类，所以他们想要去研究这些人类是怎么回事。而社会学，则是研究“咱们自己这个社会”的学问。所以相比起人类学，社会学是从自我研究出发的。当然，随着人类学逐渐走出猎奇的心态，发现那些人类也有自己的文化、社会、风俗，因此：社会学和人类学，就开始出现了交叉混杂的现象。不过，我最近看的两本书：可以较为清晰的理解其中的差别：《一个社会学家的十堂公开课》与《像人类学家一样思考》。相对而言，人类学家会针对较为简单的群体（族群）进行较为广泛的考察，而社会学家，则会更加关注复杂（现代）社会的各种方方面面。人类学家往往会秉持某种程度的相对主义的倾向，对于多种文化和社会，进行比较。从某种意义上来：他们会更加困惑一些。数字人类学与互联网社会学因为突发奇想，我开始在网络上搜索人类学与社会学，是否开始对于互联网进行研究。然后发现了两个名词：数字人类学（Digital anthropology），也有称之为Anthropology of cyberspace的。另一词是：互联网社会学（Sociology of the Internet），或者称之为Digital sociology。参考链接：  Digital anthropology / 数位人类学  Sociology of the Internet / 互联网社会学比较两门新兴学科的关注点，也能发现差异：  数字人类学          邦妮·纳迪（Bonnie Nardi）对魔兽世界的研究      汤姆·博尔斯托夫（ Tom Boellstorff）对第二人生的研究      由免费、开源软件建立的4chan、Reddit      有政治动机的匿名者、维基解密、以及占领运动      加布里埃拉·科尔曼（Gabriella Coleman）对Debian使用者以及匿名者的黑客网络的民族志研究        互联网社会学          因贫富差距而导致的数字落差      社区与社会资本（时移算符问题）      政治参与（公共领域、审议民主和公民社会）      组织与其它经济组织      文化参与和文化差异      我可以清楚的发现：我对于数字人类学研究的领域，更加感兴趣。人类发展史中的偶然性最近在看的另外一本书《第五次开始》，也非常有意思。这是一位考古学家写的“大历史”类书籍。其中有一段话非常能够反映考古学家的看法：“如果听到夸张之辞，这是历史上最好的xxx，考古学家只会付诸一笑。这不过是一个世纪之前。对于考古学家而言，这甚至连眨眼之间都算不上。我们常常以数千、数万或者数十万年的尺度讨论时间。”所以，如果有一本讨论大历史的书，最早的证据不过是2000多年前，那这本书讨论的历史，一定不够大。 :)回顾人类的进化史和发展史，我们的确可以反省一下对于时间尺度的感觉：  “石器时代”的称呼被考古学家用来表示冶金时代以前的漫长时期，这段时间约占人类历史的99%以上  “旧石器时代”，距今约250万年－约1万年前，也就是说：人类在大概200多万年的时间里，进展其实是极其缓慢的。  “新石器时代”，以磨制石器为主，大约从公元前一万年开始，结束时间从距今7000多年至2000多年不等。也就是说：有很多部落，磨制石器的传统，至少传承了好几千年。从某种意义上来说：人类在最近千年的突飞猛进，是极其罕见并不可思议的意外。相反，那些至今仍然茹毛饮血的原始部落，倒是历史发展中的正常状态。只不过，我们往往以现代人的眼光去看待那些掉队者：你们怎么回事？从低级语言到高级语言最近读到的一篇长文，也引发了我对于语言（包括人类语言与计算机语言）的思考。《亚马逊丛林：原始部落颠覆人类语言理论（上）、（下）》按照这篇报道中的说法，“皮拉罕”部落的语言非常落后。以至于缺少很多抽象概念，还有递归结构。如果有一个句子：“我看到河边的狗被蛇咬了一口”。按照皮拉罕语的说法，就会变成：“我看到了一条狗。那条狗在河滩上。一条蛇咬了那只狗。”这不就是计算机语言中的低级语言和高级语言的区别吗？一条高级语言的语句，能够翻译成多条低级语言。多么正常的现象啊。乔姆斯基语言学的总结，看来只是从现代人类语言总结出来的，偶尔遇到了一个“没有进化的化石级低级语言”，就无法解释了。还有这一段：埃弗里特也发现皮拉罕语里没有固定的词汇来表达颜色的概念，而是随机用一些描述性的词语来代替。“因此假设你拿一个红色的杯子给他们看，他们很可能会说‘看起来像血’，”埃弗里特说道。“或者他们会说，‘像vrvcum’——一种当地的浆果，当地人从中提取红色染料。”这不就是低级语言的常见问题：缺乏抽象语法结构吗？泛泛的来看：从计算机语言发展的历史去理解人类语言的发展历史，也许能够产生很多有趣的联想。人性本善与人性本恶最近我看了不少纪录片，比如这一部《中国》，就拍得非常的精美。其中的第三集讲荀况和他的两个弟子李斯和韩非。其中再一次提到了人性本善与人性本恶的概念。当然，在纪录片中，并未有深入的讨论。联想到我之前看过的一本书《人性中的善良天使》，可以算是研究最深入的，人性本善的立论之作了。我当然也是非常赞同人性本善的，不过因为最近读了各种各样的人类学相关著作，让我突然想通了一个关键：人类的本性向善，个人的本性向恶作为一篇读书札记，这里就不再展开了。"
  },
  
  {
    "title": "漫谈996",
    "url": "/my_blog/posts/about-996/",
    "categories": "Dairy",
    "tags": "Essay",
    "date": "2019-04-05 13:07:00 +0800",
    





    "snippet": "10年前的一桩小事那时候我在一家小公司创业，算是公司的技术负责人。但是因为经营不善（其实就是创始人乱花钱），公司已经快倒闭了，开始拖欠员工的工资。于是，我在公司里发了一个邮件给各位同事，向他们普及了一下劳动法的相关条款，以及如果出现纠纷，该如何寻求劳动仲裁。后来，公司的领导们发了一个通知出来，如下图所示：看起来只是我的福利薪酬未补齐，但是后面却又说给到大家，反映了大面积拖欠的事实。。。事实上，这个事情还有后续，因为公司倒闭，我还是去申请了劳动仲裁，仲裁判定我的诉求合理。但是公司创始人为了拖时间，又提起了一审、二审的上诉，最后我才拿到了合理的离职补偿金。因为我自己要去新公司上班，只能另外再花钱聘请了一位律师，帮我走完了相关的应诉流程。这个事情其实很简单：劳资纠纷，法律会帮我解决。虽然老板们都是抠门的，但是法律是会帮助劳动者的。996.icu，到底在反对啥？996.icu反对的不是加班，而是反对“制度性无偿加班”。国家规定的是每周40小时的工作时间。有些公司将工作时间制度化的延长到9点上班，9点下班，每周6天。且没有给予相应的，合理的补偿！这是违反《劳动法》，违反《劳动合同法》，违反国家相关规定的事情。那些用互联网竞争激烈说事的，那些说其他行业也在加班的，那些嘲讽程序员，说你们能力不行的，那些宣称这是“自然选择”的，那些说996是一场闹剧的。全！是！法！盲！996.icu运动，在反对的，是一个行业普遍存在的，肆无忌惮的违法行为。你们竟然有胆为之辩护？是谁在为996辩护？最近我正好在看《人性中的善良天使》这本书，非常有收获。其中主要在论述的，是人类不断减少的杀戮现象。但是也顺带的提及了其他一些趋势，比如：奴隶制已经消失，非法用工现象逐步减少，甚至40小时工作制成为主流。但是，现在却还有很多为996辩护的人，比如那篇“阴阳怪气”反复强调“我反对996”的文章，其实也还是在为996辩护。看清楚了，他们都是老板。当然，都是些小老板。大老板们自己是不会写这种文章的，毕竟闷声大发财就好。是谁想要实行996？是不是凡是老板，都想实行996呢？其实也不是。只有无能而恐慌的老板们，才会把制度性996，作为最后的武器。因为，他无法调动员工的积极性，也无法正确的判断员工工作的努力程度，又担心6点就下班的员工，回家躺着也能赚钱。只能下一条命令：你们都来加班，我看到办公室里的人是满的，我才放心！聪明的老板们，不会做这种傻事。我的前老板陈大年说了几句话：“拼命创业是一个伪命题，其实拼命对创业没什么帮助。”“创始人为什么更加认同拼命创业，因为拼命创业能够带给你肉眼可见的成就感。”还有一个分析，非常有价值，拼命创业的坏处有三条：  员工被压榨掉了学习时间  员工被压榨掉了思考时间  当公司走得越来越差时，很可能会因为一些突发事件脱离正规参考：《陈大年：论「创业要拼命」逻辑的对与错》Anti 996 License的对与错随着996.icu项目的火爆，出现了一个新的License倡议《Anti 996 License》。简单的说：就是希望开源项目，在自己的licens里，添加反对996的条款。不允许实行996制度的公司，使用这一开源软件。作为一个算是开源圈内人士，我更加认同vue的作者尤雨溪的观点：解释一下“discriminatory clause”，这个说法来自于“OSD（开源软件定义 ）”：The Open Source Definition，其中的第五、第六条。5. No Discrimination Against Persons or Groups许可证不能歧视任何个人或团体6. No Discrimination Against Fields of Endeavor许可证不能限制任何人将程序用在某个特定的领域。例如，不能要求人们不可以把程序用在商业领域或者基因研究。为何开源软件，不应该有限制（歧视）性条款？这是一个复杂的问题，这篇文章肯定说不清。只能引申多说一句，之前中美贸易战的时候，有些朋友会担心：美国会不会禁止中国使用XXXX开源软件？我当时表示不以为然，因为开源社区不会接受这样的违背其基本信条的License变更。但是现在想来，还是有很多国内的程序员，不太理解开源的本质。一方面担心美国乱来，一方面自己也打算乱来。呵呵……如何反对996？不是首先考虑跳槽，而是先把自己之前的损失，要回来！去寻求法律援助，去收集证据，去起诉。去做一些知法、守法、依法维护自身权利的事情。参考资料：996.LAW"
  },
  
  {
    "title": "2017年度汉字——转",
    "url": "/my_blog/posts/annual-summary/",
    "categories": "Dairy",
    "tags": "Essay",
    "date": "2017-12-31 21:02:00 +0800",
    





    "snippet": "好多年没有在年末写一篇《年度汉字》了，今年的年度汉字，我第一反应，就是“转”。一、对于数字货币的看法2017年1月1日，BTC价值974.57美元，到了9月16~17日我在杭州参加Ruby Conf China，BTC的价值是3546.52美元。到了11月19日，中国开源年会现场，徐继哲极力推荐大家关注数字货币，关注BitCoin与区块链、以太坊，这时的BTC，价值7834.44美元。10天以后，BTC突破一万美元，一个月以后，BTC几乎达到二万美元。现在是12月31日晚上8点，BTC现价：13,238.30 美元！事实上，早在2012年，我们很多还在创新院的朋友，就已经开始关注BitCoin，却一直只是探讨其技术，分析其理论，从未投入囤币、挖矿之类的“事业”。从一开始觉得它不靠谱，到后来觉得它越来越虚高——更加不靠谱，直到现在。现在，我的看法发生了重大转变：区块链不仅仅是一种技术，更是一种财富与资源重新配置的趋势，作为一个技术人，我们更应该对这样的大趋势，保持敏感，投入时间去学习。因此，在2018年，我会花更多的精力，去研究、学习相关领域的知识。（还没有想好是否投钱购币，虽然有朋友这么劝我）二、从架构师到产品经理我一直在Coding的第一线，哪怕做了架构师，也以写代码为荣。不过，在iSource项目上工作了4年之后，我换到了华为的另外一个部门：DevCloud，而且不再做架构师，却开始做产品经理。回想很多年前，还在盛大创新院的时候，李骏就说我适合做一个产品经理。在5年以后，终于我还是走上了“这条道路”。当然，过去我在做架构师的时候，就非常关心产品。等到现在开始做产品经理了，又每每感到：很多问题，必须考虑到深层的架构问题。虽已转行，尚未忘本，哈哈！三、举办第三届《中国开源年会》这次年会，现在回看的时候，还是非常成功的。但是在筹备的过程种，真是步步荆棘，常常忧心。好在一切都有惊无险，而且结局非常圆满。在之后结识了很多的新老朋友，大家对于开源社的热情也进一步高涨。随后，经过一系列沟通、协调、运作。最终在今年年底，完成了开源社的章程修改 、理事会换届选举、工作组重新设立与定位。可以说：2017年，是开源社转型、起跑之年！作为新当选的开源社2018年度理事、既执行委员会执行长，我将会在2018年，为开源的工作做出更多的贡献。比如说：必须在2018年，写完《借助开源项目，学习软件开发》。四、聊聊这一年读书、学习的情况今天早上我统计了一下，今年我一共买了19本实体书，却只看完了5本。另外在微信读书的书架上还有98本书，读完了31本。总体而言，买书贪心，看书太慢。还有些书，来不及拆封，后来整理书架的时候，才想起来——啊，当初还买了这本啊！总而言之，2018年，我会转变学习习惯，尽量忍住，少买书，多看书。先把买来的书看完。今年我还试用了不少英语学习的APP和课程，最有收获的，还是薄荷阅读，连续100天，读完4本英文书，很有成就感！这是我在GitChat的学习数据，另外还开了4场Chat（2018年应该可以多开几个），还在千聊上开了一次直播，有点意思（也有点累）。总之，2018年，Keep Learning！最后，祝所有的朋友，2018新年快乐!ps. 今年最后一天，听到了一些消息，了解了一些事情，转变了我对一些事与一些人的看法（近乎反转），不方便说，却需要记住。网络上公开撕来撕去的事情，远没有表面上那么简单。"
  },
  
  {
    "title": "我是一个程序员，我想和简书聊聊",
    "url": "/my_blog/posts/talk-to-jianshu/",
    "categories": "Dairy",
    "tags": "Essay",
    "date": "2017-12-16 09:50:00 +0800",
    





    "snippet": "一、地图炮，一点都不新鲜似乎有人觉得，饱醉豚的文章，颇有新意，是某种独立思考。似乎还有人觉得，饱醉豚的文章，代表某种多元化，自成一家。但是，那只是地图炮而已，地图炮一点都不新鲜。如果我们真的去做一个10万人的出轨调查，然后再做一些“统计游戏”，就可以发几十篇文章，比如说：《男性出轨率比女性高XX%》，《收入在xx-xx之间的人最容易出轨》，《这几个城市的男人最容易出轨》，《学历XX的人，最容易出轨》，懒得再编了。哪怕基于真实的调查数据，都可以随便开地图炮，来吸引眼球。更何况肆意猜测，逻辑混乱，放出来的地图炮。二、Troll的套路Troll是一种网络俚语，常见于任意英文网络论坛和其余英文文化圈中。Troll的原始含义是山怪以及一种名为撒网的钓鱼技术，最初作为网络用语是描述在公共论坛等讨论区故意用激烈的言辞引起别人进行没有意义的争论的行为，后来释义延伸为几乎所有做出令人厌恶举止的行为，不论主动还是被动的。这个词语若要翻译成中文，会根据具体情况而指代中文网络文化圈的“钓鱼”、“引战”、“洗版”、“刷屏”、“菜鸟”、“小白”。以上文字摘录自百度百科饱醉豚的那些文章，其实非常符合Troll的套路，他自然也乐在其中。先骂一个群体，然后再把反驳言论中，最为激烈的一些摘录出来，继续骂回去。美其名曰：证明！这样的套路，如果是对网络社区比较熟悉的朋友，最简单的办法就是不理睬。不过很多Troll经验丰富，他一定能找到人骂他，然后感觉很爽。如果引起他网站的处理，他还会以受害者的姿态出来，呼唤所谓的言论自由。这样的套路，真是见得太多了。三、简书，你要识别有毒的流量Troll的确能够带来流量，甚至为社区带来巨大的关注度。坏处在于，这样会破坏整个社区的形象，甚至破坏整个社区的和谐氛围。在做社区的时候，最怕的就是只看数据，看到流量增长就欢欣鼓舞，而且对带来流量的人奉若上宾。却不知道：有些流量是有毒的！整个社区的氛围坏掉了，甚至是无可挽回的！参考：《歪理邪说：别喂巨魔》四、简书，好样的！本来这篇文章作为草稿的时候，只有三节。昨天看到了简书最新的处理结果，我又加了一段。有些文章，就是应该删除！有些人，的确需要禁言。完全的自由，不过是纵容而已。另外给一个建议：对于较多人投诉的文章，可以先关闭评论区，然后及时处理。虽然不必每次都搞到这么大的风波，但是能防微杜渐，也会渐渐的改善社区的风气。简书，加油！"
  },
  
  {
    "title": "一念轮回，以及稀缺心理",
    "url": "/my_blog/posts/scarcity-psychology/",
    "categories": "Dairy",
    "tags": "psychology",
    "date": "2017-05-13 18:26:00 +0800",
    





    "snippet": "一念轮回最近在起点追看徐公子胜治的一本小说《太上章》，看到了一个令人深思的小故事。一个小男孩名叫小九，据说是仓颉的化身。他是一个小国家的公子，被当做人质，抵押在邻国居住。这个小九“生俱宿慧”，对人世间的诸多人情世故，都有深切的了解。他有一个丫鬟名叫小夏，家里有位舅舅，是一个无赖。动不动就跑到小夏的娘家，勒索钱财。小夏为了息事宁人，也为了彰显自己孝心，就打算用自己的多年积蓄，满足她那个舅舅的贪欲。原本还只打算给舅舅“十个铜鼻”（大概能买一头牛）。但是小九却极力阻止，他认为：这样给钱，非但无用，还会助长她舅舅的贪念。她剩下的那点积蓄，也全都会保不住。但是，小夏完全不听劝告，还是把钱给了舅舅。这个小九正好遇到太上传法，就把这个事情跟太上说了。太上当着他的面，施展了仙家推演神通，果然事情会演变得越来越糟！太上对小九说：你看那小夏一边走一边抹泪，可知她心中是不情愿的；她舅舅如此恶索财货，当然也是不应该给他的。正如你昨日所言，既不情愿又不应该的事情，为何还是不断有人去做呢？从她的身上，能看到了什么？看到的就是轮回，未得超脱的轮回中诸事！接着，太上又问小九：“你昨日对她说的那番话同样也没用，因为她还是去了。对此，你又是怎么看的呢？”无用之事，你还是会做。所以，你也还是在轮回之中！这个故事，给我以醍醐灌顶之感，因为“所谓轮回”是否存在，是否转世投胎，变成其他动物，其实并不重要。要点在：一念糊涂、一念贪心、一念执着、一念愤怒、一念无明，我们就已经在轮回之中了！所谓轮回之苦，也不是要到下一辈子，才会吃到。我们现在就已经在吃了！#稀缺心理这是我最近读完的另一本书，非常有意思。也是听了吴穹博士的推荐，然后在微信读书上看完的。这本书研究一种普遍存在的现象：稀缺。无论是金钱上的缺乏，还是时间上的缺乏，甚至食物上的缺乏，都会产生类似的心理现象：稀缺心理！在稀缺状态下，人们会变得更加专注：饥饿的人，脑子里想的都是食物。没钱的人，会更加精打细算。快到截止时间的人，工作通常会更有效率。但是，在另一方面，稀缺也会带来负面作用。有一个实验案例，给我带来巨大的震撼：一群农民，在丰收前与丰收后，各测一次智商：前后相差高达17%。也就是说，一个原本智商100的普通人，在稀缺心理的影响下，会变得近乎弱智。在饥饿的时候，我们会做出错误的决策。在缺钱的时候，我们做出错误的决策。在紧急的情况，我们还是会做出错误的决策。甚至更进一步的推论：我们过去采用的“重要性，紧急性”的二维四象限分析法，很可能是一个无效的手段。因为在紧急状态下，我们会本能的将紧急的任务，识别为重要的任务。我们根本无法放下“紧急而不重要”的任务，去做“重要却不紧急”的任务。事实上，在很多时候，重要而不紧急的任务，永远都不会被完成。直到我们蒙受损失，追悔莫及。学点心理学，跳出轮回总结一下自己的感想：我们需要更加深入的了解自己，了解自己的个性、偏好以及弱点，更加深刻的理解我们为何会做出这样或者那样的蠢事？以及明明知道是正确的事情，我们为何就是一直拖着没有去做？通过学习心理学，学会自我反省，对我们不断的改造与提升自己，应该会有很大的帮助。这，大概就是（非宗教意义上的）跳出轮回吧。"
  },
  
  {
    "title": "聊聊“知识经济”",
    "url": "/my_blog/posts/knowledge-economy/",
    "categories": "Dairy",
    "tags": "Community, Economy",
    "date": "2017-04-30 19:12:00 +0800",
    





    "snippet": "最近看了不少关于知识经济的相关讨论，有一些感想，忍不住想找人聊聊。一、零售肯定比批发更贵任何一种商品，批发的价格，肯定会比零售的价格，便宜得多。如果我们将知识看成一种商品，也应该符合这样的规律。所以，在学校里接受系统性教育的费用，肯定是最便宜的。买一本书，系统性的学习，也相当便宜。如果是零零碎碎的看些文章，或者花钱看一场Live，肯定是最贵的。二、个性化定制的肯定比通用的更贵一个商品如果能够卖给成千上万的人，他的单价肯定会比较低。相对于只为一个人度身定制西装，普通的西装再贵也贵不到哪里去。在知识经济的领域，一篇面向大众的文章，相对会便宜（因为预期会有更多的读者）。一个针对性的问答，当然会更贵，因为面对的是特定的问题（但是，也可能是其他人关心的问题，所以存在二次销售的可能）。最贵的定制，当然是一对一上门咨询。如果这样的咨询过程，明确不能对外泄露的话，肯定会更贵。三、如何降低学习成本假设一个人在一身中，需要学习的总知识量是100分。其中如果50%来自于学生时代的学习，还有30%是来自于自购书籍的自学，再有10%是各种交流与思考过程中，自己获得的领悟。最后可能还是存在10%，是来自于知识经济时代的，碎片化的付费学习。总成本的计算，也就可以大致估算出来了。那么，降低成本的思路，也就显而易见了：  在系统学习的阶段，不要浪费光阴（在学校好好读书！）  增强自身的，系统性自学的能力（一本书从头到尾能够认真看完，看懂）  学会举一反三，融会贯通（花一份的钱，争取赚3份的知识回来）  有很多免费的知识，要通过学习变成自己的，主要靠坚持（比如每天背单词）  最后：不要把钱，浪费在无效的“学习”上（你懂的）四、所谓“碎片化学习”与“智商税”我曾经在跟朋友聊天时说过一句话：“为啥你一直在碎片化学习，因为你的脑子，一直就是散的。”或者换句话说：“较之系统化学习的能力，从碎片之中学到自己的那一套，是一种更加困难的能力。”而忽悠那些在学校里就没好好学过的人，投身于“碎片化学习”，那的确是在骗钱。但是，我又不太赞同“智商税”的说法。那些积极投身于碎片化学习的人，并非因为“智商不足”，而是因为已经错过了最佳的学习时间，企图奋力追赶。至于学习效果很差，也并不是因为遇到了骗子，或者因为智商低下。在同样的教学过程，同等的学习时间，他们的学习收获最少，只是因为他们系统的学习能力，最差！他们并不是“上当了”，而是“虚不受补”。当然，更进一步说，我也不赞同那些人“到此为止”。相反的，他们更需要努力的，不断的，持续的，系统的学习，不但学习特定的知识，更不断提升自己的学习能力。五、从知识的消费者变成知识的生产者相对于其他的商品，知识型的商品有一个不同的特点。最初，它一定是以零售的，个性化的方式出现的。最初是一个思路，一个奇思妙想，一点针对特定问题的思考。渐渐的，这样的知识变得更加具有普适性，更加具有通用性。再进一步，更多的相关的知识，被汇集、整理、逻辑化、系统化地呈现出来。如果做一个类比的话，传统商业，有人采购批发的商品，然后再零售出去。而在知识经济的领域，很多人收购零售的知识，然后收集、整理的工作，再批发出去。这样的模式，其实一直非常成熟。学者-&amp;gt;论文-&amp;gt;教授-&amp;gt;教材-&amp;gt;教师-&amp;gt;学生。所谓“成为生产者”，其实正是基于高质量学习的能力。系统性的学习能力，很重要。更加重要的是，在日常的碎片化学习的过程中，逐步将自己的收获，系统化的能力。这些能力，不仅能够降低我们的学习成本，更能够帮助我们有所创造，有所发现。包括收集、整理的工作，也是知识生产的一种类型。如果还能够有所输出，那就更加能够“赚回来”了。六、结语  知识经济作为一个系统，古已有之  学习能力越高，学习成本越低  成为一个知识的生产者，不但能够学得更好，还能有更多的收益"
  },
  
  {
    "title": "为啥我现在沉迷于GitChat",
    "url": "/my_blog/posts/about-gitchat/",
    "categories": "Dairy",
    "tags": "Community",
    "date": "2017-02-25 15:26:00 +0800",
    





    "snippet": "我很喜欢与朋友聊天，一群相熟的朋友，天南海北的聊，我往往会逐渐成为饭桌上最活跃的那一个。因为聊着聊着，我又有了一个新的联想，想出某种新的观点，甚或是某种奇怪的笑点。好几年前，我在知乎泡了很久，近乎沉迷。因为，那些五花八门的问题，常常能够激发我的思考。在尝试回答、组织答案的过程中，我自己也会有很多的收获。当然，在后来我渐渐的发现，知乎变了，知乎上的人也变了，知乎上的问题与回答，都变了！用心的专业回答，应者寥寥。讨巧的套路、夸张的编造，却会赢来成千上万的点赞。知乎的运营方，得意于日益增长的访问量，早已忘记了分享与交流知识的初衷。接下来的一段时间，我在简书写了不少内容。但是说实话，气质上不太搭。毕竟在简书上的大量内容，是比较偏人文、感性的。我写的文章，多半没有什么人来和我交流。最热门的一篇，应该是关于快播的评论，因为蹭了一个热点，大家在文章下面聊得很热烈（却和我的文章，没啥关系）我最希望出现的是这样一种交流：我的阅读与思考，使得我在最近有了一些想要表达的观点 –&amp;gt; 有一群对这个方面很感兴趣的朋友，愿意阅读、理解我的观点 –&amp;gt; 围绕这些观点，大家会有既专注、又发散的交流  –&amp;gt; 在交流之后，每个人都心满意足，甚至我的收获，可能是最多的。无论是过去的博客、BBS，还是微博、微信、知乎、简书，都无法满足我的这种期望。直到GitChat出现了！GitChat的使用体验，是某种焦灼与畅快并存的感觉。当我想要在GitChat上新开一个话题时：如何起一个能吸引人标题？如何写一段简介？如何定价（1块？10块？还是50块）？会有多少人感兴趣？要是没人来，没人订阅，会不会黯然收场？这些纠结的心态，总是给我带来某种焦灼感。等到鼓起勇气，或者一时冲动，把话题发出去以后。每一个人的订阅，就是对我的一个鼓励。虽然还是会担心，人数是不是会不够。但是，渐渐的，订阅的人越来越多，在突破50%的时候。顿时有一种畅快的感觉：我可以开始写了！当然，随之而来的，是新的焦灼感！这文章怎么写？写多少字？开话题的时候，我的心里多半只有一个提纲。现在要把内容都填上，得再准备各种资料。甚至会有些懊悔，怎么开了这么大一个话题，这要是收不住怎么办？填不满怎么办？两周内写不完怎么办？人家要是觉得不值那个价，要退钱，怎么办？在写《我的架构感悟：从美国宪法学习架构设计原则》时，我就在微信群跟谢工他们说：文章还没写完，亚历山大！题目要改改，我的想法变了，提纲也变了。总之，这种一定要生产出足够好的成品的压力，给人带来巨大的焦灼感。文章写完，如释重负！眼看着阅读的人越来越多，预定的交流时间又快到了。一方面非常期待这样的交流，另一方面也会有些焦灼：会有些什么问题？太专业怎么办？太偏怎么办？万一来了个内行，说我哪里搞错了，怎么办？还是焦灼！正式开始交流，问题蜂拥而来，我反而一点都不焦灼了。更多时候，有趣的问题，会引发我更多的思考与联想，在群里的讨论过程，就是我最喜欢的那种脑力激荡的过程。一场聊天2个多小时，简直畅快淋漓！分享交流结束，几乎大家都是意犹未尽。我也在心里对自己说：下一次，再写个啥呢？（各位看官，这就是我沉迷的过程了……）2021-02-13：已经很久不玩GitChat了，也打算陆续将那边写的文章，都搬过来。有点遗憾，但是也回不去了。"
  },
  
  {
    "title": "2016--聊聊读书",
    "url": "/my_blog/posts/about-reading/",
    "categories": "Reading",
    "tags": "Essay",
    "date": "2016-12-31 21:49:00 +0800",
    





    "snippet": "整个2016年，可以写的年终总结，实在是太多，想来想去，还是只写写读书，这一个方面吧。因为多年以来的习惯，看完一本书之后，都会去豆瓣打个分，所以回顾一下，在2016年，我一共看了33本书。其实，还有不少起点上的网络小说，没有记录，这个回头再说。东野圭吾今年看了好多东野圭吾的书（9本），其中最喜欢的还是《解忧杂货店》。在看这本书的时候，其实我还同时在看一部日剧《新选组》。虽然是两个完全不相干的主题，但是却让我对于日本人的性格有了一些了解：其实，所有人都迷茫，所有人都会不知所措，所有人的无法判断对错。但是，一定要用尽全力去回答人生中的那些难题！对于日本人来说，一个人是不是竭尽全力，非常重要。至于他在做正义的事，还是在做邪恶的事，其实并不重要。这样的民族，真的非常可怕。另外《假面饭店》我也非常推荐。谈谈情、破破案，一本轻松愉快的小说。当然，从中也可以看出很多日本人竭尽全力服务顾客的精神。令我深受感动的书《这一生，至少当一次傻瓜》这本书在我看到书名的那一刻，就已经决定要买来看了。买来读了之后，果然没有后悔。这又是一个日本人的故事，又是一个竭尽全力，像傻瓜一样追求某种目标的故事。虽然，因为老大爷最终获得了惊人的成就，才会有这么一本书出版。但是，每一个百折不回、上下求索的人，都是令人敬佩的，每一个不计成败、奋力向前的人，都是了不起的！《生存与命运》，在豆瓣上我给这本书的评语是：如果不是俄国的人名太难记，我简直想给6颗星！这是一本讲述苏联在卫国战争时期，整个苏联社会全景图的一本书。在苦难之中的各种人性，在战争年代的各种悲喜剧，被展现得淋漓尽致。就像夸奖每一本伟大的小说一样，我只能说：里面的每一个人物，都是活的。《1453 : 君士坦丁堡之战》，看完这本书，我的脑海里反复出现的四个字的成语是：“可歌可泣”，一场双方都拼尽全力的战役，残酷、恐怖甚至令人难以置信。交战的双方，都因为坚定的信仰，爆发出惊人的潜力，无论是胜利者还是失败者，在我看来：都是可歌可泣的。若干西方历史历史一直是我非常感兴趣的领域，以前对于中国的历史看得比较多，但是对于西方历史却一直没有体会到什么亲切感。买了一些书，却往往读不下去。今年因为朋友的推荐，终于读到了好多本西方历史相关的书，值得推荐的也有很多。《地中海史诗三部曲》，包括上面提到的1453，以及《财富之城 : 威尼斯海洋霸权》、《海洋帝国 : 地中海大决战》，都是陆大鹏翻译的，非常值得推荐。尤其是对于西方历史毫无了解的人，选择这样的三部曲入门，将是莫大的享受。《巨人的陨落 : 世纪三部曲》，在这本书的推荐词中，有一句：“平均三天看完”。事实上，有很多读者甚至不到三天，就看完了这本书。虽然本质上这是一部小说，但是却让我对于一战时期的历史，有了深切的、感性的了解。2017年，这套三部曲的后面两部据说会上市，非常期待！《光荣与梦想 : 1932-1972年美国叙事史》这本书没有上面两部那么沉重，很多时候是非常轻松愉快的。这40年的美国历史，变得非常鲜活。但是令我非常遗憾的是，作者William Manchester在2004年已经去世了，很难再有人，能够像他一样，接着向我们讲述1972年以后的美国历史了。被过誉的两本书《人类简史 : 从动物到上帝》，这本书很好，但是我没法给他5颗星，因为作者其实在借助自己的强大的脑洞能力，强行构造了一部人类简史。大概是因为横跨几十个学科的强大气势，使得任何一个领域的专家都无力反驳这本书中的很多猜想。我只能说，如果对于这种叙事很感兴趣的话，推荐再读一本《枪炮、病菌与钢铁》，我感觉会更加靠谱一些。《丝绸之路 : 一部全新的世界史》，如果人类简史还算是过誉的话，丝绸之路这本书，简直让我怀疑有人在豆瓣刷分了！这几乎不能算是一本世界史，而是一本强行以世界史为名的中东地区历史。甚至，叫他丝绸之路，都不合格。因为在丝绸之路的起点中国，作者的着墨都寥寥无几。深受启发的三本书《奇点临近 : 当计算机智能超越人类》，也许有人认为，这本书同样被过誉了，我不否认！但是，我还是给这本书打了5星，原因很简单：我被这本书激励了！我不仅仅是盼望书中的未来尽快到来，我甚至还希望能够尽可能的加快这样的未来，早日到来。所以，我还在coursera上，学完了一门《machine learning》的课程。这个领域，大有搞头！《数据化决策 : 大数据时代,《财富》500强都在使用的量化决策法》，简而言之，这本书使我坚信：一切皆可量化。过去我对于这个观点，有过模糊的判断，却缺乏坚定的信念。现在，我相信自己一直以来，都是对的 :)《精益企业 : 高效能组织如何规模化创新》，这本书其实应该和上一本书结合起来看。所谓精益如果不能结合量化的数据决策，是根本无法想象的。最后：祝所有的朋友们，2017年能够读到更多的好书！"
  },
  
  {
    "title": "阅读的自由",
    "url": "/my_blog/posts/freedom-to-read/",
    "categories": "Reading",
    "tags": "Essay",
    "date": "2016-10-05 12:42:00 +0800",
    





    "snippet": "以前写过两篇文章《写字的自由——外篇》、《写字的自由——内篇》，这次国庆，因为两个诱因，我想再聊聊阅读的自由。一个原因，是国庆我们去逛了苏州这边的“诚品书店”，去之前其实还是很期待的。但是逛了一大圈下来，却一本书都没有买。从书店出来，我和老婆聊天，我在那里感慨：“现在的出版商，大概也是在做最后的挣扎了，大家去逛书店，走来走去。他们必须要把一本书做得非常非常的吸引人，才能让读者，在2~3分钟的时间里，下决心拿一本带走。结果就是书做得越来越漂亮，但是仔细翻翻，却没啥可读的，更不值得买。”另一个原因，是正好读到了caoz的公众号里的一篇文章《推荐算法、机器学习，会将我们带向何方？》其实是在谈一个现在已经很明显的趋势，公众号、自媒体、新闻报道，都在拼命的以吸引眼球为目标。比如“今日头条”这样的App，会让你在不自觉的点击它的新闻之后，总有一种上当受骗的感觉。虽然，caoz的文章颇有些“为算法辩护”的意思， 不过我今天想要探讨的是另一个角度：在这个人人都在争夺眼球，拼命吸引注意力的时代，我们应该如何保卫自己的阅读自由？警惕今日头条那样的App，就赶紧卸载了吧。不要让他一直骗取你的信任，偷走你的时间。朋友圈里的那些文章，凡是带着“必看”、“深度好文”、“你必须知道”、“央视刚刚已经曝光”之类的标题的文章，忍一忍，不要去点。不当心点开了，也赶紧关掉吧。有一些刻意引发争论的文章，尽快丢到脑后，不要去争论，不要加入混战，不要凑那种热闹。所谓警惕，就是对于可能偷走自己时间的内容，保持警觉，尽早丢开。计划如果你没有自己的阅读计划，自然容易被各种推荐算法、推荐评论、诱人腰封，给牵着鼻子走。反之，如果你自己计划要读的书，都还在排队等着你去读，那你哪里有时间，去读哪些莫名其妙的东西？Keep的有一个广告词我很喜欢——“自律给我自由！”所谓计划，就是知道自己要什么。阅读小圈子一直是自己闷头阅读，也是很吃力的。如果一个志趣相投的小圈子，不是互相推荐一些值得阅读的内容，还是很有益处的。当然，前提是，这群人的品位都不至于太差，否则这个圈子，就只能荒了。所谓小圈子，就是：益者三友，友直，友谅，友多闻也。以上，就是一些捍卫自己的阅读自由的方法了，供大家参考。"
  },
  
  {
    "title": "读书的意义在哪里？",
    "url": "/my_blog/posts/about-reading-books/",
    "categories": "Reading",
    "tags": "Essay",
    "date": "2016-07-09 11:23:00 +0800",
    





    "snippet": "知乎上的问题：“读了很多书，但是都忘掉了，那么读书的意义又在哪里？”还是老套路，首先解题：这个问题可以转换为：通过读书，我们能够收获哪些，记忆以外的东西？      情感，有些小说，我已经不记得书中的情节，不记得主人公的名字，但是当初的感动，直到现在我还记得。这不是普通的记忆，而是某种情感的经历。虽然没有经历过别人的人生，但是我们体会过别人的情感。        能力，这个可以再细分为很多种。比如，体会他人情感的能力；豁达大度，放松心情的能力；在纷繁复杂的事物中，看透本质的能力；在独自一人时，找到乐趣的能力；这些能力，需要通过阅读不同的书，然后反复体会，才能获得。        心境，某些书，我们读到某些段落，甚至某些句子。突然有豁然开朗的感觉。仿佛又对这个世界，对自己的人生，多了一层的理解。有了这样的理解，我们的心境便会有所不同。虽然事后，我们甚至会想不起，当初读到的，是哪一段话。        气质，一开始读书，你会迷茫。接着读，会小有所得。接着读，会得意洋洋。接着读，会回到迷茫、甚至惶恐。接着读，又会小有所得。渐渐的，你的气质就会有所不同，既不会盲目自大，又不会盲目自卑。书读得少的人，往往就没有这种怡然自得的气质。        地图，好读书不求甚解。但是，却要在读书的过程中，建立大局观，建立地图意识。具体的知识点可以不必记忆，但是各种知识范畴，与范畴之间的相互关系，则要越来越清楚才好。        品味，或者说鉴赏力。不仅仅是对于好书、烂书的鉴赏力，甚至通过读书，也能够对其他的事物，有较为靠谱的鉴赏力。  "
  },
  
  {
    "title": "如果你非要上百度，这里有三条忠告",
    "url": "/my_blog/posts/about-baidu/",
    "categories": "Thinking, IT",
    "tags": "Essay",
    "date": "2016-05-02 21:38:00 +0800",
    





    "snippet": "咱们不谈那么高深的话题，也不做义愤填膺状的号称“绝对不用百度”。就说一个问题：作为一个普通老百姓，如果大家非要上百度，有没有什么靠谱的建议？一、学会隐藏自己的身份百度的技术实力是非常强大的，至少在他们自己的宣传中是这么说的。百度的大数据实力！百度的人工智能实力！百度的用户画像实力！在这种技术实力之下（大数据分析+人工智能+用户画像），如果让百度知道了你是谁，他一定能够让你点击那个让他获得最高收益的推广链接！所以，作为一个普通用户，在万不得已想要使用百度的时候，请开启隐私保护模式，例如这样：开启隐私浏览模式二、学会装外宾百度的产品经理也是非常优秀的，如果是一个外国友人，从国外访问百度，他们大概会得到这样的搜索结果：海外用户牙痛的时候1. 推广区域被明确标识了浅红色背景2. 非常克制的只推荐了一个信用等级为V3的舒适达3. 然后紧接着推荐了一批多达1025家，首页都是V3级别的相关口腔医院4. 相关的百度经验，虽然是个偏方，但是也不妨一试国内用户牙痛的时候1. 推广区域的浅红色背景色消失了2. 一口气推荐了7个信用等级只有V2的网站3. 推荐的牙科医院，也都是V2级别的国内用户牙痛的时候，用手机搜索一下果然，更糟糕的结果出来了，百度推荐了一个V1信用度的域名叫做cqxygyp.cn的网站总结一下  百度的产品经理，非常清楚：推广广告，是应该加上背景色的。但是他们只打算把这个规则服务于外宾  百度的产品经理，非常清楚：那些网站的信用级别，但是，他们只打算给外宾推荐V3的网站；给普通国内用户推荐V2的网站，给国内手机用户推荐V1的网站  百度的产品经理，非常清楚：首页的搜索结果，推广链接的数量太多，会引起用户的反感。但是，他们只打算对外宾提供友好的用户体验。而对于国内的普通用户，则不坑到，不放过。三、既然来都来了…既然我们已经花了那么大的力气，开启了隐私模式，而且通过“复杂的科学上网”的技术，伪装成了一个外宾，何不也试试国外的搜索服务呢？反正兼听则明嘛！以上忠告，仅供参考追加一条网友评论：都已经翻出去装成外宾了，为毛还要回来用百度"
  },
  
  {
    "title": "写字的自由——内篇",
    "url": "/my_blog/posts/writing-freedom-2/",
    "categories": "Writing",
    "tags": "Thinking",
    "date": "2016-02-22 00:00:00 +0800",
    





    "snippet": "在上一篇文章写字的自由——外篇，我就一直在打腹稿，打算写一篇“内篇”。外篇谈的还是平台（系统）带来的不自由。而内篇，打算谈谈我们自己的内心，是如何会陷入到不自由之中的。我们不仅需要考察，为何有些文字不能写？更需要考察，为何我们会写出那些文字？一、还是先从起点的写手说起我是一个起点的忠实用户，所以我从来不看盗贴，只在起点付费阅读。也正因为如此，所以我会在小说之外，读到很多作者与读者“谈心”的文字。这种文字主要分为2大类：拉票和请假。拉票是一门艺术，甚至有些起点大神，被公认为：拉票单章写得比小说还要好！有些单章写得令人热血沸腾，有些单章让人读来荡气回肠，有些单章我们读后生出与作者肝胆相照的错觉，有些单章却直白得令人发指。至于请假，我经常会有一种感觉，起点的作者，大概是世界上最倒霉的一群人。自己生病，家人生病，朋友生病。U盘坏了，电脑坏了，笔记本坏了，网吧的电脑也坏了。家里停电，小区停电，被雷劈了。幸好还有一些我挺佩服的作者，会这样请假：“今天想不出来，停更一天。”；“今天朋友来喝酒，没空写了。”起点的写手不仅要琢磨什么样的文字更加吸引读者，还要琢磨什么样的文字，能够吸引读者投票（月票、推荐票），能够吸引读者打赏，能够吸引读者不看盗贴，而订阅正版。为什么会写出这样的文字来呢？有所求而已！至于自由，谁还关心？二、聊聊我在知乎的体会我曾经是知乎的重度用户（4 年），这个社区渐渐的形成了一种令我反感的文化。当然，诚实的说：我也曾经乐在其中。在知乎，我们的社会地位几乎是完全量化的，有多少关注者，有多少赞同，有多少感谢，回答问题赞答比是多少，写了多少篇专栏文章，有多少篇文章被知乎周刊收录。既然这些数据决定了我们在知乎的社会地位，那么：如何写出高票的回答，就是一门值得研究的学问！文字要犀利，语言要幽默，要学会讲一个好故事，如果是女生，还可以爆照（只要让人相信那是本人就行）。回答的内容，要么短得一句话就把题主噎死；要么长得让所有的读者纳头便拜（有数据、图表更佳）。在我没有删除自己在知乎的答案前，我那些得票最高的答案，要么是喷题主的，要么是喷其他答案的，至少也是语气较为激烈的。相反那些客观理性的回答，通常得票数都不会高。类似的现象也发生在我的知乎专栏里，得票最高的文章，是骂知乎的文章，与人吵架的文章依次排在后面。而那些我深入思考，认真写出来的分析文章，通常得票寥寥。这就是知乎的规则，在规则之下大家的都会写那样的文字！对于大多数身在其中的朋友，他们其实并无自觉，甚至乐在其中。至于自由，谁还关心？三、微信公众号社交媒体的威力，在微信上体现得淋漓尽致。以至于现在的微信公众号文章，出现了一些新的趋势。标题党固然在互联网上一直存在，但是直接加上（深度好文）、干货、揭秘、不看后悔之类的标题，再加上一些与内容完全无关的诱人题图。简直无所不用其极。有很多次，我都会忍不住好奇心点进去，然后再悻悻然的关掉，再恨恨的对自己说：“叫你不长记性！”现在的微信文章，往往紧跟社会热点，然后起一个耸人听闻的标题，再炮制一些惊人的观点，甚至不惜杜撰一些若有似无、未经证实的论据。这样的文章，往往会被广为传播，火爆一时。比如说前段时间丁香园出了一篇：《老天爷欠江西农村一个好儿媳？呵呵，你家媳妇20年前就埋土里了》，这篇文章的阅读数，超过100万！但是这篇文章的内容，真的值得推敲吗？通过某种跳跃式的逻辑，以及对数据的歪曲解读，暗指江西人比印度人，更“喜欢”杀掉新生的女婴？！而后续的客观分析文章，阅读数能超过10万吗？我很怀疑！事实上，我在微信公众号上看到的绝大多数客观、理性、公正、平和的文章，往往都应者寥寥，冷冷清清。为何那种博人眼球的文章，会大行其道呢？我能够想到的原因是：阅读数、点赞数、打赏数，以及让公众号筛选评论的做法，大大的保护并刺激了作者的“创作热情”。而公司企业、网络媒体、乃至自媒体的刻意“运营”，更加重了这一灾难！对于那些追求阅读数、点赞数、打赏金额的作者而言，微信公众号是他们的工具。至于自由，谁还关心？四、为何我在简书写字？之前我与霍炬有过一次对话，他很奇怪，我为何不在微信公众号写东西，却跑到简书来写。我当时的回答，让他无法理解：“因为简书的人少（对不起，@简叔）。而且，我不追求成为自媒体。”事实上，我只是想找个地方安安静静的写点字。以我的经验，通过写文章在网络上发布，找到知音其实是非常困难的，找到能够相互探讨，互相启发的朋友，就更加少得可怜。在这个网络时代，更加悖论的是：如果你的文章被大面积传播，更多人会因此而喷你。我曾经写过的一些文章，通常会经历三个阶段：纷纷点赞、有人来喷、最后是他们在文章下互喷。至于我写了啥，连看完的人都不多。曾经我也写过一些标题党的文章，然后才发现：吸引到更多的眼球，并非我的目标。所以：找到一个写作体验比较好的地方，人也不多，不会有多的吵吵嚷嚷干扰我的思考与写作。至于能够有多少人看到，能够有多少人赞同甚至来找我探讨，一切随缘。这就是我选择简书的原因。"
  },
  
  {
    "title": "聊聊“新技术”",
    "url": "/my_blog/posts/talk-about-new-tech/",
    "categories": "Thinking, IT",
    "tags": "WebFrontEnd",
    "date": "2016-01-25 00:37:00 +0800",
    





    "snippet": "#缘起最近在微博上，有两位我认识的前端界的朋友，吵得不亦乐乎。一位是@尤小右 ，因为收听了一期Teahour的访谈，开始关注vue这个前端开源框架，以及框架背后的作者。另一位是@真阿当，是我在盛大创新院时的老同事，要说这二位的水平高下如何，以我的经验肯定是无法判断的。微博又非常的碎片化，这种技术话题，大家各自断断续续的发表些只言片语，令我们这些看客，看得非常的不过瘾。幸好，这两位后来都各自写了一篇长文《真阿当：为这几天前端方向所撕的逼做个大总结》、《尤小右：谈谈前端『新』技术》，让我对于他们的观点，都算是有了较为完整的理解。结果一看之下，竟然都相当认同……还有中间的一些其他朋友的观点，比如@刘骥-JimLiu、@张克军的一些看法，我也都很认同。那么，问题来了：“你到底有没有底线啊？！个个都认同，你到底是哪边的啊？！”所以，我今天打算好好的表述一下，自己对于“新技术”的看法。其实，阿当大概对于我进入创新院之前的经历，也不太了解，所以才会说：“11年你尝试从ror领域扩展前端知识，遇到了一堆坑，然后在知乎上发的贴子，求教前端难点所在的帖子，我还印象很深刻。你是11年那波对前端感兴趣的后端，很有典型性。但你对前端的态度要诚恳得多，点赞。” ps: Web 前端开发面临的挑战主要有哪些？其实呢，我大概在2005~2006年的2年里，混过一段时间的前端圈子，能够拿得出手是一篇OpenDoc，名叫《Ajax新手快车道》。还有一次演讲的PPT，名叫《Ajax技术地图》。但是，在10年以后的今天，我必须老老实实的承认，我不懂前端。毕竟，前端技术这个领域，变化太快了……不过，当初在《Ajax新手快车道》的序言里的一段话，放到今天，我觉得依然是正确的：AJAX的相关组成技术，每一个都已经出现了N年以上了，对这些技术的组合运用，也远远早于AJAX这个名词出现之前。所以，我真正敬佩的，并非提出AJAX这个缩写的Jesse James Garrett。而是那些早在N年以前，就已经在探索、实践的先者，他们始终在追求的：是更好的用户体验，以及更好的开发体验。这样的精神，才是最可宝贵的，也是最值得我们学习的。许多年过去以后，当我们再回头来看当年的这些热门技术，也许早已经变得老土，变得落伍了。在这样的历程中，哪些人会成长为高手？会成长为大师呢？就是那些永不满足，永远在追求更好的用户体验，永远在追求更好的开发体验的人！#1、为啥我赞同@尤小右首先是他所说的“对待新事物的态度”。从架构的角度来说，技术选型是永恒的命题，是否选用某种技术，要不要尝试某种新的技术，要不要推动team的小伙伴一起学点新东西，始终是一个架构师需要考虑的首要问题。无论是盲目拒绝，还是盲目追新，都是不可取的。我也曾经在另一篇文章里，表达过类似的观点：以实践检验为荣，以道听途说为耻，如果某种技术，架构师自己都没有做过评测，没有看过框架代码，没有在过去的实践中应用过。却因为一篇文章，一个讲座，甚至某个大公司曾经用过这样的证据，就将一种技术引入到项目之中。这样的决策，很少有不失败的。其次是因为在他的文章里，相当清晰的阐述了近年来前端领域的一些技术发展脉络，为何会出现那些新技术？以及他们分别想要解决什么问题？这令我获益匪浅。再次，我赞同尤小右还因为vue在github上收到了13191个stars。这绝对是一个了不起的成就，在背后没有大公司的情况下，在前端框架领域，能够超过这个star数量的，几乎一只手就能数得出来！（全世界范围内）虽然阿当一直表现出对于“攒星星”的不屑，但是作为一个对于开源社区较为了解的人来说，有这样一个项目撑腰，他说的话，就得认真听，仔细吸收养分！#2、为啥我赞同@真阿当首先当然是因为其中的一些观点，比如对CoffeeScript的看法。多年以前，Java社区曾经有一种技术叫GWT（Google Web Toolkit）,系出名门啊！他的作用，就是帮助Java程序员，能够在不写JavaScript的情况下，编写Web应用。这种技术，从来就没有流行过。哪怕他背后站着Google。我一直以来的观点是：如果你连学一门新语言都没兴趣，你怎么就敢贸然进入一个全新的领域？阿当说这种技术是解决伪问题，我就很认同。虽然我很喜欢Ruby这门语言，但是我并不是一个只会Ruby的程序员。多学一门语言，很难吗？类似的看法是对于nodejs的。在没有出现nodejs之前，前端程序员，要多学一门PHP或者Ruby/Python，很难吗？曾经有半年的时间，我也跟过nodejs的风，在一家公司里，用nodesj写了一个消息队列处理的框架。说实话，到后来就会发现，真正需要解决的问题，都不是语言层面的，也不是前端知识领域的。一个曾经的后端程序员，能够用好nodejs。一个专攻前端的程序员，其实用不好nodejs。但是，在技术圈子里，有太多傲慢的闯入者。面对一个其实存在传统方案的领域，既不愿意深入了解，也不愿意帮助原来的方案一起改进，而是自己再搞一套“新”的。比如Java的无数种Web框架，有哪一种足够好用到撼动Rails的地位？真！没！有！我喜欢Ruby社区的一个重要原因，就是这个社区，不傲慢，不分裂，绝大多数劲，都往一处使。我赞同真阿当的另一个原因，其实还是因为和他一样，见得多了。我有个朋友叫陈黎夫，多年以前曾经费了好大的力气，写了一本ASP.NET的Web Framework的书（书名与具体的技术不记得了），结果书刚刚写完，ASP.NET出新版本了。他写的那本书，几乎就可以扔掉。被坑得欲哭无泪！大公司推出的很多新技术，当年吹得天花乱坠，花好稻好，到后来说没了也就没了。你跟得过来吗？（现在还有人知道XUL是啥吗？）现在，大公司也都学乖了，推新技术几乎全部都放在Github上开源，然后接受社区的评判，大家都凭Stars说话。举个例子：TypeScript，再如何系出名门，我一看他的Stars，只有8930，还没有vue的多。我必然内心会打鼓：这东西，多半不靠谱吧？！#3、如何看待新技术新技术层出不穷，是IT这个领域的常态。几乎每天都会诞生一种，据说会改变世界的革命性技术。对于程序员来说，终生学习也注定是常态。准确判断一个新技术的价值，是一项重要的能力。在没有Github之前，甚至有公司敢于“推出不开源的新技术”。现在这世道比以前好了很多，新技术多半会开源，而且多半会放在Github上开源。我们在阅读一个项目的源代码之前，先看看他的几项基础数据：stars、forks、issues、commits、contributors，就基本可以掌握这个项目的“健康状况”、“活力程度”，再看看issues的内容，了解一下大概存在哪些已知的问题。然后，我可以决定，是否再仔细看看他的文档、代码，试着跑跑demo？能够在一个大背景下理解一项新技术，是更加基础的能力。仅仅看stars是不够的，比如js这个领域，这两年非常火，较之其他的语言，starts往往在数量级上就高一级。如果缺乏对这一领域的较为全面的了解，就无法横向比较其优劣。当然，更加重要的，是对于该领域的技术发展趋势，要有自己的看法，某个发展方向是不是有前途？如果没有自己的看法，也只能随波逐流了。虽然程序员需要终生学习，但是每个人的时间都非常有限，那么多新技术，怎么学得过来？不被忽悠，少走弯路，节约时间，才是更加高效的学习方案。这也是我赞同阿当的根本原因。#4、如何学习新技术关于一个团队，如何引入新技术，如何学习新技术的话题，今天就不聊了。这个话题太大，可以专门写一篇来讨论。今天只讨论，个人如何学习新技术？我有一个一直以来的观点：“人家的子弟，就是拿来误的。”潜台词是：不要怕误人子弟！为啥这么说？因为，回顾自己的成长历程，什么时候经验值涨的最快？一是项目紧张，压力山大的时候；二是掉在坑里，必须自己爬出来的时候。对于一个善于学习的人来说，走弯路他也在学习。对于不善于学习的人来说，就算在一条直道上，他也根本就不走啊！所以，我想劝劝阿当。你何必担心年轻人被坑？担心他们走弯路？这样才有利于他们成长嘛！当你以一种过来人的眼光，在那里痛心疾首的时候。他们还觉得你倚老卖老，固步自封呢。对于年轻人而已，我并不建议他们太过审时度势。听说哪个热门，就去学吧！感觉什么好玩，就去玩吧！再怎么浪费时间，也比浪费在撸啊撸上要好吧！只要不是心猿意马，浅尝则止，总是会有收获的。再说了，那些所谓老家伙的先见之明，也未必都是对的。[嘿嘿]不写结束语了，本来也难有啥结论…附赠一段当初写的文字吧新手如何上路软件开发这个领域，永远都在飞速发展，大家都必须不断的学习新的知识、技能、框架、IDE、甚至新的语言。传说中的骨灰级高手们，就像传说中的大侠，任何武器、哪怕是一块木头到了他们手里，也能发挥惊人的威力，人家练了几十年的看家本领，他们随手使来，也竟然像是打娘胎里就开始练了一样。为什么？就算不吹那么玄的，平常我们能够碰到的那些老手，在学新东西的时候，也比那些新手学得更快，理解得更深，运用得更熟练。而新手们呢？往往就会漫无头绪，焦头烂额，以一副张着茫然的大眼睛的经典表情，出现在各大论坛的新手求助区里。他们欠缺的，究竟是什么呢？为什么老手学新东西，就没遇到那么多困难呢？泛泛地说，自然是经验上的欠缺。仔细地说来，又可以分为三个方面：一、本质，一种技术与另一种技术之间，往往会有本质上的相通之处，当你对一种技术的理解与思考越来越深入时，学习一种新技术也会更加容易。触类旁通，举一反三的能力，就是来自于对于技术本质的追寻。二、地图，本质上或多或少的相通，也提示着我们技术之间的相互关联，当你了解的技术越多，了解得越是深入，在你的内心，就能建立起越发清晰的技术地图。各种知识都有一个自然、合理的位置。那么当一个老手要学习一门新技术的时候，他其实并非在探索一个全新的、未知的领域，而是有很多脉络可寻，也很多已知可以帮助他们快速了解未知。三、技巧，面对同样的未知，面对同样的难题，新手们一筹莫展，而老手们却掌握着更多的技巧和手段，帮助他们试探可能性、缩小问题的范围、迅速定位问题、不犯明显愚蠢的错误、甚至能够列举出更具命中力的搜索关键词，而这些技巧，都帮助老手在前进的道路上，更少跌倒，即使跌倒，也能更快的爬起来。作为一本写给新手的入门书籍，我们希望展现给读者的，是一个老手如何学习新技术的过程。我们相信，这样的一个学习过程，对于新手来说，是更具有价值的。"
  },
  
  {
    "title": "三代开源社区的协作模式",
    "url": "/my_blog/posts/gens-collaborative-model/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2016-01-17 00:02:00 +0800",
    





    "snippet": "一、研发工具与研发模式据说，人之区别于禽兽，最大的特征在于利用，甚至发明工具。在没有任何其他工具时，我们只能借助于自己的肢体，一旦有了工具之后，我们的能力将会大大的增加。但是，从另一个角度来看，工具也同时在限制我们的能力，甚至限制了我们的行为模式与思维模式。有一句俗话说得好：「手里拿着锤子，看见什么都像钉子。」而在研发工具的领域，我们观察到另外一些有趣的现象：因为软件研发工具的开发者，同时也是工具的使用者。因此，他们不仅仅会受制于工具，也往往会由此被激发，开发出对自己而言更加趁手的工具。开发者与使用者身份合二为一的现象，使得研发工具的发展，简直可以用「日新月异」、「层出不穷」甚至「争奇斗艳」来形容。随着软件复杂性的不断增加，以及软件开发的参与者不断增多，团队协作的辅助软件，也开始不断增加，随后我们发现：工具不仅仅限制了个人的行为模式，更进一步限制了团队的协作模式。软件研发企业的管理者，往往会有某种错觉，他们会认为：管理就是定下制度、流程与规范，然后「下面的人」就会照此执行。因为有人「听话」，有人「不听话」，所以才需要奖励与惩罚的制度，来帮助管理者推行他的「规则」。所以，他们一般都很喜欢看《执行力》这样的书。在开源社区，事情变得有些不一样。虽说开源社区也有「领导者」，甚至往往会有「精神领袖」，但他们并没有暴力手段，也没有经济手段，甚至行政手段。因此，要协调一帮自由散漫的黑客，共同开发高质量的开源软件，必须有更加高明的手段。由于一切都是Open的，所以：不仅代码人人可见，开源社区的协作模式，也暴露在众目睽睽之下。从某种意义上来说：这促进了开源社区的协作工具的开发、进而使得开源的研发协作模式，以远远超过企业内部的演化速度飞速演化。二、第一代开源协作模式第一代开源协作模式，在早期几乎没有符合自身特殊需要的工具，有什么用什么，因此最为常用的email，被发展为Maillist，成为整个开发团队的协作核心工具，大多数操作系统内置的diff/patch工具，使得代码的交流以email patch为主。这些老牌的开源项目，从使用RCS、CVS，到了后来也开始逐步引入svn/git，bugzilla这样的工具，但是围绕mailing list开展协作的特征，则持久不变。作为协作核心的Maillist一个开源社区，往往就是一个邮件列表，随着软件的日益复杂，社区的不断扩大，邮件列表也会不断分化，通常会划分为：核心组、开发组、用户组。开发组与用户组的邮件列表，随着软件的架构分化为多个模块，还会进一步分解。在邮件列表里，所有的用户都是平等的，在无法用工具保障流程的情况下，社区逐渐发展出了一套严格的邮件礼仪和格式规范。不规范的邮件，不会被理睬；不礼貌的家伙，甚至会被赶走。邮件越来越多，即使分成多个邮件列表，依然太多。Archive这样的邮件归档、查阅的工具，就必须得有了。一封邮件，大家都来回复，严格re:的标题，组成了一个可供追溯的线索。在邮件列表里，通常出现个人的名称，加上Reported-By、Tested-By、Acked-By的标记，即是一种代表个人名义的认可，也是流程规范的一部分，更是计算各人贡献的依据。Bugzilla应运而生在邮件中，有一类话题是最活跃的，那就是bug。但是，通过翻找邮件查阅bug的最新的解决状况，是非常困难的。一个bug，从提出，到最终解决，并被确认在哪一个版本中发布fix，是一种稳定的状态转化模式。一个专有的处理工具，势必应运而生。Bugzilla、trac等一批工具，就由此被创造出来了。代码提交流程的规范化开源社区，表面上非常的崇尚民主自由，但实际上却盛行精英主义、甚至是个人独裁的。我们往往会给某个开源项目的创始人，冠以「仁慈的独裁者」的头衔。虽然，是否仁慈，大家不得而知，但独裁确实是显然的了。最大的独裁，是代码的管理权。因为作为创始人与核心开发者，他们往往以一己之力，贡献了绝大多数的代码，确定了项目最初的架构与发展方向。他们不会容忍任何人随意地向代码库提交代码。在邮件列表中，一个新来的家伙，从没人认识，到能够独立的向代码库提交代码，非得经历艰辛的历程不可。这样的历程，简单的说，就是一次一次的Code Review。被审核通过、合入代码库的patch越多，一个人对于社区的贡献就越大，可信度也越高，身份地位也逐步提高，然后，他也就可以去Review其他人的代码了。总结：在简陋的工具条件下，发展出高效、严格的社区协作模式三、第二代开源协作模式第二代开源协作模式，有两大特征：Web化、集成化。随着Web技术的不断成熟，开源社区也开始创造一个又一个的Web开源项目，其中Web化的项目管理工具，如雨后春笋般冒了出来。在wikipedia上，issue-tracking systems列出了55个，project management software列出了152个，其中开源的也有30+，open-source software hosting列出了22个，堪称蔚为壮观。这类平台又可以分为两大类：基于开源的项目管理工具或issue tracking工具，自建平台，以JIRA、DotProject、Redmine为代表；基于免费开源托管平台，以SourceForge、Google、LaunchPad为代表；第二代的开源项目管理工具，可以说，主要是在向企业内的开发管理学习。文档、流程、角色、权限、统计报表等等功能，都开始出现了。有些开源项目，也在用这些东西。以SourceForge与Google Code为代表的开源托管平台免除了开源项目搭建自己的官方网站，管理工具，代码仓库之类的繁琐事务，大大促进了开源项目的发展。不过，由于平台的功能总是受限的，因此自建门户，自组工具的开源项目依然层出不穷。issue &amp;amp; milestone在第二代开源协作模式日渐成熟的过程中，另一股潮流也正方兴未艾：「敏捷软件开发」。其中，最为深入人心的概念之一，就是每个迭代，完成一批User Story。在开源社区，这个概念被进一步演绎：无论是bug和feature，都被统称为issue。这些issue，被分到不同的milestone（版本），即使最后有可能延期，milestone也会定义一个预期完成时间。这是好事？还是坏事？其实很难评价，因为从开源的原始教义而言：所有的贡献，都是自愿、随机、不可预期的。为自然生长的软件，规定里程碑，本来就显得荒谬。但是，从另一方面而言，我们可以引用另一个中国人过马路的例子：「不管红绿灯，凑够一堆人就过马路」，开源软件，往往也是「不管里程碑，稳定一堆特性和bugfix，就发布一个版本」。如果在开源软件很少，更别提形成开源生态圈的情况下，这种随意的做法还是可行的。但是在大量软件，相互依赖的情况下，一个开源项目要赢得其他协作项目的信赖与协作，必须给出稳定的规划，以便相互配合。这种规范，也是被逼出来的。服务平台化虽然黑客们喜欢写程序，但是要写的程序实在太多了，能够不重复造轮子，有现成的好工具可以直接拿来用，也是件好事。如果可以打开一个网站，注册一个用户，创建一个新的项目，剩下的事情自有平台帮忙打理，那么大家都可以愉快、专心的写自己的代码了。平台在逐步进化，因而能够帮助开源项目，打理越来越多的事务。通常主流的开源项目托管平台，都能够完成：  在线代码浏览，并能够支持不同的配置库  需求管理、Bug管理，通常合并为Issue tracking  版本与里程碑管理  文档编写与管理，以Wiki的形式为主更进一步的，还有能够完成：简单的自定义工作流、文件夹与静态资源管理、输出各种统计报表、甚至提供论坛、搜索、邮件列表以及各种排行榜等等。在此之前，一个开源项目，是一个社区。到了大平台的时代，整个平台，构成了一个更大的社区。总结：以Web形式提供的集成化开源项目托管平台，标志着开源项目的协作模式，进入成熟期四、第三代开源协作模式到了MySpace、Facebook与Twitter这样的SNS网站的兴起，开源项目的协作模式，受到SNS的启发，也随之进入了第三代，以Social Coding为核心的开发协作模式，这样的模式在以Github为代表的网站上，体现的最为充分，众多的模仿者也层出不穷。过去的开源项目与托管平台，都是以项目为中心来打造，而Github则是围绕着参与开源的人来打造。首先满足的不是项目的需求，而是个人的需求，由于对人的黏性大大增加，也使得Github成为近年来最具吸引力的开发社区。围绕着Github，一大批周边扩展服务被建立起来，构成了一个更加有活力的生态圈。而程序员们，不仅在Github上参与开源项目，更在Github上结交朋友，分享经验，增进能力。甚至这样的协作模式，还拓展到了编程领域之外，成为开放式协作的流行模式。激励机制第三代开源协作模式，以Github为代表，以Social Coding为精髓，这一代模式想要解决的问题，是激励机制的问题。第一代开源协作，虽然创造了一批大大有名的项目，但事实上却是一个非常小圈子的事业。即使是最为成功的Linux内核开发，也不过1000~2000人。一旦人多事杂，就会出现管理混乱的现象。第二代开源协作，虽然借鉴了很多企业界的规范管理经验，但是在事实上，却是不适应开源软件的风格的，举一个例子：在Redmine中存在的角色、权限、工作流之类的东西，实际开源项目使用的，却非常少。第三代开源协作，借鉴了社交网络中的各种数值化模型，关注者数量，Star数量，Fork数量，Issue数量，Pull Request数量，都在显要位置标示出来，对于开发者形成正向激励，还有很多的统计图表，形象的展示了项目的活跃程度。开源社区，原本就有非常深厚的，统计补丁数计算贡献度的传统，这一点在Github被发扬光大，可以说是优秀的继承与创新。基于fork/pull request的协作机制在github，一键就能够fork自己的分支，然后可以跟原有的分支毫无关联，也可以非常方便的提交pull request，这就带来了更加频繁的分裂，使得分裂常态化了。原来的开源社区，开发者修改了代码，希望能够贡献给社区，需要穿越种种障碍，如果社区不接受，最后开发者只能逼不得已，自己开一个新的分支，变成一个新的项目。在分裂是异常的状态下，分裂是罪恶的，是不应该的，是会带来阵痛的。当分裂变得常态化，pull request也变得常态化，分分合合，以每天N次的速度发生，恰恰因为如此，他不再是一种罪恶，而是一种健康的、向上的、以更快速度进步的模式。大家不再是在一个版本下，各自贡献，而是在各自的版本下，独立发展，想分就分，想合就合。Pull request，从一个代码合并的方式，变成了开发者之间主要的交流方式，他们发现，最好的交流，正是通过源代码来交流，一切的讲道理，都不如用源代码来讲道理。这恰恰是程序员们最习惯，也最喜欢的一种交流方式。围绕Github出现的扩展服务较之上一代的平台，Github提供了优秀的开放扩展机制：OAuth、API、SDK、WebHooks、ServiceHooks等等，使得围绕Github，扩展各种满足项目特定需要的服务，变得非常容易。这就是从上一代平台的开源大社区，进化为「围绕Github的开源生态圈」。到目前为止，Github一共支持超过170个不同的扩展服务，其中较为热门的服务有：  与其他项目管理工具集成（Bugzilla，Asana， Basecamp，Redmine，JIRA，ZohoProject）  与持续集成服务集成（Travis，Bamboo，CircleCI）  与消息通知服务集成（Amazon SNS，Email，IRC，Jabber）  与DevOps服务集成（AWS OpsWorks， DeployHQ）Github 开放平台与API，基于Github OAuth API，其他网站可以支持开发者用自己Github账号登录，并使用一些有趣的服务。  Cloud IDE，用Github账号登录，直接在浏览器里打开一个IDE，编辑自己在Github上的开源代码  Resume Service，根据开发者在Github上的各种社交行为与开源项目贡献度，自动生成格式化的简历这些扩展服务，极大的丰富了开源生态圈的内涵。总结：社区天生就应该是社交化的，Social Coding与开源社区，简直就是天作之和。五、开源协作模式的新探索Git：作为标配目前看来，git作为分布式配置库的王者地位，已经不可动摇了。能够初步总结的原因，至少有三个：  git与github互相促进，作为全球最大也最流行的开源社区，他的标配是git。这也导致越来越多的开源项目，选择git作为标配  众人拾材火焰高，越是参与开发的人不断涌入，越是帮助git发展得更快。这是一个赢家通吃的世界  开源生态圈的出现，使得围绕git、github发展出一大批相关的开源项目、开源工具以及次级社区。这一现象，在docker横空出世之后，再一次得到展现。Code Review：必不可少开源社区，一直有非常悠久的CodeReview的历史，哪怕在最早的mail &amp;amp; patch的时代，Review也是开源协作的头等大事。仅仅梳理Review的历程，也可以看到其中工具与流程的发展。最初是邮件review，然后是在集成平台上内置review功能，或者提供更强大的review插件。到github创新的提出pull request，则是一种更加方便有效的review模式。与此同时，独立于集成平台的专门的code review工具，也开始发展起来：Review Board、Google Gerrit、Facebook Phabricator是其中重要的几个代表。Workflow：百花齐放在git逐步流行之后，大家发现基于git可以选择的「玩法」实在是太多了。从最初写下一行代码，到最终出现在项目发布的版本之中，期间可以有无数的「路径」。在git-scm.com官方教程《ProGit》里，提及了三种：集中式工作流、集成管理员工作流以及司令官与副官工作流。在蒋鑫的《Git权威指南》里，又提及基于TopGit、基于submodule、基于subtree、基于repo、基于gerrit、以及git与svn配合使用的不同工作模型。再后来：GitFlow、Github的Pull Request、以及基于Github的Github Flow等等工作模式，堪称百花齐放。为什么会出来这么多workflow？因为团队与项目的差别，实在太大了。现在到我们简直无法想象：那些在各种情况下都坚持使用SVN都开发者，是怎么熬过来的？当然，从另一方面来说：选择太多，也会带来另一种烦恼…CI、CD、DevOps从Everything as Code到Everything Automation，是另一个越来越明显的趋势。前两天，我从机场出来，正好看到两个并列的广告牌，一个广告的大意是：「UPS助您打通全球供应链」、另一个则是「中国银行助您打通全球供应链」。这真的很有意思，看来在各行各业，大家都开始在关注整个生命周期的各个环节之间的打通。只是，在软件领域，我们会感觉到这是一种回归。毕竟，最初的软件开发，都是很简单的。在一台计算机上，自己写程序，自己编译，自己调试、运行，最后发布。既不用依赖他人，更不用等待什么流程。随着项目越来越复杂，参与的人越来越多，我们的软件，不能仅仅运行在自己的机器上，或者需要部署到服务器上，或者需要发布到某种平台上。在协作者众多的情况下，如何分工合作？在开发者水平参差不齐的情况下，如何保证质量？在分工、协作、流程与质量保证的要求之下，如何提高效率？这些都是DevOps致力于解决的问题，也是DevOps不断得以发展的原动力。总结：开源社区，始终在进步，Github代表的也只是「一代」而已，新的一代协作模式，还会被创造出来的。六、暗线：工具、习俗背后的逻辑过去是如何？未来又会怎样？想要回答这类问题，其实需要更加深入的思考：「开源社区的协作模式，为何会变？变化背后的逻辑是什么？」开源社区研发工具的两大目标：降低门槛，提高效率开源社区，与普通的软件开发最大的不同，就是参与者多多益善。在《大教堂与集市》中，Eric Steven Raymond总结到：「如果开发者协调者有至少一个像Internet这样好的沟通媒介，并且知道如何不靠强制来领导，那么多人合作必然强于单兵作战」，这简直就是绝妙的预言。虽然当年的ESR也许并未预测到，基于Internet会出现那么多辅助开源的相关工具（他们当时还只有邮件列表）。所以，开源社区一直在致力于两个看上去相反的目标：「吸引尽可能多的人，以尽可能简单、便捷的方式，参与到开源中来」、「在人多得超乎想象的情况下，依然能够保持，甚至不断提高效率」。如何计算参与者的贡献？开源社区，不会给参与者发工资，因此激励是一个大问题。公平、公开、公正大计算所有参与者的贡献，以所有人都能够接受都形式，计算并公布各种排行榜，可以说是开源社区特有都「刚性需求」，因此SNS与开源社区的结合，成为必然。以后，面向开源协作的大数据分析，也一定会出现。如何激励、吸引、回报参与者？计算参与者的贡献，仅仅是公平激励的基础。让激励变得有趣，变得有价值，变得有意义，则是吸引与回报参与者的不二法门。因此：游戏化的思路，会被越来越多的引入到开源社区中来。如何保障项目质量？开源项目保障项目质量都最大利器，是引入数量众多都热心测试者。但是，仅仅有人愿意测试，主动、积极都帮助测试，已经越来越不够了。随着项目越来越复杂，开源项目必须逐步走出仅仅依赖肉眼、依赖人多＋运气的质量保障模式。自动化测试、以及更加规范的Review流程，则是必然出现，而且将越来越重要的环节之一。如何协调一致的工作？自由与规范，计划与变化，兴趣与责任。经常会在社区里，成为争论的热点话题。虽然在《大教堂与集市》中，ESR极力鼓吹「礼物文化远远胜过交换经济」，但是：「在一个庞大的社区，各种各样的事务都需要有人去完成，而且还不能漫无章法。」因此：「某种调节手段、协调者与协调机制、甚至是看不见的手」之类的东西，会慢慢的回到社区。如何在社区里平等、高效的协商？目前来说，依然只能是线上讨论+线下开会。虽然，很多开源社区，开始学习《罗伯特议事规则》这样的开会圣经。但是，开会依然是最令程序员感到苦恼的事情。在这方面，将来会不会出现更好的辅助工具，这方面很值得期待。结束语唯有变化，是不变的。开源协作模式，同样如此。惟愿我们，能够成为推起其前进的力量之一。"
  },
  
  {
    "title": "写字的自由——外篇",
    "url": "/my_blog/posts/writing-freedom/",
    "categories": "Writing",
    "tags": "Thinking",
    "date": "2016-01-11 00:00:00 +0800",
    





    "snippet": "引言前两天，在微博上看到@左耳朵耗子 转了一段话：“越来越多人放弃网站迁到微信公众号了，从一个自己搭建、可以被搜索引擎索引、互相友链的开放生态圈，转向一个受到严格监管、版式单一的封闭平台。刚才在邮件列表里看到某LUG都开公众号了，真不通曾经自己搭建Postfix和named的人怎么能忍受这样一个封闭圈？”然后，@Fenng 评论并转发说：“有读者，有流量才是王道。说封闭的都是傻逼。”我也发表了一点自己的看法：“对很多人而言，名利之下，自由并不重要。”然后@Tinyfool 也参与了一句：“庄兄此言差矣，窃以为，我们喜欢哪个平台用那个平台，才是我们的自由。至于我是追求名利，还是什么，这不更是我们的自由么？”于是，我也想来聊聊这个话题。一个悲伤的故事熟悉我的朋友也许知道，我是一个起点资深高V。更加熟悉我的朋友也许还知道，我阅读网络文学的口味非常广，几乎不限门类，不限作者，不限男频、女频，无书不读。有一本曾经我追过的书，名叫《妇科麻醉师》，书中有一些非常神奇的设定，以及匪夷所思的情节。因为这本书，我甚至理解了冯唐（曾经的妇科医师）的内心肿胀的心理状态。这本书事实上非常小众，作者竟然靠这个养活自己，在写作的过程中，为了躲避监管，不断的修饰文字、修改作品。但是，最终还是在一场网络严打过程中，被彻底删除了。其实，这并不是最悲伤的部分。后来，作者又回到了起点，开了新书。这一次，他选择了时下最热门的“丧尸类”主题，并且小心翼翼的回避着各种敏感词。因为设定新颖，情节有吸引力，这本书的成绩，比他之前的任何一本书都好得多。他也兴高采烈的不时加更、求月票、求推荐。似乎一切又变得美好起来。然后，起点开始搞新的促销活动了，所有的读者，每天签到就能够领到赠送的起点币，然后，我们又一次听到了这个作者的哀号：“不要用赠币订阅和打赏了，你们这样，我们这些作者一分钱收入都没有的，跪求了…”，其实，无非就是起点为了犒赏读者，慷作者之慨，拿那些起点写手辛辛苦苦的写作成果免费送给每天签到的读者。最悲伤的部分在于作者们哀号一片，却没见哪个作者暴起、怒吼，老子不在你这里写了！为啥？因为，起点已经被腾讯收购了，整个中国网络文学界，现在只有一家店了。作者们根本没有选择！也许有人会问：“既然这样，为何不转行？为何非要当这种网络写手？”还记得前两天公诉人是怎么质问快播的吗？——你们为什么不转型呢？写字并不可耻，通过写网络小说养活自己，并不可耻。但是，在一个垄断的环境中，写手们并无自由！他们只能继续在起点努力码字，哀号求告！恳请有同情心的读者，不要用赠币订阅，另外再多投些月票和推荐票！什么是写字的自由？如果你写了字，却被人删除。你就丧失了自由！如果你写了字，却被人改成肉X的X望，或者断成肉~体~的~欲~望这样的格式。你就丧失了自由！如果你在写字的过程中，主动思考如何写作才能不被删除，你就丧失了自由！如果你对于敏感词掌握的越来越熟练，甚至开始自己主动断字，你就丧失了自由！即使如此，你依然不会离开那个平台，无论是为了月票、推荐票、打赏，还是为了点赞，转发和阅读量，你还是在努力适应那个平台的规则，你就彻底丧失了自由！所以，当@Fenng 说：“有读者，有流量才是王道。说封闭的都是傻逼。”时，我是非常震惊的。结语这篇文章，我在用Typora这个软件、Markdown格式写的。写完之后，我会同时发到我的Github Pages以及简书上。这就是我所追求的写字的自由。当然，还好我另有一技之长，不必靠写字谋生。这是我能保有自己的自由的基础——万幸。"
  },
  
  {
    "title": "快播案，一个猝不及防的时代的缩影",
    "url": "/my_blog/posts/kuaibo-tech-thinking/",
    "categories": "ThinkingIT",
    "tags": "Thinking, IT",
    "date": "2016-01-09 20:07:00 +0800",
    





    "snippet": "引言当年我还在知乎做段子手的时候，曾经遇到过一个问题：“有人认为「豆瓣变成了一个约炮平台」，老豆瓣人是怎么看的呢？” 我的回答是：“根源还是在TCP/IP协议上。另外，浏览器也不是什么好东西。”这当然仅仅是个玩笑，就像那个网络上一直在流传的老梗：“有人买了菜刀砍了人，卖菜刀的人也成了共犯”。问题在于，这个梗现在变得一点都不可笑了。快播的那四个人，已经被羁押2年了，前两天才刚刚受到公开审判，判多少年，还不知道呢。共犯？这次的快播案审判，法庭上出现了一大波范围攻击。高能的辩护律师，一次又一次的将整个互联网行业里的一家又一家公司，拖下了水。  从源头上来说，能够拍照的手机，专业的照相机和摄影机，是不是付有“协助制造”的责任。当然，视频图像的各种后期制作工具，也是共犯  利用某种工具，将这些视频上传到互联网。上传工具（无论是浏览器上传、专业工具上传，P2P上传）都是共犯  上传的目标地址，无论还是视频网站与图床，只要存放就是共犯  如果是P2P下载工具，每个工具的安装者，都会潜在的帮助这些文件，以更快的速度传播，自然全部都是共犯  P2P技术的发明者，无论是BitTorrent、电驴还是磁链，都更加方便了文件的传播，所以也是共犯  传播相关信息到其他网站，无论是截图、下载链接还是BT种子文件的人，自然还是共犯  那些承载这些信息的网站，就像视频网站和图床网站一样，都是共犯  一切搜索引擎，都跑不掉，全是共犯  播放器，自然是跑不掉的共犯  在这个技术链上，还有众多的电脑生产厂商，网络设备生产商，浏览器开发商，IDC机房，CDN服务商，云计算厂商，存储服务器供应商，网络服务提供商，电信运营商，全部都是共犯  所有这些共犯背后的技术支持力量，广泛的研发人员，当然也都是共犯在没有IT技术之前、没有Internet之前，我们很难想象，这么多种力量，能够汇聚到一起，共同犯罪！鉴别？在这次庭审中，有一个细节非常令我惊讶，检方的重要证据来源，竟然只有4台服务器。里面居然只有25174个视频文件！如果快播公司只有这么点视频文件，而不是这个数目的100~1000倍，打死我都不能信。对此，王欣辩护人指出，“快播1000多台服务器，怎么就直接奔着这四台来了呢？你怎么锁定的呀？”另外一个令人同情的角色，是鉴黄师。他的工作量简直惊人：“2万多个视频吧，一天至少看600部，最多800部”。2万多部看下来，每天10小时以上不吃不喝，大概还得花一个多月。还有一段对话，也很有意思，王欣：“缓存服务器存储的是电子数据而不是视频文件，快播不能能否凭借视频编码就知道视频的内容。”公诉人：“有辩护人说我们对技术定罪，公诉人从不是对技术定罪，只是对行为定罪！快播这么大公司，对于服务器的视频，拷贝出来判断下就这么难吗？”另外一个可以参考的数据是：全球最大的视频网站YouTube，在2011年时宣布，每分钟收到的视频长度为48小时。在2016年的今天，我们无法想象YouTube需要招聘多少鉴黄师，才能保障他的网站上不出现黄色内容。公诉人问：“既然你们无法有效监管不良信息，为何不人工逐一观看”，王欣在法庭上回答：“如果这样的话，公司就开不下去了……”当一个网络服务发展到快播这样的规模时，仅仅依靠人力，是不可能做到有效监管的。哪怕是专业的鉴黄师，以每天600部的工作量（1分钟一部、连续10个小时不吃不喝才能干完），也将是力不从心。更何况，1个小时的视频，1分钟拉完，究竟能够有多高的识别准确率，也非常令人怀疑。所以，其实我们更加应该关心的问题是：技术能否帮助鉴别？事实上，这非常困难！目前最好的算法，也不过是识别皮肤裸露的部分，占画面的百分比而已。问题在于：肉色的都是皮肤？裸露的都是色情？通过计算机算法，理解一段文字的含义，尚且困难重重。“看”懂视频里的N个人在做些什么，哪有那么简单？更进一步的追问是：“哪怕算法能够准确的鉴别某个画面，甚至某个场景。算法能够判断这个场景，是属于正常的艺术，还是色情吗？如果还是色情艺术，又该如何评判呢？”说到底，在很长的一段时间，能够做出正确判断的，只能是人类，而非算法。而面对信息爆炸的现实，人力又是那么的不足……当我们谈到鉴别的时候，千万不要忘记对数量级的敏感技术的责任王欣在法庭上的名言：“技术本身并不可耻”引发了种种热议。但是，我们还是要深入的讨论“技术的责任”。如果从技术来说，存在一种可以准确鉴别色情图片、视频的算法，我们是否应该在手机、相机和摄像机上，安装鉴别芯片呢？是否应该在所有的网络传输节点，安装鉴别模块呢？是否应该在所有的桌面软件（浏览器、播放器）里，内置鉴别模块呢？是否应该在鉴别为真之后，彻底拦截、直接删除或者当场报警呢？技术并不可耻，那技术是否完全是中立的呢？播放色情视频的技术，就是恶的？而拦截色情视频的技术，就是善的？假设，我们设想这样一种视频格式：在正常视频数据里嵌入各种各样的元数据，以说明该视频的内容、分级、以及主要场景。然后，在全世界干掉所有其他的视频格式。然后，再强制所有的视频输出工具、视频编辑工具，在压制过程中，必须包含这些内容，而且还必须确保正确。再然后，再强制所有的视频播放器，实现对这种格式的正确解读，并确保在青少年（在我国，仅仅保护未成年人，国家还是不放心的）使用该播放器的时候，无法播放XXX视频。当然，最重要的一步，是软件能够准确识别使用者的年龄及被准许观看的范围（这也许涉及到可穿戴硬件，或者体内植入芯片等相关技术）。这样一个确保视频文件“干净文明”的技术体系，真的就是善的？各位看官，当这样的一种技术体系出现在你的面前，你不会觉得毛骨悚然？技术当然可以用来为善为恶，认定所有的技术全都中立，也不合理。但是，判断一项技术究竟是否符合伦理、道德与法律，是一个非常困难的伦理命题。猝不及防的时代也许，再过50~100年，当我们的后人来回顾最近这200年来的世界（1900~2100），会将之命名为“猝不及防”的时代。就像崔健在歌中唱的那样：“不是我不明白,这世界变化快！”不仅仅是中国，整个世界，都处在极速变化之中。当我们这些IT业内人士，在嘲笑那些无知的公诉人时，我们同样也有太多搞不明白的事情。不仅仅是个人搞不明白，专家、学者、政客、政府，全都搞不明白。随着技术的飞速变化，一个又一个全新的问题，出现在大家面前。冲击着所有人的观念，不断的宣告过去的经验正一一作废。在这种大时代下，一个又一个过去从来不可能出现的案件，恰恰成为我们观察世界变化的一个窗口。无论是今天的快播案，还是以前在美国发生的Napster案，都引发了大量的争议。也最终将改变我们对很多事物的看法。在猝不及防之下，很多人选择的紧紧抓住过去的经验，然后力图将过去的经验继续适用于现在。所以，公诉人才会自然的询问王欣：为何你们不一个一个的人工查看？在IT技术不断发展的时代中，值得关注的大案简直层出不穷。相比之下，快播案其实是个小案子。比如，我们如何看待美国的棱镜项目？我们如何看待网络赌博、网络诈骗、以及ISIS借助网络的力量不断发展新成员？我们如何看待技术发展背景下，犯罪手段的不断发展？我们又如何看待技术发展背景下，监控手段的不断发展？作为普通人，所谓看待，其实我们完全可以不知不觉。也可以不管不问。但是，猝不及防的政府，却又必须想办法应对！猝不及防的法律体系，也必须随之而变！我看过很多（官场类）穿越小说，主人公回到70~80年代，凭借对于世界大势的准确把握，在官场混得顺风顺水。但是在现实时间，我们每一个人都无法真正的把握未来。作为身在其中（无论世界哪个国家，哪种政府）的政府官员，却又必须做些什么，而且还不能做错了。面对这种未知的未来，也许他们才是最为惶恐、无助的一群人。结语这篇文章，我是一边想，一边写的。这么难的问题，我其实根本想不清楚，当然也会写得乱七八糟。只能说声抱歉了！"
  },
  
  {
    "title": "四十不惑——写给2016年的自己",
    "url": "/my_blog/posts/40-years-old/",
    "categories": "Dairy",
    "tags": "Essay",
    "date": "2016-01-03 23:31:00 +0800",
    





    "snippet": "马上就要40岁了，作为一个儒家信徒，“十五有志于学、三十而立、四十不惑……”，我还是比较了解的。大概在10岁的时候，我读5年级，第一次接触Apple II电脑，从那以后，我就再也没有改过自己的志向，可以说立志甚早。30岁的时候，2006年，我正好加入了印客网，成为公司的技术负责人。差一点就算‘而立’了。可惜，2009年，印客网倒闭了。在快要满40岁的时候，我常常在问自己：“我现在，能够算不惑了吗？”一、怎么样才算不惑呢？不为人言所惑：网上传播转发几十万，无数的人点赞、点评。对于我来说：究竟是不是有道理，还是得自己看过再下判断。朋友拼命给我推荐，各种拍胸脯保证。虽然我完全信任他的人品。但是他的判断，依然不能代替我的判断。不为潮流所惑：其实更难。仅仅举一个技术圈子里的例子。前几天真阿当与尤雨溪关于前端技术的争论。其实，有一个观点我从本质上是同意的：技术圈子里，有太多一阵风似的新潮流。也有太多人，缺乏判断能力，然后随波逐流。那么，如何才能不受潮流迷惑呢？说到底，还是靠经验判断。然后就是对于“真实问题域”的准确把握（其实还是来自于经验）。新技术学得快的小伙子很多，不浪费时间的技术人员太少了。（以上观点，不针对特定技术框架的优劣，我离开前端圈已经超过10年了。）不为自己所惑：其实，最擅长迷惑我们的，是我们自己。低估或者高估自己的能力；冲出去创业，然后自己感动了自己；形成里自己的一套“理论”，然后不听人劝。说到底，是不是能正确的认识自己？认清自己的能力，认清自己的目标，认清自己的弱点，认清自己的软肋。二、我现在能算不惑吗？网络上的言论，生活中的言论，我听得很多，但是现在越来越没有兴致，冲出去与人争辩了。并不是我没有自己的看法，而是往往感觉我与对方的分歧，没有达到值得我花费那么多的时间去阐明差异。是的，我越来越相信：“没有完全彻底错误的观点，与人争辩的过程，如果能够理性平和的进行，往往是一个探寻各自背景与先设的过程。最终大家都不可能说服对方，最好的结果，也无非是相互理解而已。”更多的时候，我愿意和相熟的朋友一起闲聊，或者深谈。或许他的某些话，会对我有重大启发；也或许我的某些话，会对他们有启发。这种交谈非常有益，只是值得深交、深谈的朋友，的确是不多。趋势、潮流、天下风云，当然是很多人都乐于了解和谈论的内容，但是能够有定见的人，实在太少。在IT技术（软件研发、管理、及开源）这些领域，我还算略有一些定见，毕竟也算是业内（资深？）人士嘛。我对于IT技术的总体趋势的看法是：经过之前近半个世纪的飞速发展，IT技术将要达到某种平缓增长的阶段，越来越多的技术探索，将会围绕深挖潜力展开。当然，这篇文章，就不展开了。至于认清自己，大概也有了一些眉目。在之前的一篇文章中《Free Software vs. Open Source》我分析了两者的区别：自由软件的目的，是更多的自由，而开源软件的目的，是更好的软件。而我最大的追求，的确是“更好的软件”。围绕这个目标，我认为开源很重要，软件工程很重要，敏捷很重要，企业文化很重要，以上等等要素，无非是为了创造更好的软件服务的。甚至：我对于开源的开发，也仅仅是手段，而非目的。我非常喜欢的一位网络作家徐公子胜治，在《灵山》一书中曾经写到：“所行即所愿，应为则愿为。”回顾自己多年来的探索与思考，我也更加坚定了自己继续在这个领域探索下去的心愿。从以上的角度而言，不惑于人言，不惑于潮流，不惑于前路。我应该已经算是不惑了吧。三、40岁以后的规划家庭第一：当然，最好全家人都健健康康、平平安安，然后一起度过很多幸福快乐的日子，一起旅行去很多美好的地方，一起欢聚一堂，吃各种各样的美食。这个是最重要的。在华为至少再奋斗6年：在华为工作2年之后，我终于下决心签了《奋斗者协议》，8年，是一轮换工号的时间。所以，这个规划目前看起来比较靠谱。另外，我也认为：华为这个环境，在其中探索如何开发更好的软件，是一个足够大，足够好的平台，虽然肯定会有诸多不爽，但是都不会导致我放弃自己的目标。做一个更好的架构师：我的技术，一直属于驳杂不精的路子。我得按照自己写的《论架构师的自我修养》那样来要求自己。提升自己的基本功，补上一些明显的短板，成为一个更好的架构师。学点道家的东西：我在18~24岁时，主要在看佛家的东西，这严重的影响了我的世界观。在之后的10多年，我一直在看儒家的东西，这深刻的影响了我的人生观。今后，我会多看一些道家的东西，也提升一下自己的方法论水平。（以上看法，肯定会有各种不同角度的不赞同，仅仅是一己之见而已）docker-console：这是我在写的一个开源项目，自我感觉很有价值，计划在2016年完成1.0。《借助开源项目，学习软件开发》：这本书从2012年开始写的，已经拖了太久了，今年必须写完。每天背20个单词 or 学习英语30分钟：争取在儿子18岁时（6年以后），能够和他一起出国留学。保持运动：这个似乎不难，就按照现在平均每周3~4次、每次5~6公里的慢跑运动量，就挺好的。至于其他的，就随缘了。"
  },
  
  {
    "title": "2006年的老PPT《Ajax技术地图》",
    "url": "/my_blog/posts/ajax-ppt/",
    "categories": "Thinking, IT",
    "tags": "WebFrontEnd",
    "date": "2016-01-02 23:53:00 +0800",
    





    "snippet": "差不多10年时间了，当初是受江南白衣的邀请，去广州的BEA User Group做的一次技术分享。现在再回头来看看自己当年的很多认识与想法，基本上还是没有偏差的。只可惜，后来没有继续混前端圈啊。"
  },
  
  {
    "title": "你是从什么时候开始放弃学习的？",
    "url": "/my_blog/posts/give-up-learning/",
    "categories": "Dairy",
    "tags": "Essay",
    "date": "2015-12-12 23:40:00 +0800",
    





    "snippet": "一、背不出3x5的小女孩之前网上曾经流传了一个有趣的视频，一个小女孩，在镜头前大哭，因为她只能背出1x5得5，2x5得10，始终记不住3x5一十五。“我永远都记不住这3x5，这3x5太难了！”说实话，我很为这个小女孩的未来担忧，不是因为她的背不出这样一个简单的乘法口诀，而是她给自己下的定语：“我永远都记不住！”这样的断语，往往代表这一种否定自我的心态：“完了，我已经无法战胜这个困难了，我想放弃了！”二、没有信心自己看懂的儿子2周前，我儿子生病有一天没有去上学，等到晚上我回到家时，他拿着一本数学书过来找我，让我帮他讲解某个概念。我拿着书给他讲了两段，然后他就“噢”了一下，表示已经懂了。于是我问：你刚刚在过来找我之前，没有自己看过这一段？他说：没有。我又问：也就是说，你自己都还没有看过书，就感觉自己不懂，直接就来让我讲？他没说话。于是我又说：如果这是你自己都能够看懂的内容，为啥你会先选择让我来帮你讲呢？这时候，我也同样开始担忧起来，不是因为他搞不懂某一个数学概念，而是“他尚未尝试，就打算放弃了。”三、那些不再学习的成年人在上一篇文章关于终生学习的文章中，我表达了2个观点，一、无法终生学习的人，是因为没有从学习中找到乐趣。二、教育最大的目标，是让人爱上学习。但是，对于很多成年人来说，这样的观点会非常有用——特别是用来自我辩解的时候：“我读书的时候，老师没有把我教好。都怪这中国的应试教育”。当然，成年人在放弃学习之后，学会了一项最为重要的技能——寻找借口：  工作实在是太忙了，家庭也花费了我大量的精力！  这些XXX，对我有用吗？没用的东西，为啥还要浪费时间去学？  (针对某某新技术)这种东西一点都不好用，还没有我现在用的XXX好！  我已经离开学校太久了，捡不起来了。  ……事实上，他们只是丧失了自学的能力，更进一步说——他们丧失了自学的信心。四、结语最近，你在学什么新的东西吗？如果没有，你是从什么时候开始放弃学习的呢？如果已经放弃，你找到了什么好借口呢？"
  },
  
  {
    "title": "聊聊终生学习这件事",
    "url": "/my_blog/posts/Talking-about-lifelong-learning/",
    "categories": "Dairy",
    "tags": "Essay",
    "date": "2015-11-30 23:34:00 +0800",
    





    "snippet": "在一个很有深度的微信群里，朋友在聊着关于“终生学习”的事情。我自诩也算是个常年热爱学习的人，所以也想整理一下自己对终生学习的看法。为什么终生学习是一个值得讨论的话题？为什么没有人讨论：“终生吃饭”、“终生呼吸”这样的话题呢？因为这毫无意义，任何一个活人，只要他还活着，就必定需要呼吸、吃饭。否则，生命就会终止。但是，从来没有听说过，有人因为不学习，就死了！或者换句话说：只有刚性需求，才有可能坚持终生，甚至无需坚持，都必然能够做到。而那些居然会终生学习的人，才是一个值得讨论的话题？为什么有人能够终生坚持学习？首先，这就是个错误的问题。因为如果有人能够终生学习，那么他就一定不是靠自己的意志力，勉力坚持下来的。而是因为学习本身，就会给他带来某种乐趣、享受、快感。反之，对于这种人而言，如果缺乏学习的机会、学习的条件，他反而会难受、会痛苦、会抓狂、甚至会崩溃。把话题扯远一点，聊聊跑步的事情。我在开始跑步之前，从来不认为自己会喜欢跑步。甚至一直认为：那些能够坚持跑步的人，是很有意志力的家伙。但是，后来我才发现，在跑了一段时间之后，跑步本身就会给我带来乐趣。而这种乐趣会牵引我，在不跑的时候，甚至浑身难受，非得出去跑上几公里，出了一身汗，才能爽快起来。那些终生学习的人，从学习中获得了什么乐趣？以我自己的经验来看，学习本身就能够获得很多乐趣：  发现未知，收获惊奇：比如说看一场TED的演讲，会令我大开眼界  融汇贯通，触类旁通：比如说因为看一本生物学的书，让我想通了一些社会学的问题  慎思明辨，不受人惑：了解的知识与信息越多，就越不容易被人忽悠，如果再有一些起码的逻辑思维能力，就更好了  抵挡孤独，排遣寂寞：当然，有很多其他的办法也能做到排遣寂寞，但是读书也许是最为利大于弊的方法之前，我还在知乎回答过一个类似的问题《读了很多书，但是都忘掉了，那么读书的意义又在哪里？》，也可以算是“终生学习”的益处。这个问题可以转换为：通过读书，我们能够收获哪些，记忆以外的东西？  情感，有些小说，我已经不记得书中的情节，不记得主人公的名字，但是当初的感动，直到现在我还记得。这不是普通的记忆，而是某种情感的经历。虽然没有经历过别人的人生，但是我们体会过别人的情感。  能力，这个可以再细分为很多种。比如，体会他人情感的能力；豁达大度，放松心情的能力；在纷繁复杂的事物中，看透本质的能力；在独自一人时，找到乐趣的能力；这些能力，需要通过阅读不同的书，然后反复体会，才能获得。  心境，某些书，我们读到某些段落，甚至某些句子。突然有豁然开朗的感觉。仿佛又对这个世界，对自己的人生，多了一层的理解。有了这样的理解，我们的心境便会有所不同。虽然事后，我们甚至会想不起，当初读到的，是哪一段话。  气质，一开始读书，你会迷茫。接着读，会小有所得。接着读，会得意洋洋。接着读，会回到迷茫、甚至惶恐。接着读，又会小有所得。渐渐的，你的气质就会有所不同，既不会盲目自大，又不会盲目自卑。书读得少的人，往往就没有这种怡然自得的气质。  地图，好读书不求甚解。但是，却要在读书的过程中，建立大局观，建立地图意识。具体的知识点可以不必记忆，但是各种知识范畴，与范畴之间的相互关系，则要越来越清楚才好。  品味，或者说鉴赏力。不仅仅是对于好书、烂书的鉴赏力，甚至通过读书，也能够对其他的事物，有较为靠谱的鉴赏力。为什么不是所有的人，都能获得这样的乐趣？说实话，这个问题我不知道如何回答。但是我可以分析一下自己的情况。为何我不能从任何学习中，获得乐趣？我的学习爱好非常广泛，除了我的本行软件开发之外，我还喜欢：物理、化学、生物、文学、历史、心理、教育、政治、法律、经济、社会、哲学等等等等。但是，除了外语。我曾经下了无数次的决心，制定了无数次的计划，想要学外语，想要背单词，想要……但是，至今依然羞于见人。在自我分析之后，我的结论是：其他的学习，都能够使我较快的得到正反馈，更由于举一反三的原因，在我想要学习新的学科时，也不会感觉太过困难。但是，外语是“一座大山”，在翻过这座大山之前，我还没有感受到任何乐趣，就已经精疲力竭了。或者，也可以认为：我始终没有找到正确的外语学习方法，使自己在学习的过程中，每一步有每一步的收获，每一段有每一段的乐趣。在想通了这一点之后，也许我以后会突破自己学习外语的魔障了。但是，至于其他人，也许最大的悲哀就在于，他们从来没有在任何学习的事情上，找到过乐趣。教育最大的目标是什么？经过上面的这些讨论，最终的结论其实是“顺理成章”的。教育最大的目的，就是让人爱上学习！如果学校、教师、家长，能够做到这一点，那么他们就是成功的。否则，无论孩子学习成绩多么优秀，考上了什么样的名校，都是最大的失败。也许，我们可以从各种各样的角度来批判当今的中国教育，我想：如果学生们无法享受到学习的乐趣，无法成为一个乐于终生学习的人。他们一旦离开学校，就再也不想学习，而且终生痛恨学习。这样的教育成果，就是教育最大的悲哀了。"
  },
  
  {
    "title": "论架构师的自我修养",
    "url": "/my_blog/posts/self-cultivation-of-architects/",
    "categories": "Thinking, IT",
    "tags": "Essay",
    "date": "2015-10-25 21:59:00 +0800",
    





    "snippet": "##引子架构师，当然是脑力劳动者，但是，同样是脑力劳动也存在重大的差别。有一类脑力劳动的成果，是比较容易被评价的。或者能够判断其对错：比如考试的分数；或者能够比较其高下：比如两个人下棋分出输赢；或者能够交由市场来判断：比如某种UI/UE设计，我们可以通过数据统计，了解其受用户欢迎的程度。但是，架构设计只是软件开发过程中的一个环节，而在这个多人协作的场景中，我们很难单独评价架构的优劣。由于硬件、软件、部署、人员、测试、用户、市场等众多的差别，即使是非常相近的两个系统，我们也很难判断两个架构孰优孰劣。比如：eBay的架构与Taobao的架构哪个更加优秀？在交付拖延的时候，我们可以将问题归咎于开发团队的效率低下。在出现质量问题的时候，我们可以将问题归咎于测试团队的疏忽大意。在负载撑不住的时候，我们可以将问题归咎于运维团队不够专业，甚至是竞争对手的DDoS攻击。那么，在出现什么样的问题的时候，我们可以将责任归咎于架构呢？所以，现状就是：架构师是一个很难做好的职业。但是，从某种意义上来说，又是一个非常容易混的职业。（当然，混是另一种需要持续修炼的高端技能。）因此，架构师也是特别需要强调自我修养与职业道德的职业。##一、什么是架构？什么是架构师？对于架构的定义，有很多种，我比较同意的一种定义是：「架构是一组关键决策。」这样的决策包括但不限于：使用什么操作系统、语言、框架与类库；是否在架构中使用某种全新的技术方案；优先考虑或满足哪一方面的需求以及如何在技术上实现这一点；更进一步的，面对一个不断发展的系统，哪些部分需要优先重构or优化、哪些决策需要重新考虑甚至修改；再进一步，某些前瞻性的考虑，也是架构决策的一部分，等到问题发生再来解决，同样是架构方面考虑不周。能够做出这些决策的，就是架构师。或者说，在一个团队中，实际的最终决策者，就是事实上的架构师。无论他被赋予什么样的头衔。在一个团队中，我们总能找到这样的角色（无论他做得是不是称职），而一个优秀的架构师，就是通常能够做出「较多」正确决策的人。##二、架构师的工作是什么？仅仅做出决策是不够的，我们可以从时间线上来观察：在做出决策之前，架构师需要足够了解自己的「可选项」，无论是用户的实际需求，还是最新出现的技术和框架，并且都得要有足够深入的理解（否则就是在拍脑袋做决策）。这时，架构师的角色，是一个「研究者」。在综合各项因素，甚至是相互矛盾的各种需求之后，在考虑到团队的实际能力与交付压力之后，在平衡了先进性与可靠性、扩展性与稳定性、重要性与紧迫性之后，架构师做出了一组决策。这时，架构师的角色，是一个「设计师」。为了确保自己架构设计能够被正确的实施和贯彻，架构师需要与研发团队密切配合，或者说服、或者引导、或者辅导、或者鼓动、甚至需要某种「强有力的推进手段」，这对于架构师的「硬实力」与「软实力」都提出了很高的要求。这时，架构师的角色，是一个「Top Coder」。在某些大公司，架构师还需做很多的文档工作，这些文档并不是交付给开发团队的说明性文档。而是某种向上级证明某某方案可行，某某架构有效的证明性文档。这时，架构师的角色，是一个「说服者」。从上面的描述，我们也可以发现，架构师像是一个千面人：需要与上下前后左右的不同角色打交道；多面手：需要了解甚至掌握诸多不同的知识和技能。要想做好这个工作，提升自我修养，是根本之道！##三、什么是架构师的自我修养？###1. 以理解用户为荣，以想当然尔为耻架构师不是产品经理，不是市场人员，不是客服人员。但是，如果只懂技术，只考虑技术，不能深入的理解用户的需求（强调一下，用户的真实需求！），就会做出「纯粹追求技术先进性」的想当然尔的架构出来。###2. 以脚踏实地为荣，以夸夸其谈为耻架构师当然需要很强的表达能力，甚至还需要有忽悠能力。但是，无论是表达还是忽悠，都必须以「实力为基础」。如果不能脚踏实地，积累实力，只会夸夸其谈。那就相当可耻了。###3. 以身先士卒为荣，以指手画脚为耻还是那个经典的台词「兄弟们跟我上」与「弟兄们给我上」的区别。如果对于一些困难的问题，架构师自己都搞不定，却摆出一副胸有成竹的表情：「这不是很简单的吗？你到网上搜一下嘛，资料大把大把的。」这种做派，就很令人不齿。###4. 以实践检验为荣，以道听途说为耻如果某种技术，架构师自己都没有做过评测，没有看过框架代码，没有在过去的实践中应用过。却因为一篇文章，一个讲座，甚至某个大公司曾经用过这样的证据，就将一种技术引入到项目之中。这样的决策，很少有不失败的。###5. 以先见之明为荣，以后知后觉为耻「过度设计」当然是一个贬义词，但是架构师一定要有前瞻能力。不能等到火烧起来了，再去救火。虽然在企业里，的确存在「救火英雄升迁快」的现象。但是，一个优秀的架构师，应该以「消除隐患于无形」为荣。###6. 以兼容并包为荣，以独断专行为耻在架构领域，很少有唯一解、最优解。大多数时候，我们只能在多个各有优劣的方案中，反复权衡，考虑取舍。这时，开阔的视野、开放的心胸，就显得尤为重要。如果一味的独断专行，听不进团队里其他同事的意见（尤其是那些学习了乔布斯的架构师），就会非常危险。###7. 以主动学习为荣，以固步自封为耻技术的进步实在太快，曾经有一种夸张的说法：「平均每天诞生一种革命性的、颠覆性的技术」。虽然有很多新技术，都在如此宣称，作为架构师，却必须不断的主动学习，了解，甚至在某些领域做一些初步的尝试。这样的过程，在架构师的整个职业生涯中，都无法停止。一旦产生了「固步自封」的念头，这个架构师也就「不过尔尔」了。###8. 以勇猛精进为荣，以疏忽懈怠为耻架构师是一份困难的工作，更加重要的是：随着架构设计的完成，架构师的工作，才刚刚开始。接下来的任务，会非常琐碎，也许会更加困难。这份工作的主题是：「架构看护」尽可能保护架构，不会随着时间的推移，随着特性的增加，渐渐的变得腐化。很多最初设计得相当优秀的架构，到最后变得不堪入目。说到底，还是要怪架构师没有能够坚持自己当初的决策。##四、如何提升架构师的自我修养？在《中庸》里，子曰：「好学近乎知，力行近乎仁，知耻近乎勇。知斯三者，则知所以修身；知所以修身，则知所以治人；知所以治人，则知所以治天下国家矣。」简单的翻译解释下：好学就能显得有智慧（至少能有知识），力行就能不脱离群众（因不忘本而能具备仁慈之心），知耻就能守底线（有所为有所不为之勇）。能做到这三点，就算是懂得如何提升自己的修养了。懂得如何提升修养，才能懂得如何驾驭团队。懂得如何驾驭团队，才能创作出真正伟大的，甚至风行全球的软件产品来。这就是我理解的架构师的中庸之道，与诸位共勉吧。本文首发于《程序员》"
  },
  
  {
    "title": "试译：开源项目成功的十条准则",
    "url": "/my_blog/posts/Ten-Rules-for-Open-Source-Success/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2015-10-06 22:00:00 +0800",
    





    "snippet": "原文：Ten Rules for Open Source Success《开源项目成功的十条准则》Everyone wants it, lots of people try it, yet doing it is mostly painful and irritating. I’m speaking about free software aka open source. Today I’m going to summarize 30 years of coding experience in ten management-proof bullet points.每个人都想去做，也有很多人跃跃欲试，但是真做起来却常常会令人痛苦和愤怒——我说的是自由软件，或者更宽泛一些的开源软件。今天我要将自己30年来的开发经验，总结为开源软件的十条成功法则。庄表伟：每个人都需要它，很多人跃跃欲试，但是干起来却往往会令人痛苦或者愤怒。我在谈论的是自由软件（开源软件）。今天，以我30年来的开发经验，我想要总结以下10条经营要点：余晟：每个人都想去做开源，也有很多人尝试了，但是真正去做却常常收获痛苦和恼怒。我所说的这回事是自由软件，或者叫开源软件。今天我要总结自己30年来的开发经验，归纳为十条经得起实践检验的准则。魏永明：所有人需要它，很多人尝试它，但做起来却常常是痛苦的甚至会令人不快——我说的是自由软件，或者更宽泛一些的开源软件。今天，我将把本人三十年的编码经验总结为开源软件的十条成功法则。八刀：今天我将把我三十年的开发经验囊括在以下十点。1、People Before Code1、人比代码重要This is the Golden Rule, taught to me by Isabel Drost-Fromm. Build community, not software. Without community your code will solve the wrong problems. It will be abandoned, ignored, and will die. Collect people and give them space to work together. Give them good challenges. Stop writing code yourself.这是一条黄金法则，是Isabel Drost-Fromm【注1】教给我的。我们要建立的是社区而不是软件。没有社区，你的代码就会用来解决错误的问题。然后这些代码会被抛弃、忽略，最后死去。正确的做法是把人集结起来，给他们协同工作的空间，给他们充分的挑战。切记不要亲手来写代码！注1：Isabel Drost-Fromm是Apache软件基金会的成员，Apache Mahout的创立者之一。庄表伟：这是一条黄金法则，是Isabel Drost-Fromm教给我的。建立社区而非软件，没有社区，你的代码将会去解决错误的问题。然后它将会被抛弃、忽略，最后死去。将人汇集起来，给他协同工作的空间，给他们足够好的挑战，停止自己写代码！余晟：这是金科玉律，是Isabel Drost-Fromm教给我。我们要建立的是社区而不是软件。没有社区，你的代码就会用来解决错误的问题。然后这些代码会被抛弃、忽略，最后死去。正确的做法是把人集结起来，给他们协同工作的空间，给他们充分的挑战。切记不要亲手来写代码！Holm：..他们足够好的挑战，停止自己写代码！断句有问题，读起来像“让他们停写”2、Use a Share-Alike License2、使用“以相同方式共享”的许可证庄表伟：2、使用‘以相同方式共享’型许可证余晟：2、使用‘以相同方式共享’的许可证Share-alike is the seat belt of open source. You can boast about how you don’t need it, until you have a bad accident. Then you will either find your face smeared on the wall, or have light bruising. Don’t become a smear. Use share-alike. If GPL/LGPL is too political for you, use MPLv2.“以相同方式共享”是开源的安全带。在遇到严重的事故之前，你大可吹嘘自己完全不需要它。一旦出现事故，你就会发现自己满脸污垢，或者‘轻微擦伤’，不要成为一个“伤员”。使用“以相同方式共享”的许可证吧，如果你觉得GPL/LGPL太过于政治化，那就用MPLv2。庄表伟：‘以相同方式共享’是开源的安全带，你可以吹嘘自己是如何的不需要它，直到你碰到糟糕的‘意外’。然后你会发现自己头撞南墙，或者‘轻微擦伤’，不要成为一个‘伤员’。用‘以相同方式共享’型许可证吧，如果你觉得GPL/LGPL太过于政治化，那就用MPLv2。余晟：‘以相同方式共享’是开源的安全带。在遇到严重的事故之前，你大可吹嘘自己完全不需要它。一旦出现事故，你就会发现自己满脸污垢，或者还有轻微擦伤。你应当避免把自己搞砸，你应该使用‘以相同方式共享’的许可证吧。如果觉得GPL/LGPL太过于政治化，那就用MPLv2。3、Use an Zero-Consensus Process3、使用一个无需达成共识的协作流程八刀：零共识Seeking upfront consensus is like waiting for the ideal life partner. It is kind of crazy. Github killed upfront consensus with their fork/pull-request flow, so you’ve no excuse in 2015. Accept patches like Wikipedia accepts edits. Merge first, fix later, and discuss out of band. Do all work on master. Don’t make people wait. You’ll get consensus, after the fact.寻求事前的共识就像是在等待理想的人生伴侣，这简直就是疯狂。借助fork/pull-request这种模式，Github已经干掉了事前共识，所以在2015年的今天你没有任何借口坚持事前共识。你应当像维基百科那样接受修改。先合并，再修复，同时单独讨论。所有工作应当在master分支上进行，不应当让大家等待。有了既成事实，共识会随之而来。庄表伟：寻求前期的共识就像是在等待理想的人生伴侣，这简直就是疯狂。借助fork/pull-request这种模式，Github已经干掉了前期共识，所以在2015年的今天，你没有任何借口。例如像维基百科那样接受修改。先合并，再修复，然后附带进行讨论。在master分支上做所有的工作，不要让人等待。事实上，你会逐渐得到共识的。八刀：这听起来有点疯狂余晟：寻求事前共识就像是在等待理想的人生伴侣，这很疯狂。借助fork/pull-request这种模式，Github已经干掉了事前共识，所以在2015年的今天你没有任何借口坚持事前共识。你应当像维基百科那样接受修改。先合并，再修复，同时单独讨论。所有工作应当在master分支上进行，不应当让大家等待。有了既成事实，共识会随之而来。刘天栋：然后扩大进行体制外讨论。先上车，后补票，你会逐渐得到共识的。Holm：寻求前期的共识：预先达成的共识；事实上，你会逐渐得到共识的：最终，你能获得事实的共识。4、Problem, then Solution4、首先是问题，然后才是解决方案庄表伟：4、首先是问题，然后才是解决方案余晟：4、问题优先，然后才是解决方案Educate yourself and others to focus on problems not features. Every patch must be a minimal solution to a solid problem. Embrace experiments and wild ideas. Help people to not blow up the lab. Collect good solutions and throw away the bad ones. Embrace failure, at all levels. It is a necessary part of the learning process.教育自己和其他人，聚焦于问题而非功能特性。每一个补丁都必须是解决某个实际问题的最小化的解决方案。勇于尝试，勇于接受疯狂的想法。你还需要帮助他人，确保他们干的事情不会导致实验室的爆炸。收集好的解决方案，抛弃那些糟糕的方案。在各个层面上都应当宽容失败。这是学习过程中不可缺少的一部分。庄表伟：教育自己和其他人，聚焦于问题而非功能特性。每一个补丁都必须是解决某个实际问题的最小化的解决方案。勇于尝试，勇于接受疯狂的想法，确保实验室不会被炸掉。收集好的解决方案，抛弃那些坏的。在所有的层面上，拥抱失败。这是学习过程中不可缺少的一部分。余晟：你必须教育自己和他人，集中关注问题，而不是功能特性。所有补丁都应当是解决某个实际问题的最小化解决方案。你应当勇于尝试，勇于接受疯狂的想法。你还需要帮助他人，确保他们干的事情不会导致实验室的爆炸。请收集好的解决方案，抛弃那些糟糕的方案。在各个层面上都应当宽容失败。这是学习过程中不可缺少的一部分。Holm：…疯狂的想法，确保实验室不会被炸掉…：断句有问题。5、Contracts Before Internals5、首先约定，然后再完成内部实现庄表伟：5、首先约定，然后再完成内部实现余晟：5、约定优先，然后完成内部实现Be aggressive about documenting contracts (APIs and protocols) and testing them. Use CI testing on all public contracts. Code coverage is irrelevant. Code documentation is irrelevant. All that matters is what contracts the code implements, and how well it does that.要积极地记录约定（API与协议）并加以测试。要使用持续集成工具测试所有的公开约定。代码覆盖率是无关紧要的，代码文档也是无关紧要的。真正重要的是代码实现了哪些约定，以及它们是如何实现的。庄表伟：要积极的记录约定（API与协议）并测试它们。使用CI工具测试所有的公开约定。代码覆盖率是无关紧要的，代码文档是无关紧要的。一切的关键都在与约定的代码实现，以及他们是如何实现的。刘天栋：…一切的关键都在于代码如何实现约定，以及他们是如何良好地实现的。余晟：要积极地记录约定（API与协议）并加以测试。要使用持续集成工具测试所有的公开约定。代码覆盖率是无关紧要的，代码文档也是无关紧要的。真正重要的是代码实现了哪些约定，以及它们是如何实现的。6、Promote From Within6、从内部提拔Promote contributors to maintainers, and maintainers to owners. Do this smoothly, easily, and without fear. Keep final authority to ban bad actors. Encourage people to start their own projects, especially to build on, or compete, with existing projects. Remove power from people who are not earning it on a daily basis.将贡献者提拔为维护者，将维护者提拔为负责人。以流畅、轻松且无畏地方式来做。保留干掉‘害群之马’的最终权力。鼓励大家开始自己的项目，尤其是基于已有项目，或者与已有项目竞争的项目。每天持之以恒地检视并剥夺那些不再贡献者的权力。庄表伟：将贡献者提拔为维护者，将维护者提拔为负责人。这样做起来，将会顺利、轻松并且免于恐惧。保留干掉‘老鼠屎’的最终权力。鼓励人们开始自己的项目，尤其是基于已有项目，或者与之竞争的项目。剥夺那些不再每日贡献者的权力。刘天栋：…以流畅、轻松而无畏地方式来做。…每天持之以恒地检视并剥夺那些不再贡献者的权力。余晟：维护者应当从贡献者中提拔出来，负责人应当从维护者中提拔出来。整个过程应当会平稳、轻松，而不应当有任何担忧。你需要保留干掉‘害群之马’的最终权威。还需要鼓励大家开始自己的项目，尤其是基于已有项目的项目，或者与已有项目竞争的项目。对于那些不能每日做出贡献的人，应当剥夺他们的权力。7、Write Down the Rules7、将规则写下来余晟：7、明文记录规则As you develop your rules, write them down so people can learn them. Actually, don’t even bother. Just use the C4.1 rules we already designed for ZeroMQ, and simplify them if you want to.当你制定规则时，请将他们写下来，以便人们可以了解他们。事实上，你甚至都不需要亲自动手——如果你愿意，可以直接套用我们为ZeroMQ制定的规则C4.1，再按需简化。庄表伟：当你制定规则时，将他们写下来，以便人们可以了解他们。这样一点都不麻烦。如果你愿意的话，可以直接使用我们为ZeroMQ制定的规则，再加以简化。刘天栋：更简单的办法是，如果你愿意的话，可以直接使用我们为ZeroMQ制定的规则C4.1…余晟：当你制定规则时，请将它们写下来，以便人们可以了解他们。事实上，你甚至都不需要亲自动手——如果你愿意，可以直接套用我们为ZeroMQ制定的规则C4.1，再按需简化。8、Enforce the Rules Fairly8、公平地执行规则Use your power to enforce rules, not bully others into your “vision” of the project’s direction. Above all, obey the rules yourself. Nothing is worse than a clique of maintainers who act special while blocking patches because “they don’t like them.” OK, that’s exaggeration. Many things are much worse. Still, the clique thing will harm a project.用你的权力去执行规则，但不要强迫别人认同你对于项目发展方向的“愿景”。最要紧的是，你自己必须遵守规则。最糟糕的事情莫过于维护者自己形成了小圈子，仅仅因为“不喜欢”就拒绝其他人的补丁。好吧，这样说有点夸张了。不过，很多情况其实更加糟糕。还是那句话，小圈子对项目是有害的。庄表伟：用你的权力去执行规则，但不要强迫别人遵循你对于项目发展方向的“愿景”。首先，自己就要遵守规则。没有什么比一个维护者的小圈子，仅仅因为“他们不喜欢”就拒绝补丁，更加糟糕的事情了。好吧，这样有些夸张了。不过，有些事情会更糟糕。总之，小圈子会伤害一个项目。余晟：用你的权力去执行规则，而不要强迫别人认同你对于项目发展方向的“愿景”。最要紧的是，你自己必须遵守规则。最糟糕的事情莫过于维护者自己形成了小圈子，仅仅因为“不喜欢”就拒绝其他人的补丁。好吧，这样说有点夸张了。不过，很多情况其实更加糟糕。还是那句话，小圈子对项目是有害的。9、Aim For the Cloud9、以“云”为目标庄表伟：以云为目标刘天栋：以集思广益为目标Aim for a cloud of small, independent, self-organizing, competing projects. Be intolerant of large projects. By “large” I mean a project that has more than 2-3 core minds working on it. Don’t use fancy dependencies like submodules. Let people pick and choose the projects they want to put together. It’s economics 101.以小型的、独立的、自组织的、竞争性的（一群可以自由协作的）项目为目标，（市场）不能容忍大项目。所谓“大”，我的意思是一个项目包含了2~3个核心想法。要拒绝子模组那样花哨的依赖关系。让大家去挑选，并将他们选择的项目放到一起（工作）。这是经济学的常识。庄表伟：以小型的、独立的、自组织的、竞争性的（可以在云中部署的）项目为目标，（市场）不能容忍大项目。所谓“大”，我的意思是一个项目包含了2~3个核心想法。不要用那些花哨的类似于子模组那样的依赖。让人们去挑选，并将他们选择的项目放到一起（工作）。这是经济学的基本常识。刘天栋：以一群小型的、独立的、自组织的、竞争性的项目为目标，不要容忍大项目。所谓“大”，我的意思是一个项目包含了2~3个核心大拿，让人们自己去挑选并揉和他们选择的项目。余晟：开源项目应当以小型的、独立的、自组织的、竞争性的（可以在云中部署的）项目为目标。对于大项目，应当坚决避免姑息。所谓“大”，我的意思是包含了2~3个核心想法的项目。要拒绝子模块那样花哨的依赖关系。让大家去挑选，去把自己选择的项目放到一起。这是经济学的常识。10、Be Happy and Pleasant10、开心愉快最重要Maybe you noticed that “be innovative” isn’t anywhere on my list. It’s probably point 11 or 12. Anyhow, cultivate a positive and pleasant mood in your community. There are no stupid questions. There are no stupid people. There are a few bad actors, who mostly stay away when the rules are clear. And everyone else is valuable and welcome like a guest who has traveled far to see us.也许你注意到了，“创新”并不在我的建议列表中。它很可能排在第11或12点。总之，你需要在你的社区里培养一种积极的、愉快的氛围。愚蠢的问题，愚蠢的人都应当被踢出去。就算有“老鼠屎”，也会在清楚的规范下自动消失。剩下的人是则有价值的，我们欢迎有朋自远方来。庄表伟：也许你注意到了，“创新”并不在我的建议列表中。他很可能在第11或12点。总之，在你的社区里培养一种积极的、愉快的氛围，没有愚蠢的问题，也没有愚蠢的人。就算有‘老鼠屎’，也会在违反规则时被清理掉。其余的人是有价值的，我们欢迎他们像游客一样，远远的看着我们。刘天栋：就算有“老鼠屎”，也会在清楚的规范下自动消失…我们欢迎有朋自远方来。余晟：也许你注意到了，“创新”并不在我的建议列表中。它很可能排在第11或12点。总之，你需要在你的社区里培养一种积极的、愉快的氛围。愚蠢的问题，愚蠢的人都应当被踢出去。就算有‘捣蛋鬼’，也会在因为违规被清理掉。剩下的人是则有价值的，应当像对待远到的客人那样欢迎他们。ps.  第一次试着翻译，求各位朋友帮忙指正，多谢了！pps. 在诸多朋友的帮助下，再修订了一遍，有了不少自己的思考，仅仅是反映在了译文之中，没有一一说明，见谅。ppps. 徐定翔给了我一个非常好的建议：“我通常是译完隔天不看英文读一遍译文。把不符合中文表达习惯的部分润色一下。” 谢谢！关于作者：Pieter HintjensPieter Hintjens（1962年12月3日-2016年10月4日）是比利时软件开发者、作家，也是自由信息基础设施基金会（FFII）（一个反对软件专利的协会）的前任主席。2007年，他被《知识产权管理》杂志提名为 “知识产权领域最有影响力的50人 “之一。Hintjens于1962年出生于刚果，在东非长大。Hintjens曾担任iMatix公司的首席执行官和首席软件设计师，该公司生产免费软件应用程序，如ZeroMQ高性能消息库、OpenAMQ AMQP消息服务、Libero、GSL代码生成器和Xitami网络服务器。他积极参与开放标准的制定，是高级消息队列协议（AMQP）的原创者，数字标准组织的创始人，RestMS网络消息协议的编辑[8]RestMS采用Hintjens等人2008年为数字标准组织开发的点对点、共享相似、分支和合并模型（COSS）进行开发。在2010年2月之前，他一直担任wikidot.com的CEO，该公司是发展最快的维基托管服务之一。2010年，Hintjens被诊断出患有胆管癌，并成功通过手术切除。然而，2016年4月，它又复发了，他被诊断为末期胆管癌。2016年10月4日，Hintjens自愿接受了安乐死。"
  },
  
  {
    "title": "黑客的胜利——读《增长黑客》有感",
    "url": "/my_blog/posts/victory-of-the-hackers/",
    "categories": "Thinking, IT",
    "tags": "Hacker, OpenSource",
    "date": "2015-09-11 07:00:50 +0800",
    





    "snippet": "这本书在写的时候，我就知道，只是一直没有去看。作者是我在盛大创新院的前同事，所以在出版之后也很高兴收到了寄来的赠书。简单翻阅之后，就大为喜欢。只不过，我与大多数人喜欢的理由，大不相同：  也许90%的人，是因为这本在讨论「增长」，而我却是因为，这本书在讨论「黑客」。也许90%的人，会非常喜欢这本书干货满满的「案例」。而我却很遗憾，这本书对于「术」讲得太多，「道」却讲得太少!什么道？当然是黑客之道！  黑客文化的起源可以追溯到1961年，那一年麻省理工学院（MIT）终于得到了第一台PDP-1计算机。学院技术模型铁路俱乐部（Tech Model Railroad Club，TMRC）的信号动力委员会（Signals and Power Committee，S&amp;amp;P）把它作为最时髦的科技玩具，并由此产生了许多程序设计工具、术语、和整个文化氛围——这些，直到今日我们仍然依稀可辨。史蒂文·利维（Steven Levy）在《黑客》（Hackers）的第一部分中详细的记录了这段岁月。——《黑客道简史》E.S.R也许很多人会认为，黑客就是一帮搞计算机的高手。但事实上，E.S.R在另外一篇文章里，有很清楚的表述：「黑客的思维方式并不仅仅局限在软件黑客的文化圈内。也有人用黑客态度对待其它事情，如电子和音乐方面——其实你可以在任何最高级别的科学和艺术活动中发现它的身影。软件黑客对这些领域的践行者尊重有加，并把他们也称作黑客——有人宣称黑客天性是绝对独立于他们工作的特定领域的。」——《如何成为一名黑客》那么，黑客是一群什么样的人呢？1. 渴望了解世界，更擅长「深入」的了解世界为了能够了解世界，他们愿意想尽一切办法，甚至不惜做一些出格的事情。小时候，他们会拆玩具，拆闹钟，拆掉各种玩意。长大以后，他们会渴望阅读源代码，并且痛恨一切闭源的行为。所以，如果有一扇门是关着的，那对黑客就是一种挑战。而如果这扇门上了锁，那简直就是对黑客的侮辱。2. 痛恨无聊、乏味、低效，鄙视蛮干与蠢干这个世界上，有各种各样的蠢货，而最糟糕的那种：就是强迫他人和自己一样愚蠢，并保持愚蠢的家伙。在黑客的文化中，干成一件事，并没有太了不起。重要的是，手法必须巧妙，甚至能够给人带来观赏的乐趣，这样的成就，才能被称之为「Hack」。3. 死理性派大多数黑客，都是典型的理工男。当然，现在也许女黑客也有一些了。这些人，最重要的特征之一，就是非常理性，甚至较真。哪怕是在讨论那种「明显是幻想域的问题」，他们也会以严谨的形式，罗列出前后逻辑一致的一大堆证据。对于这种死理性派来说：数据和逻辑，是他们最喜欢的武器。推荐一部电影这是我近年来看到的，最具有可信度的黑客电影。其中有一段情节，是那群人通过翻找垃圾堆里的明信片，然后找到了一个爱猫的目标对象的邮箱。然后再发一封萌猫的邮件包含一个钓鱼网站，再由此而植入木马。。。这背后的逻辑，是「基于对人性的深入了解，进而找到了一个系统的漏洞」。这恰恰是最为典型的黑客的思维模式。只不过，应用于社会学的领域了。在这部电影中，这种手法被称为「Social Engineering」:  “人不能总藏在他的计算机后面，最大的安全漏洞并不是存在于什么程序或者服务器内，人类才是最大的安全漏洞”“所有黑客手段中最有效的、最伟大的幻想艺术——社交工程学”那么，这些与增长黑客，有什么关系？增长黑客，其实就是一群黑客，接到了一个「增长类」的任务，然后漂亮地「hacked」而已。在书中的很多例子，都有这样一些要素：「数据驱动、用户心理、巧妙的手法、惊人的成效」。如果我们阅读这本书，就是去学习这一堆一堆的案例，那简直就是买椟还珠，难免会有邯郸学步的危险。更加应该探寻的，是为何他们会干得这么漂亮？以及，如何才能在今后千变万化的市场中，不断地创造新的增长奇迹？成为一家「黑客友好型」的公司，甚至成为一家「以黑客文化为主导」的公司，是唯一的方法。难以想象，我们可以给一个家伙，冠上「Growth Hacker」的头衔，他就自然会为公司带来惊人的增长。如果这个公司，根本没有供「黑客文化生长的土壤」，我们只会看到一个又一个「Copy To China」的愚蠢案例。如何建立「黑客型组织」？1. 规定目标，不规定动作我们会设立目标，甚至设立看起来完全不可能的目标。但是：想要完成这样的「不可能的任务」，就不能规定任何「标准动作」——当然，违法的除外。2. 限制规模，不限制角色从来没有听说过，上下共有6~8个层级，等级森严的大型组织，会具有黑客型的气质。小团队，扁平化，是孕育黑客文化的关键土壤。在这种团队里，每个人都可能会承担一种以上的职责，甚至在必要时，每个人都能够补上他人的缺口。3.崇尚实力，不崇尚权威没有谁肯定是对的，除非事实证明他是对的。没有谁高人一等，除非他确实强悍到近乎无所不能。正如成为「黑客」的关键要素之一，是得到其他「黑客」的承认。一个黑客型组织的关键要素也包括：每个人的能力，都能够得到其他成员的认可。结束语：以黑客的方式来创业这段时间，越来越流行的一个词，叫做「精益创业」，在我看来：所谓「精益」，无非是死理性派的黑客们，在创业时的必然选择罢了。当然，这个话题又太大了，就此打住……最后，胜利属于黑客"
  },
  
  {
    "title": "「民可使由之不可使知之」应该怎样断句？",
    "url": "/my_blog/posts/Literacy-in-ancient-languages/",
    "categories": "Dairy",
    "tags": "Confucianism",
    "date": "2015-08-20 07:37:38 +0800",
    





    "snippet": "这个问题非常有意思，如果不仅仅讨论断句的话，就更有意思了。「民可使由之不可使知之」，这短短十个字，至少可以从中梳理出一堆问题：  民，指的是什么人？  使，如何训诂？  可与不可，究竟指的是什么？  由，如何训诂？  知，如何训诂？  这句话，目标受众是谁？  当然，最后：这整句话是什么意思？由于现代网络的发达，使得我们现在有很多好的工具，来帮助我们研究与考据，比如我经常用的http://ctext.org/confucianism就有很棒的搜索功能。当我想了解各个字的含义时，首先想到的就是在《论语》中搜索同一个字的其他用处。「民」字如何理解？原典要读好，最好是不离原典本身来理解。经过搜索，在论语中，包含字詞”民” 符合次數：49。简单复制一些如下：子曰：「道千乘之國：敬事而信，節用而愛人，使民以時。」子謂子產，「有君子之道四焉：其行己也恭，其事上也敬，其養民也惠，其使民也義。」樊遲問知。子曰：「務民之義，敬鬼神而遠之，可謂知矣。」問仁。曰：「仁者先難而後獲，可謂仁矣。」仲弓問仁。子曰：「出門如見大賓，使民如承大祭。己所不欲，勿施於人。在邦無怨，在家無怨。」子曰：「上好禮，則民易使也。」子曰：「善人教民七年，亦可以即戎矣。」我们发现，孔子经常会提及「使民」、「养民」、「务民」、「教民」等等内容，这些地方出现的民，我们基本上可以理解为：「被统治者」。对于统治者而言，「民」是「使、养、务、教」的对象。小结：孔子说的这一句话，我们至少可以确定，是讨论为政之道的。另外，我们还发现：「民可使」、「民易使」，是一种类似的句型，所以至少可以排除：「民可、使由之，不可、使知之」这样的断句。「可」与「不可」的解释目前，我们已经能够看到的解释，至少有三种：从告诫统治者的立场出发「可」代表着「应该」、「不可」代表着「不应该」。从统治者权谋的立场出发「可」代表着「能够被」、「不可」代表着「不能被」从现象描述的角度出发「可」代表着「有可能」、「不可」代表着「不可能」。从我的理解，以及多次阅读《论语》中与「民」相关章节得出的看法：孔子常常会告诫统治阶级，却不会说出什么「权谋指南」，更不会论述什么「可能」或「不可能」。在楼上诸位持「可能、不可能」观点的解释说，为了说明不可能，总要加上一句：「让所有的老百姓都明白是不可能的」。这个「所有」，从何而来？「民可、不可」的句式中，如果都是只所有的老百姓，那么让所有的老百姓都由之？就可能了？反过来，如果不是指所有的老百姓，那么：让一些老百姓知怎么就不可能了？「使」怎么理解？目前看来，「使」有两种解释：从《论语》的其他文本看，「使」多为「役使」，「驱使」，或者泛泛的理解为「治理」。从现代汉语的用法来看，「使」有「使之」、「使其」的含义。「民可使、不可使」，按照前一种理解，尤其是结合上一节的理解，应该是：「应该这样治理百姓；不该那样治理百姓。」而不是：「应该使老百姓如何如何；不该使老百姓如何如何；」再者，两个「使」字的解释应该一致，不能前一个是「役使」，而后一个是「使之」。「由」与「知」如何理解？理解由与知，不能仅仅从这两个字的训诂来看，要从根本上理解孔子主张的为政之道。子曰：「道之以政，齊之以刑，民免而無恥；道之以德，齊之以禮，有恥且格。」季康子問政於孔子曰：「如殺無道，以就有道，何如？」孔子對曰：「子為政，焉用殺？子欲善，而民善矣。君子之德風，小人之德草。草上之風，必偃。」不再一字一句的解释了，说说我的理解吧：在孔子看来，为政之道非常简单，就是统治者要以身作则，统治者自己要有德行，守礼节，做榜样。如果能够做到，那么老百姓就自然会跟从。做榜样，自然有跟从。统治者需要向那些跟从者，一一解释为何如此吗？从这样的理解出发，我们可以看到：「由」解释为跟从、听从，追随。是比较妥当的。「知」解释为知其所以然，是妥当的。总结的译文：对于老百姓应该做好榜样让他们追随；而不是跟他们解释来龙去脉。结合上文对「可使、不可使」的理解，不能将「不可使知之」解释为「不要让他们知道」，而是应解释为「不要采用详细解释的做法」。其他的一些看法  孔子是中国历史上第一位有教无类的伟大的教师，他是第一位开创平民教育的先行者。但是，如果你认为：他已经开始考虑全民普及教育，甚至认为政府应该普及九年义务教育，我觉得你肯定是想太多了。也把孔子太神话了。  其次，就算孔子是一个伟大的教育家，但是在这段话里，他也并非在谈论教育问题。而是在谈论为政之道。当政者能做好一个榜样，就已经是他的最高理想了。全面的，普及的教育民众，绝不是当时那个环境的人，能够想到的。  把「知」解释为「折」，我认为严重缺乏证据。至少我们在《论语》中搜索到的各种包含「知」的内容，都没有「折」的含义。因此，我认为廖名春先生曲解了。  在《郭店楚简》的《尊德义》中，的确出现了相似的段落。但是，我并不认为这就是《论语》中孔子的本意。后生小子，多有发挥，或者曲解以己意；或者因误解帮忙洗地，我觉得都有可能。  随着时代的进步，孔子的很多观点，的确是落伍了。虽然在当时是合理的。强行解释得符合现代观念，并无必要。延伸阅读知乎：民可使由之不可使知之」应该怎样断句？ "
  },
  
  {
    "title": "你的团队是池塘？还是舰队？",
    "url": "/my_blog/posts/team-pond-or-fleet/",
    "categories": "Thinking, IT",
    "tags": "Management",
    "date": "2015-08-13 17:45:00 +0800",
    





    "snippet": "最近有两个朋友，围绕着团队与鲶鱼的问题，展开了激烈但却友好的争论。相关的文章如下：  你的团队里有几条鲶鱼？ 余晟以为  团队是团队，鲶鱼是鲶鱼 雨打沙滩点点坑  再论团队与鲶鱼 余晟以为  鲶鱼和团队有关系吗？ 雨打沙滩点点坑我一直想说点自己的看法，但是却一直没想透彻，也没有找到整块的时间，一口气表达出来。直到现在，因为航班更改，我有了差不多一个小时的时间，可以在这里简单的谈谈。仓廪实而知礼节、保暖而后思淫欲当我看到余老师，在讨论团队需要鲶鱼的时候，我的第一反应就是：那是一个令人羡慕的，既有钱、又有闲的团队。如果他们没钱，只怕会一心只想着怎么挣钱。如果他们没有空闲，只怕也没空想着加班以外的事情。当一个团队，时间金钱都逐步充裕起来以后，才会有机会考虑：团队建设、企业文化之类的事情吧。当一个团队，能够稳定的发出每个月的工资，而且大家都在乐观的期待年终奖金时，老板才会考虑5年规划、10年战略、甚至百年老店吧。总之，是令很多创业团队羡慕的事情啊！(我知道有那种，一开始就拿了大笔风投，先豪华装修办公室的「创新、fashion」的公司，但是，那种公司我一直认为他们不过是一群有钱烧的幸运儿而已。)叟不远千里而来,亦将有以利吾国乎?2012我从盛大创新院出来，进了华为。最大的感受，是企业文化上的巨大冲击。盛大是一家非常有创新精神、非常有游戏精神的公司，09年我刚进公司的时候，整个公司上下洋溢着一种乐观的气氛。「我们公司很有钱，银行里有花不完的美金，所以我们要招揽最优秀的人才，付给他们最高的工资，让他们来做最酷的事情！」而在华为，大大小小的老板们，都太实在了。「不要跟我谈那些虚的」，他们会像梁惠王那样问「叟不远千里而来，亦将有以利吾国乎？」如果一件事情，看不到收益，最终不能够赚到钱，或者无助于更好的赚钱，那就「一切休提」。公司顺利发展到一定的程度，有钱到一定的程度。真的会有老板，会忘记自己的初衷「为了赚钱」。而去追求一些听起来更加「高大上」的理念和价值观。令我感到惊讶的，是华为这么一个大公司，一直能够「不忘初心」！池塘与舰队，有何区别？在团队中引入鲶鱼，内里隐含的，其实是一个池塘的隐喻，或者说：「生态隐喻」。将团队比喻为一个活着的，需要长期维护的生态系统，因此「生物多样性」非常重要，单一物种会导致生态群落的迅速衰亡。但是，我并不认为这个隐喻是足够恰当的，也许舰队（或者仅仅是一条船）会更加恰当一些。生态群落的目标很简单：「维持自身的存续与发展」，至于发展成什么样子，是不是为扩张，是不是会进化，是不是会生养众多，都不是要紧的问题。而舰队的目标会非常明确：「去向某个目的地、尽可能快、确保安全、如果是运输的话，最好能够多运一些」。在舰队里，需要各种角色，这些角色不是为了多样性而存在的，而是为了共同的目的相互协作而存在的。如果我的团队需要招揽一个新的人才，我需要考虑的是：他能不能帮助大家更好的找到方向；能不能让船开得更快、更稳；能不能确保大家在漫长的海上航行中不会闹事、心情愉快；能不能……总之，一切的判断依据，是「是否有利于达到舰队的目标！」并非为了多样性而多样性，而是为了追求确定的目的，而追求多样性。新教伦理与资本主义精神当我发表以上这些言论的时候，也许会有人一边阅读，一边嗤之以鼻。「理想主义」、「改变世界」、「宽容创新」等等词，会浮上他们的心头。而我则联想到了马克斯·韦伯的名著《新教伦理与资本主义精神》。在书中，作者描述了这样的观点：「既然说，上帝的救赎不在教堂里，那么，教徒们怎样在尘世中体现上帝的荣耀和表现自己是上帝的选民呢？……假如成果伴随获利的结果，它被认为是种上帝赐福给信徒的显示，这也显示上帝笑纳他经济生活的方式。」直白一点说：「只要你能赚足够多的钱，就能够证明你是足够虔诚的基督徒」。反过来说，「如果你虔诚却一贫如洗，那就证明上帝都没有在帮你」。再直白一点说：「如果苹果公司不是像现在这样，大赚特赚。所谓改变世界，不过是一家已经倒闭的公司的臆想而已」。结论忘掉鲶鱼，忘掉多样性。深入的思考：什么样的团队，才是最能赚钱的？延伸阅读：从软件工程到研发管理——畅读版"
  },
  
  {
    "title": "从前慢——我希望有一个「慢社区」",
    "url": "/my_blog/posts/I-wish-there-was-a-slow-community/",
    "categories": "Dairy",
    "tags": "Community",
    "date": "2015-07-05 20:45:00 +0800",
    





    "snippet": "我不了解木心，他的文章我也从未看过，只有一首诗，倒是给我留下很深的印象：记得早先少年时大家诚诚恳恳说一句 是一句　　清早上火车站长街黑暗无行人卖豆浆的小店冒着热气　　从前的日色变得慢车，马，邮件都慢一生只够爱一个人　　从前的锁也好看钥匙精美有样子你锁了 人家就懂了今天参加了TopITClub的第一次线下聚会，聊到我希望TITC成为怎样一个社区，现在理了一下自己的思路，其实就是一个「慢社区」。操作很麻烦融入也不易规矩很严格还要发帖、回帖、打好多字从第一次发帖到在社区里混个脸熟要花很长的时间到真正的交到一个朋友还需要花更多的时间虽然很慢、很费力却有可能交到一辈子的朋友现在回想起来，虽然我加入了很多很多的社区，但是到目前为止，我只在三个社区结识了真正的朋友：网易、JavaEye还有知乎。如果TITC，能够成为这样的一个社区，大家都不着急，也不功利。大家都慢慢来，也愿意用心。这就是我最向往的社区了！"
  },
  
  {
    "title": "大公司效率低最根本的原因是什么?",
    "url": "/my_blog/posts/big-company/",
    "categories": "Thinking, IT",
    "tags": "Management",
    "date": "2015-05-31 17:45:00 +0800",
    





    "snippet": "  首先：小公司为什么会变大？  然后：在变大的过程中，发生了什么？  继续：为何大公司效率会低？  最后：为何大公司，快不起来了？一、小公司为什么会变大？当然，通常只有业务发展良好的公司，才会变大。所以，最直接的原因是：活干不完了，必须加人。加了人之后，自然要派活。既然是派活，自然要有所分工。举个简单的例子：如果公司只有一个程序员，那自然所有的活都是他干。加了几个人后，自然可以分前端、后端、DBA、测试、运维…种种角色。不同的工种，自然需要协作。开会、文档、上下级关系，自然也要逐步建立起来。这些，都可以认为是「合理的开销」。二、在变大的过程中，发生了什么？  辅助性部门开始出现：人多了以后，需要专职的HR；占地广了以后，需要专门的打扫、清洁人员；统一的后勤保障，也变成刚性需求；  协调性部门开始出现：PMO这样的办公室，用于协调多个项目；会议越来越多，需要有专门的协调会议室的部门；多个部门之间的矛盾，需要有一个更高级的联席会议进行协调；做事要有规范，专门制定流程规范的部门开始出现；  监察性部门开始出现：人越来越多，难免会混入坏人，所以要有「道德自律委员会」；事越来越多，难免会出纰漏，所以要有「质量保障委员会」；外部交易越来越多，难免会有风险，所以要有「合同风险审查委员会」；  竞争性部门开始出现：在某种管理思路的影响下，开始设立多个目标类似的部门，以期通过内部竞争，促进效率提升；这些部门，都没有必要吗？当然不是，老板又不是傻子！三、为何大公司，效率会低？首先我们需要理解，怎么算效率高？怎么算效率低？同样一件事情，如果很小，很简单，往往小公司会做得更快，甚至更好；而大公司，则会做得更慢，甚至更差。但是，如果是一件极其复杂的事情，小公司可能根本无法完成，大公司再慢，至少他们能搞定。所以，我们的问题应该转化为：「如果一件事情，原本可以又快又好的完成，为何大公司却有那么多浪费？」根本原因在于：大公司的管理模式，不够柔性化，不具备「伸缩性」。打个计算机服务器的比方：「当访问量增长的时候，我们可以不断添加服务器。但是，当访问量下降的时候，大家都忘记把服务器再撤下来了。」四、为何大公司，快不起来了？  高大上意识，小事情往往也会大张旗鼓的去做。  风险意识，没有人敢说：「某某流程，大多数时候并无必要」  参与意识，这件事怎么能与我们部门无关呢？  自保意识，只要严格遵守流程，这个事情就算搞砸了，责任也不会在我身上。归根结底，是缺乏不断改进的意识（或者换言之，公司大到某种程度，就算是想改进的人，也会面对深深的无力感）。"
  },
  
  {
    "title": "28万个开源项目之番外篇",
    "url": "/my_blog/posts/Open-Source-Project-Analysis-2/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2015-05-28 22:00:00 +0800",
    





    "snippet": "一、工具1. 数据抓取最初是打算使用openhub.net的Open API的，他们有不错的API，还在Github上放了一个开源项目。只可惜，他们的API，最多申请5个API Key，每个Key明天的访问请求数量，不能超过1000次。当时我还不知道，其实openhub的数据只有28万多，还以为满打满算，至少得60多天才能全部抓完，顿时心就凉了。后来有朋友介绍了一个很棒的直接抓取HTML页面，然后做DOM分析的工具，名叫noodle。接下来，只要抓取： https://www.openhub.net/p?ref=homepage&amp;amp;q=&amp;amp;page={num}就能够拿到所有项目的概要数据了。当然，后续的331个项目的明细数据，还是得通过OpenHub的API来抓取。2. 数据分析完全是土法上马：sqlite3+numbers+csv+ruby，反正各种手法，什么称手用什么。3. 数据展示原本是打算在numbers里想想办法的，后来发现实在太弱。Excel也差不多，只能到网上搜索一些信息图制作的工具，后来找到了几个不错的在线工具，经过一番比较，最后决定用infogr.am来完成。的确非常不错。二、释疑：项目大小与创建时间的关系我与@云风 在微博上有一小段讨论，起因还是我之前的一些分析的观点：  是否使用Github，越是新的项目越愿意用；越是大的项目越没法用。  是否使用Github来管理项目的issue，越是新的项目越愿意用；越是大的项目越没法用。这个结论，其实在用词上，是有些讲究的：按理说，新与老相对，小与大相对；愿意与不愿意相对，能用与没法用相对，我的两个结论，对仗都不公整。其实，确实故意为之。于是，云风与我的对话如下：云风：项目规模和项目历史本身有相关性吧。代码规模越大的项目历史很可能越久。我：项目的规模，主要还是与项目本身的特性有关。原本就复杂的项目，才可能越长越大。原本就是小项目，也未必就会稳定的逐年增长。云风：这只能说明小项目可以历史久，不能说明大项目可以历史短啊。很少有新项目一开始就很大啊。代码也是一行行写出来的啊。我：那就是成长速度不同了。比如OpenStack，一开始就不小。云风：一开始就不小只能说闭源开发过一段时间，或从别的地方搬迁过来的吧。你能想象不被版本管理工具管理的情况下，首次提交 10 万行以上的代码？看这个 link 提交日志写的 initial fork out of nova。后来，我也没有再继续这个讨论，但是却一直在思考这个问题：「项目的大小，与项目的创建时间，究竟有大少相关性？」后来，我将两个数据，做了一个分析：Log(第一次提交代码，至今的天数)/Log(代码行数)，大概得到如下一个图：经过强大的Excel的计算，两个数据的相关系数，大约是0.203的样子，也就是说：大致上有较弱的正相关。三、开源目前，我已经将这个分析的相关数据，放在Github上开源了。简单介绍一下：data.sqlite3.zip 是28万基础数据projects.sqlite3 是331个项目的详细数据projects.csv 是我用来做数据分析的大表格四、名单331一个开源项目，名单如下：            Name      Homepage                  Metasploit Framework      http://www.metasploit.com/framework/              NetBSD      http://www.netbsd.org              GNU C Library      http://www.gnu.org/software/libc/              cURL      http://curl.haxx.se/              Python programming language      https://www.python.org              Linux Kernel      http://kernel.org/              GNU Emacs      http://www.gnu.org/software/emacs              gnulib      http://savannah.gnu.org/projects/gnulib/              GNU Core Utilities      http://savannah.gnu.org/projects/coreutils/              GNU Compiler Collection      http://gcc.gnu.org/              Wine      http://www.winehq.org              Debian      http://www.debian.org/              GNU Octave      http://www.octave.org              Visualization Toolkit      http://www.vtk.org              pf      http://www.benzedrine.cx/pf.html              GDB      http://www.gnu.org/software/gdb/              GNU binutils      http://www.gnu.org/software/binutils/              GHC      http://haskell.org/ghc/              Zope      http://zope2.zope.org              FreeBSD      https://github.com/trueos/trueos              Perl      http://www.perl.org/              GNU LilyPond Music Typesetter      http://lilypond.org/              Gnus      http://gnus.org/              ikiwiki      https://github.com/schmonz/ikiwiki              Samba      http://www.samba.org              PHP      http://php.net              FreeBSD Ports      http://www.freebsd.org/ports/              pkgsrc: The NetBSD Packages Collection      http://www.pkgsrc.org/              Mesa      http://www.mesa3d.org/              Squid Cache      http://www.squid-cache.org/              KDElibs (KDE)      http://www.kde.org/              gedit      http://www.gnome.org/projects/gedit/              Evolution      http://www.gnome.org/projects/evolution/              Kontact      http://kontact.org/              KDE PIM      http://pim.kde.org              Advanced Linux Sound Architecture (ALSA)      http://www.alsa-project.org/              Wireshark      http://www.wireshark.org              OpenSSL      http://www.openssl.org/              GIMP      http://www.gimp.org/              NetBeans IDE      http://www.netbeans.org              Koha Library Automation Package      http://www.koha-community.org              openSUSE Linux      http://www.opensuse.org/              Doxygen      http://doxygen.org/              libcurl      http://curl.haxx.se/libcurl              GStreamer      http://github.com/zaheerm/gst-plugins-good              GNOME      http://www.gnome.org/              Insight Toolkit      http://www.itk.org              zsh      http://zsh.sourceforge.net/              Nautilus      https://wiki.gnome.org/Apps/Nautilus              X.Org      http://www.x.org/wiki/              Mozilla Core      http://www.ahrcloud.com              MariaDB      http://mariadb.org/              CMake      http://www.cmake.org              LibreOffice      http://www.libreoffice.org              ALT Linux      http://www.altlinux.org              ParaView      http://www.paraview.org              GTK+      http://www.gtk.org/              Poedit      http://www.poedit.net/              Bugzilla      http://www.bugzilla.org/              Enlightenment (window manager)      http://www.enlightenment.org              FFmpeg      http://www.ffmpeg.org/              GLib      http://library.gnome.org/devel/glib/              PEAR      http://pear.php.net/              Ruby      http://www.ruby-lang.org/              GnuCash      http://www.gnucash.org/              phpMyAdmin      http://www.phpmyadmin.net/              Mono      http://www.mono-project.com              SWIG      http://www.swig.org              SWT (Standard Widget Toolkit)      http://www.eclipse.org/swt/              Checkstyle      http://checkstyle.sourceforge.net              Eclipse Java Development Tools (JDT)      http://www.eclipse.org/jdt/              Eclipse Platform Project      http://www.eclipse.org/eclipse/platform-ui/              Natural Language Toolkit (NLTK)      http://www.nltk.org              Ekiga      http://ekiga.org/              Boost C++ Libraries      http://www.boost.org              Kate (KDE)      http://kate-editor.org              Devhelp      http://live.gnome.org/devhelp              Arch Linux Packages      http://www.archlinux.org              SPIP      http://www.spip.net              GNOME Terminal      https://help.gnome.org/users/gnome-terminal/stable/              ScummVM      http://www.scummvm.org/              Anjuta DevStudio      http://anjuta.org              BlueZ      http://www.bluez.org/              Eye of GNOME      http://www.gnome.org/projects/eog              Tor      http://www.torproject.org/              Fedora Packages      http://fedoraproject.org              Haiku      http://www.haiku-os.org              Stellarium      http://stellarium.org/              Totem      http://projects.gnome.org/totem/              Rhythmbox      http://www.gnome.org/projects/rhythmbox/              Gentoo Linux      http://www.gentoo.org/              CDT (Eclipse)      http://www.eclipse.org/cdt/              JRuby      http://www.jruby.org              eZ Publish      http://share.ez.no              VLC media player      http://videolan.org/              Equinox      http://www.eclipse.org/equinox/              Epiphany      http://www.gnome.org/projects/epiphany/              Thunderbird      http://mozilla.org/thunderbird/              GeoTools      http://geotools.org              PyPy      http://pypy.org              KDE      http://www.kde.org              apt - Advanced Package Tool      https://wiki.debian.org/Apt              Moodle      http://git.moodle.org/gw?p=moodle.git              Calligra Suite      http://www.calligra.org              QGIS      http://qgis.org/              Mozilla Firefox      http://www.firefox.com/              coreboot      http://www.coreboot.org/Welcome_to_coreboot              Tiki Wiki CMS Groupware      http://tiki.org              Apache Maven 2      http://github.com/apache/maven-archetype              Plone      http://plone.org              Superior Lisp Interaction Mode for Emacs      http://common-lisp.net/project/slime/              Kodi      http://kodi.tv              MythTV      http://www.mythtv.org              systemd      http://www.freedesktop.org/wiki/Software/systemd              GeoServer      http://www.geoserver.org              Groovy      http://groovy.codehaus.org/              Blender      http://www.blender.org/              MySQL      http://www.mysql.com/              iproute2      http://www.linuxfoundation.org/collaborate/workgroups/networking/iproute2              MonoDevelop      http://www.monodevelop.com              Hibernate      http://www.hibernate.org/subprojects/ogm              NetworkManager      http://www.gnome.org/projects/NetworkManager/              NLog - Advanced .NET Logging      http://nlog-project.org/              GParted      http://gparted.org/              Seahorse      http://www.gnome.org/projects/seahorse/              Glade User Interface Designer      http://glade.gnome.org/              Jenkins      http://jenkins-ci.org/              IntelliJ IDEA Community Edition      http://www.jetbrains.org              Ruby on Rails      http://rubyonrails.org              BusyBox      http://busybox.net/              Evince      http://projects.gnome.org/evince/              DokuWiki      http://www.dokuwiki.org/              Linux NTFS file system support      http://www.linux-ntfs.org/              KVM      http://kvm.qumranet.com/kvmwiki              Battle for Wesnoth      http://wesnoth.org/              Git      http://git-scm.com/              SPIP-Zone      http://zone.spip.org/trac/spip-zone/              Mercurial      http://mercurial.selenic.com/              Hibernate Entity Manager      http://entitymanager.hibernate.org/              Racket      http://racket-lang.org/              RubyGems      http://rubygems.org              SQLAlchemy      http://www.sqlalchemy.org/              cabal      http://haskell.org/cabal/              U-Boot      http://www.denx.de/wiki/U-Boot/WebHome              WebKit      http://webkit.org              OpenEmbedded      http://openembedded.org              Yocto Project      http://www.yoctoproject.org              matplotlib      http://matplotlib.org/              Symfony      http://www.symfony.com/              Meld      http://meldmerge.org/              Haxe      http://haxe.org/              FreeSWITCH      http://www.freeswitch.org/              Geany      http://geany.org/              collectd      http://collectd.org/              Gramps      http://gramps-project.org              phpBB Forum Software      http://www.phpbb.com/              HAProxy      http://www.haproxy.org/              fail2ban      http://www.fail2ban.org/wiki/index.php/Main_Page              NumPy      http://numpy.scipy.org              Scala      http://www.scala-lang.org/              dpkg      http://wiki.debian.org/Teams/Dpkg/              Nette Framework      http://nette.org              Inkscape      http://www.inkscape.org              Phing      http://www.phing.info/              jBPM      http://jbpm.org              JBoss Drools      http://www.jboss.org/drools              Bitbake      http://developer.berlios.de/projects/bitbake/              Zotero      http://www.zotero.org/              Lutece      http://www.lutece.paris.fr              OTRS      http://www.otrs.com/              Sage: Open Source Mathematics Software      http://sagemath.org              Rockbox      http://rockbox.org              Liferay Portal      http://liferay.com              TYPO3 CMS      http://typo3.org              Vala      http://live.gnome.org/Vala              pylint      http://pylint.org              The LLVM Compiler Infrastructure      http://llvm.org/              libvirt      http://libvirt.org              TinyMCE      http://tinymce.moxiecode.com              Django      http://www.djangoproject.com/              PHPUnit      http://www.phpunit.de/              OpenStreetMap      http://www.openstreetmap.org/              SymPy      http://sympy.org              Xen Project (Hypervisor)      http://www.xenproject.org              Eclipse Mylyn      http://www.eclipse.org/mylyn/              PHP_CodeSniffer      http://pear.php.net/package/PHP_CodeSniffer              Sakai LMS (core)      http://www.sakaiproject.org/              Spring Framework      http://github.com/SpringSource/spring-framework              Joomla!      http://www.joomla.org/              Marble      http://edu.kde.org/marble/              LXDE      http://lxde.org              Pygments      http://pygments.org/              OpenLayers      http://openlayers.org/              The MacPorts Project      http://www.macports.org/              calibre      http://calibre-ebook.com/              Grails      http://grails.org              Alfresco Content Management      http://www.alfresco.com              util-linux      https://github.com/karelzak/util-linux              jQuery      http://jquery.com/              Vaadin      http://vaadin.com/              Cython      http://www.cython.org/              Dojo Toolkit      http://dojotoolkit.org/              MediaWiki      https://www.mediawiki.org/wiki/MediaWiki              Second Life Viewer      http://www.secondlife.com/              Munin      http://munin-monitoring.org/              Odoo      https://www.odoo.com              Mozilla Calendar      http://www.mozilla.org/projects/calendar/              KDevelop      http://kdevelop.org/              ZNC      http://znc.in              Werkzeug      http://werkzeug.pocoo.org/              cppcheck      http://cppcheck.sourceforge.net/              Wicket Stuff      http://wicketstuff.org              Drush      http://drupal.org/project/drush              Sphinx documentation builder      http://sphinx-doc.org/              Piwik      http://piwik.org              JDownloader      http://www.jdownloader.org              SeaMonkey      http://www.seamonkey-project.org/              Empathy      http://live.gnome.org/Empathy              SilverStripe      http://www.silverstripe.org              PulseAudio      http://pulseaudio.org              LLVM/Clang C family frontend      http://clang.llvm.org/              Pylons      http://pylonsproject.org              MongoDB      http://www.mongodb.org/              Mockito      https://github.com/mockito/mockito              Doctrine      http://www.doctrine-project.org              Pacman      http://www.archlinux.org/pacman/              MAME - Multiple Arcade Machine Emulator      http://mamedev.org/              Rubinius      http://rubini.us/              Apache Camel      http://camel.apache.org/              OpenJDK      http://openjdk.java.net/              Buildbot      http://buildbot.net/trac              MPD      http://sourceforge.net/projects/musicpd              Tracker      http://projects.gnome.org/tracker/              org-mode      http://orgmode.org              Sass      http://sass-lang.com/              WPA/WPA2/IEEE 802.1X Supplicant      http://hostap.epitest.fi/wpa_supplicant/              Go programming language      http://golang.org/              Apache CouchDB      http://couchdb.apache.org/              Qt 4      http://qt-project.org/              Apache CXF      http://cxf.apache.org/              CakePHP      http://cakephp.org              CKeditor WYSIWYG editor      http://ckeditor.com/              SciPy      http://www.scipy.org              gitg      http://trac.novowork.com/gitg/              Banshee      http://banshee-project.org              OGRE      http://www.ogre3d.org              Chromium (Google Chrome)      http://code.google.com/chromium/              Gradle      http://www.gradle.org/              Netty Project      http://netty.io/              Sinatra      http://www.sinatrarb.com              Chef      http://www.opscode.com/chef              Gerrit Code Review      http://code.google.com/p/gerrit              GNOME Shell      http://live.gnome.org/GnomeShell              Git Extensions      http://code.google.com/p/gitextensions              Qt Creator      http://qt-project.org/              Kohana v3      http://kohanaframework.org/              Android      http://www.android.com              JUnit      http://www.junit.org              PCSX2      http://pcsx2.net/              Shotwell      https://wiki.gnome.org/Apps/Shotwell              Redis      http://redis.io/              Cassandra      http://cassandra.apache.org/              PhoneGap      http://phonegap.com/              Trinity Core      http://www.trinitycore.org              Icinga      http://www.icinga.org              CyanogenMod      http://www.cyanogenmod.com/              Rygel      http://live.gnome.org/Rygel              QEMU      http://www.qemu.org/              Trinity Core2      http://www.trinitycore.org              Pitivi      http://github.com/jhoolmans              Openfire      http://www.igniterealtime.org/projects/openfire/              Apache Hadoop      http://hadoop.apache.org/core/              akka      http://akka.io              JGit      http://www.eclipse.org/jgit/              Homebrew      https://github.com/Homebrew/homebrew-apache              Oh My Zsh      http://github.com/robbyrussell/oh-my-zsh              ehcache      http://www.ehcache.org/              EGit      http://www.eclipse.org/egit/              node.js (NodeJs)      http://nodejs.org              Thunar      http://www.xfce.org              Selenium      http://seleniumhq.org/              Arquillian      http://jboss.org/arquillian              Erlang      http://www.erlang.org              YUI      http://yuilibrary.com/              Gunicorn      http://gunicorn.org              CoffeeScript      http://www.coffeescript.org/              Clementine Music Player      https://github.com/clementine-player/Clementine              scikit learn      http://scikit-learn.org              Processing      http://processing.org/              Vagrant      http://vagrantup.com/              Qt 5      http://www.qt-project.org/              Yii PHP Framework      http://www.yiiframework.com              Zend Framework      http://framework.zend.com/              Apache Spark      http://spark.apache.org              Flask      http://flask.pocoo.org/              OsmAnd      http://www.osmand.net              ownCloud      http://ownCloud.org              Open Computer Vision Library (OpenCV)      http://opencv.org/              phpDocumentor      http://www.phpdoc.org              IPython      http://ipython.org/              RSpec      http://rspec.info/              OpenStack      http://www.openstack.org/              OpenStack Nova      https://launchpad.net/nova              Apache CloudStack      https://github.com/apache/incubator-cloudstack              AngularJS      http://angularjs.org/              GWT (formerly Google Web Toolkit)      https://github.com/google-web-toolkit/gwt              Facter      http://puppetlabs.com/puppet/related-projects/facter/              salt      http://saltstack.org              jMonkey Engine      http://jmonkeyengine.org              Puppet      http://puppetlabs.com/puppet/              Play! framework      http://www.playframework.org/              Elasticsearch      http://www.elasticsearch.com              Bootstrap (Twitter)      http://twitter.github.com/bootstrap/              Apache OpenOffice      http://www.openoffice.org/              GlassFish      https://glassfish.dev.java.net/              Propel      http://propelorm.org              JabRef      http://jabref.sourceforge.net              CodeIgniter      http://www.codeigniter.com/              GNOME Boxes      http://live.gnome.org/Boxes              GitLab      https://www.gitlab.com/gitlab-ce/              TiddlyWiki      http://www.tiddlywiki.org              Fish shell      https://github.com/fish-shell/fish-shell              Ansible      http://ansible.com              Simple Machines Forum      http://www.simplemachines.org/              FontForge      http://www.fontforge.org              libgdx      http://libgdx.badlogicgames.com              py-pandas      http://pandas.sourceforge.net/              javascript      https://github.com/airbnb/javascript              EasyTAG      https://wiki.gnome.org/Apps/EasyTAG              docker      http://docker.io              Capistrano      http://capistranorb.com/      "
  },
  
  {
    "title": "从28万个开源项目中，我们能够学到一些什么？",
    "url": "/my_blog/posts/Open-Source-Project-Analysis/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2015-05-12 22:47:00 +0800",
    





    "snippet": "引子：开源项目那么多，哪些是值得我们学习的？这里声明一下，仅仅是学习一下：他们是用哪些工具，来管理自己的项目的？开源项目多如牛毛，值得分析的项目也很多很多。从哪里入手呢？幸运的是，在开源社区，有一个著名的网站，过去叫oloho，现在改名叫openhub。在他的网站首页，有这么四行字，以表明他们的数据库是多么的全面、丰富：Indexing 669,008 open source projectsConnecting 3,742,793 open source contributorsTracking 679,761 source control repositoriesCounting 31,158,335,454 lines of code这么说来，事情就变得比较“简单”了，我需要把openhub的数据，都抓回来。数据的筛选过程具体的数据抓取过程，简直不忍详述（我的内心，几乎是崩溃的）。总而言之，我只抓到了289,631个项目。openhub虽然号称自己索引了66万的开源项目，其实这仅仅是他的数据库里的最大ID号！当我顺着这个ID一个一个的去抓的时候，有很多ID，都已经被删除了。在抓取到的项目数据中，有两个数值，特别值得参考：contributors（参与开发者的数量）；users（该软件的用户数量）。相对而言，users的数据，可以认为是一个样本，即该开源项目的所有用户中，愿意并且知道该如何来openhub点击I use this的人。因此，即使是排名第一的Firefox，在openhub也只有13158个用户。考虑到Firefox的用户数，已经超过5亿（来源于维基百科英文版），因此，我们相信这个数据仅仅是一个4万分之一的采样结果。随后，我观察了这28万多个项目的users数据与contributors数据，顿时惊讶的发现，绝大多数项目，都小的可怜，用户也少得可怜。当我以“select count(*) from projects where contributors&amp;gt;30”查询时，只搜到了  1662个项目...当我以“select count(*) from projects where users&amp;gt;30”查询时，只搜到了1260个项目...当我合并以上两个条件查询时，只搜到了335个项目。再从这335个项目中，排除掉最近一年已经不再有活动的项目，于是只剩下了331个了。三个感想  成功的开源项目，真是凤毛麟角  绝大多数开源项目都是少数人开发的小项目  这331个项目，也许可以作为我们的重要参考第一个问题：他们用什么配置库？这是331个项目，使用配置库的情况（有些项目，同时使用多种配置库），有两个现象值得注意：  接近92%的项目，已经在使用git——git的统治地位，已经无可动摇  只有53%的项目，在使用Github——那些用git却不用Github的项目，是什么原因？通过数据来分析：是否使用Github与项目创建时间的关系通过这个图，可以看出两个现象：  越是新创建的开源项目，hosting在Github上比例越高  越是新创建的开源项目，事实上成功的也越多（当然，2010年以后的数量锐减，我们怀疑是好酒也要陈酿的原因）通过数据来分析：是否使用Github与项目代码规模的关系由于不同的开源项目，代码行数差异巨大，因此我们只能以log(col)对数结果，来做区间划分。可以看到一个非常明显的趋势，当然代码行数超过10万行以后，代码部署在Github上的项目，就开始明显下降，直到为0。总结：是否使用Github，越是新的项目越愿意用；越是大的项目越没法用。第二个问题：他们用什么来管理issue？排名前五的工具中，Github：91个项目；Bugzilla：81个项目；JIRA：43个项目；Trac：20个项目；另外还有9个项目，完全是在maillist里“管理”issue的。一共有39种不同的工具，另外还有6个项目，我们无法了解他究竟是用什么来管理的。简单的来看：  Github已经占据统治地位  Github的占有率仅仅27%。  Bugzilla也算老而弥坚  有很多项目，在选择自己的工具通过数据来分析：使用的issue tracking工具与项目创建时间的关系1990年之前创建的项目，其中有一个已经开始使用Github了。但是，这仅仅算是个案。更加明显的趋势是：越是新的项目，越是倾向于采用Github管理自己的issue。相对而言，其他各种Issue Tracking工具的比例，都在下降。通过数据来分析：使用的issue tracking工具与项目规模的关系随着用户数量的增加，我们猜想：issue的数量与复杂度，也会逐渐增加。可以看到这样的趋势：Github的使用率，也在不断下降。总结：是否使用Github来管理项目的issue，越是新的项目越愿意用；越是大的项目越没法用。尚未完成的分析：  开源项目使用的CI工具的情况  开源项目使用的Code Review工具的情况  开源项目使用的文档类工具的情况  ……主要还是工作量太大了。。。对这个分析有兴趣的同学，可以与我联系，咱们可以一块来干。"
  },
  
  {
    "title": "Free Software vs. Open Source",
    "url": "/my_blog/posts/Free-Software-vs-Open-Source/",
    "categories": "Thinking, IT",
    "tags": "OpenSource, FreeSoftware",
    "date": "2015-05-04 20:51:00 +0800",
    





    "snippet": "首先推荐一部电视剧很早以前看过一部港剧《龙兄鼠弟》，是万梓良、郑则仕和张卫健演的。其中万梓良饰演的雷文凤，在最后写了一本书，叫做《黑白灰》。大意是：这个世界，虽然存在黑白两色，绝大多数人，却都是灰色的。而他，却一定要坚持做一个纯白色的人。甚至在他看来，灰色的人，较之黑色的人，更加罪恶。最近刚刚读完了另外一本书《若为自由故》，则是一本Richard Stallman的传记。在这本书里，红帽公司总裁罗伯特·杨（Robert Young）总结理查德看似矛盾的政治行为时，说道：“我崇拜也尊敬理查德和他所做的一切。我对他唯一的批评就是，有些时候，他对待朋友甚至比对待敌人还要无情。”在我看来，也许发起开源运动的那群人，大多数自认为是RMS的朋友，而对于RMS而言，他们只是一群放弃了原则而站在灰色地带的人罢了。说实话，在自由软件与开源之间，我究竟应该持何种立场？这是一个，我一直以来，都不愿意深想的问题，实在是太难了。只是这回读了一遍RMS亲笔签名的个人传记，又了解到了很多当事人的实际言论，总觉得应该督促自己，思考出一个结论出来。两者的分歧，首先是哲学上的：理想主义 vs. 实用主义在RMS看来，自由是天赋人权，可以说：因为自由本身值得追求，而RMS恰好又是个软件天才，所以他才会致力于自由软件。而在开源运动看来：吸引更多的人参与自由软件的开发，然后实实在在的拿出优秀的开源软件来，才是真正有价值的事情。自由软件的目的，是更多的自由，而开源软件的目的，是更好的软件。GPL是一种神奇的创造如果RMS只是一位致力于追求软件自由的斗士，也许不会有任何人理睬他。但是他写出了Emacs、GCC这样的神级软件。以至于由此建立起了几乎无人能及的社区影响力。因为他写的软件实在太牛，所以无论他以什么样的License来发表自己的软件，都会引发全社区的关注。然后，GPL这种诡异的授权模式，才会有人愿意遵循。甚至，应用作为自己的开源License。或者换句话说：RMS挂了Emacs的羊头，卖了GPL的狗肉。但是，Emacs这个羊头实在太好，买了GPL这种狗肉的人，居然也就认可了。《大教堂与集市》对于RMS是一个重大打击因为《大教堂与集市》一书，对于Linux成功之道的总结与宣传，使得Linus被人们提升到了世界上最知名黑客的行列。说到底，在黑客这个圈子里，大家还是更注重实力，而非理念。当有人以完全不同的方式，创造出完全不逊于Emacs、GCC这样的开源软件时，RMS/自由软件/大教堂所代表的「道路」，就不再是唯一的选择了。尤其是当Linus站在了开源的大旗下，更多的公司则出现在了Linux的周围。集市的胜利，不仅仅是开源相对于闭源的胜利，也是Linus相对于RMS的胜利。在之后的世界里，虽然开源的代码越来越多，但是自由却越来越少被人提及了。不完美的系统会激怒黑客《公正——该如何做是好》一书中，有一个经典的伦理学命题：假设铁轨上有一辆失控的火车，在岔路的一边是一个人，而另一边则是五个人。你是一个扳道工，你会选择让火车开向一个人，还是五个人？我曾经问过我儿子这个问题，他的回答非常有趣：「如果是五个大人，与一个大人」，那就撞一个大人。「如果是五个大人，与一个小孩」，那就撞五个大人。「如果是五个男人，与一个女人」，那就撞五个男人。「如果是五个男人，与一个胖女人」，那就撞那个胖女人。。。这其实反应了一个事实：想要通过权衡利弊，来做出最有利的选择，可能会是非常没有原则的事情。即使是一个成年人，也未必能做得有多好。对于一个像RMS这样的黑客来说：他们会被这种问题所激怒，进而会拒绝回答问题，并想尽一切办法，要hack掉这个该死的列车与轨道系统。在本书的第十二章《开往黑客地狱的短暂旅途》，就讲了一个令RMS暴怒的故事，在书中，作者写到：「“不完美的系统会激怒黑客。”史蒂芬·李维说过这样的话，这是我决定与斯托曼同坐一辆车前应该听取的另一个忠告，“这是黑客们通常不喜欢开车的原因之一：这是一个充满不确定性的程序，交通信号灯总是随机的变化，还有横七竖八的单行道，导致交通经常堵塞。这实在是太不必要了，只要让黑客们重新安排一下信号灯，打开交通灯控制盒，重新设计整个系统。”」是的，对于真正的黑客来说：适应这个不完美的世界——取舍、权衡、妥协，是别人的事情。而黑客，就一定想要改造它！我的结论RMS这样的人，就像是在遥远的天边，在夕阳即将落下之时，努力为我们撑起天际线上那最后一点光明的人。我没有资格自称为黑客。哪怕是改变世界的念头，我也常常是一闪而过。但是，这并不妨碍我始终对RMS，报以最高的崇敬！至于Open Source，那至少是个很不坏的东西吧！"
  },
  
  {
    "title": "如何评价一个新技术——以Docker为例",
    "url": "/my_blog/posts/How-to-evaluate-a-new-technology/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2015-05-03 22:20:00 +0800",
    





    "snippet": "上次与霍炬聊天，霍炬提到他在跟陈皓抬杠，陈皓认为Docker与Java是一个级别的发明，第二年就吸引了所有热门公司的加入。而霍炬认为这太夸张了，毕竟就是个配置管理器嘛。而我的评价，可能会比陈皓的更高，我认为Docker比Java的级别还要高。而且，这与有多少公司参与无关。甚至可以反过来说：因为Docker极为重要，才会有那么多的公司，在第一时间加入进来。因此，我也答应霍炬，要写一篇文章，仔细的阐述一下自己的观点。新技术的三大功效：  提升效率：某种更快的算法或者更快、或者更省，都是好技术。可以是一个算法，也可以是一种更方便快速开发的框架。可以是更高速的网络带宽，也可以是更省电的低功耗技术。这些，当然都是极好的。但是，也都不过是某种层面的量变而已。除非提升的幅度，达到百倍、甚至千倍、万倍。  增加选择：一种新的语言有时候，我们会把这类行为称之为重新造轮子。然而，我们也可以认为，哪怕是做同一件事情，现在也多了一种新的选择。当然，这并非其价值所在。更重要的益处在于：新的选择，意味着新的思路，新的模式，新的「解法」。虽然，在做这件事情本身，也许并无太多帮助。但是，却可能启发新的创造。  降低门槛：更加简单的工具有一类技术，并非直接的贡献，而是间接的。原本在这个领域，非要苦学十年以上，才能出师。现在，21天，就能从入门到精通了。以前只有国际巨头才能开发的移动电话，现在一个英语教师，就敢开整了。但是，降低门槛的技术，往往具有颠覆性的价值。一个行业，只有100人能参与，和有100万人能参与，将会带来绝对意义上的不同。很多时候，虽然降低门槛，并不能真正化解深层次的复杂性。但是，却会吸引更多的聪明人，来一起思考和解决问题。繁荣之后，一切皆有可能。如何给docker定位？  docker所封装的容器技术，带来了更高的效率  以docker容器为代表的虚拟化模式，是一种新的选择，将为架构设计带来新的启发  docker-registry、dockerfile、docker-compose等相关技术，大大降低了参与到这一容器化浪潮的门槛综上所述：我认为docker是一种极具潜力的新技术。正因为其潜力巨大，才吸引了众多巨头、众多企业、众多散户以及众多一线研发者的共同热捧。题外话事实上，我上面画的那个模型，是自己生造的。甚至可以算是为Docker度身定制的。在以上三个要素之外，还有其他一些评价新技术的标准。从量变到质变这是我上面刻意模糊的部分。一个技术，能够快2倍、20倍、还是20万倍。将会得到完全不同的评价。飞行速度是否能超过7.9公里/秒，是完全不同的两重境界。创造一个新行业，甚至更多行业在电视机出现之前，不会有电视演员，不会有现场直播，不会有主持人，不会有…沙发土豆。能够令整个世界因此而不同的新技术。岂是小小的docker可比？危害性似乎，IT行业最牛的技术，也不太会有啥危害性。前一阵热炒的人工智能，也不过是某种夸张100倍之后的危言耸听而已。毕竟，一种新技术，都无法威胁世界和平，能有多了不起？比起物理学家、化学家，咱们这些搞IT的人，简直弱爆了。"
  },
  
  {
    "title": "不会太灰暗的未来",
    "url": "/my_blog/posts/a-future-that-is-not-too-gray/",
    "categories": "Thinking, IT",
    "tags": "Essay",
    "date": "2015-03-25 02:09:00 +0800",
    





    "snippet": "霍炬前阵子写了一篇「歪理邪说」：《无论强人工智能能否出现，人类的未来注定灰暗》我第一遍阅读的时候，发了一条微信：「好一篇歪理邪说，一时间竟无法反驳」。潜台词是：总觉得有哪里不对，还是很想反驳的。。。简单总结霍炬的观点，我认为主要包含以下两点：人们无意识地，甚至主动的分享自己的隐私；这些隐私被大公司掌握，辅之以大数据分析，以深度学习的方式理解用户，进而对人类行为实现操控。在经过几周的思考之后，我打算将自己的观点表达如下：1. 我的隐私，我自己都知道吗？在没有查看网站访问日志之前，我根本不记得自己一天看了多少网站，浏览了多少内容。在没有佩戴智能手环之前，我不知道自己每天走了多少步路。在手机没有GPS定位功能之前，我甚至会偶尔迷路，不知道自己身在何处。当然，我每天浏览的网站，走了多少路，心跳水平，吃了什么，去了哪里，都是可以算作我自己的隐私。但是，我要么自己根本不知道，或者因为信息琐碎，我自己也记不住。那么，这些我自己都搞不清楚的隐私，还算是隐私吗？如果，这些隐私没有别人知道，我自己也不知道，这种隐私，有什么价值呢？如果是没有价值的隐私，有保护的必要吗？换句话说，如果我上传了这些隐私（我原来自己都不知道的隐私），给我带来了更多的收益，这个是不是好事呢？2. 基于隐私的增值服务，存在诸多灰色地带众多的服务，哪怕是传统服务，也需要了解用户的隐私。我去做按摩，我的按摩师傅会问我：你最近哪里不太舒服。去医院看病，负责任的医生也会询问我的既往病史。如果不了解这些信息，他们就无法提供针对我的服务。进入网络时代，我们会向从未见过的人，甚至某个网站，透露自己的隐私。我们的信用卡号，我们的身份证和年龄性别。如果我们想要去网上征婚，那还得填写更多的内容。为什么我们愿意主动填写这些信息？因为需要换取更好的服务。再进一步，针对一个人的数据，力量是不足的。如果网站能够收集足够多人的数据，统计、分析、甚至预测。假设：根据不同地区，针对不同商品的搜索频率，预测不同地区的商品需求趋势。这当然能够帮助商家赚取更高的利润。但是也的确能够让用户在下单购买时，以更快的速度，收到货物。如果，网站在收集这些需求数据的时候，能够只做汇总，不记明细。那么，用户来说，就只有益处，没有损害了。事实上，所谓隐私，是针对不同的个人意愿而界定的。我的个人信息，如果我不愿意他人知道，那就是我的隐私。如果，我不介意他人知道，那就不是隐私。不过，我想要举一个非常令人困扰的例子：「我在微信或者微博上，分享自己孩子的照片，甚至还有姓名和乳名。这是不是会存在问题？」很多爸爸妈妈都在这么干，而且往往乐此不疲。另一方面，也有很多「有识之士」指出：「这会给人贩子、诈骗犯、敲诈勒索的绑匪以可乘之机！」甚至，如果存在某个刻意针对你的家伙，默默收集你的各种公开信息，就能做到对你了如指掌，进而对你不利。在过去，他可能需要去翻你家的垃圾桶，再私下找你的身边人打听。现在，他们坐在家里，就能够搜集到这一切。甚至，有某种地下的黑色产业链，在兜售各种隐私的信息，以方便他购买。问题在于：我不介意他人知道的一些个人信息，究竟是否有可能损害我的利益？而我在交出这些信息的时候，是否已经知道这一点？假设，我们公开分享的所有信息，事实上都可能对我们不利，这样的概率有多大？我们应该放心大胆的分享吗？还是应该不怕一万、就怕万一？3. 权利的转让与契约的成立如果跳出IT、网络以及隐私的范畴，我们可以找到另外一些相近的例子——国家与政府的出现。在国家与政府出现之前，人类比现在自由得多，当然，也短命得多。安全没有保障，随时可能被人干掉。人们居住的地方，也缺乏各种公共设施，没有路灯，没有医院，没有警察，没有城管，没有环保局，没有……没有这些公共的服务，人类自然都朝不保夕，直到他们愿意让渡自己的一部分权利，教给一个公共的政府，由这个政府，提供各项公众需要的服务。当然，一旦政府出现，就有了自己的生命力，甚至可能违背创立者的本意。这才是需要监督政府的根本原因。让渡权利，订立契约，保持监督。这就是现代国家的「契约论」基石。西方的众多知识分子，有一个永恒的命题：「警惕政府走向独裁」。但是，无论多么警惕，无论多么强调监督，「取消政府」的言论，绝非主流。也不可能成为主流。回到隐私的话题上来。我们上传自己的隐私，同样是基于我们与服务商之间的「契约」的。也许我们通常不看那些契约的文字，也许我们往往不关心可能的条文陷阱，也许我们的信息，会落入不怀好意的人手中。但是，我们已经无法回到过去，无法停止使用众多的网络服务，无法放弃在朋友圈发照片了。唯一的选择，只能依赖法制，持续向前。如果法制不健全，就推动法制的健全，推动对服务商的监管，如此而已。那种担忧人类注定会走向灰暗未来的心态，与担忧人类早晚会落入独裁者之手的心态一样。是相当「杞人忧天」的。4. 借助工具，认识自己？「认识你自己」，这是古老西方的格言。「人贵有自知之明」，这是古老东方的格言。问题在于，如何才能做到呢？在传统的方法中「反思、静观、禅修」，也许是可行的办法。在科学昌明的现代，也许工具可以帮助我们。在霍炬的文章里，有一个很有趣的「近未来幻想」，可以通过分析购物者的心跳、血压等身理特征，判断对于这个人最具有吸引力的商品价格。这其中有啥问题吗？以这种价格购买这种商品，违背了用户的意愿了吗？根据不同的供求关系，确定销售价格，原本就是「政治正确」的经济学规律。那么，在大数据支撑之下，商品能够根据每一个个体的需求强烈程度，确立一个针对性的价格，不是更加符合经济学规律吗？假设通过机器的分析，我们掌握了用户的真实需求强度，这究竟是一种操纵，还是一种迎合呢？假设，我们通过个性化推荐，列出了用户真正想要的商品，用户会因此感到恐慌吗？假设，我们不是以程序方式揣摩用户心理，而是由一个经验丰富的导购小姐，带领用户完成选购，是不是就不会令人恐慌了呢？那么，我们恐慌的，是不是「程序而非人类，猜出了我的心意」这一事实呢？血压计、心电图、X光机，种种医学手段，帮我们更加真实的掌握自己的健康状况，当然也能够帮助我们发现疾病，尽快恢复健康，延长寿命。那么，如果随着科技的发达，某种机器和算法，能够帮助我们更加深入的认识自己，了解自己，这样会带来什么样的益处（坏处）呢？5. 怎么才算作被操控？怎么才算作被洗脑？怎么才算作被决策？任何人都害怕自己被人操纵，当然，更糟糕的是被机器操纵。问题在于，怎么才算是被操纵、被洗脑、被决策呢？当年在知乎，我曾经回答过一个类似的问题。简单说：「过程中是否可以反悔；事后是否可能后悔」。我们在网上购物，购得兴高采烈，事后又号称自己要剁手云云。我也没听说过有几个人，真正的剁了手。如果商家提供了7天无理由退货，在7天之后，你还没有退货。那就不要说自己是被操纵购物的。霍炬文中的有一段话，可以算作是一种惊人的预言：「那时候人们就会有更多行为会按照人工智能程序所规定的方式进行，并且，还会发自内心的认为那是他独立自主的产生想法。人会完全会成为程序的终端，为程序贡献数据，按照程序引导产生行为，依赖程序生活和工作。」在我看来，这段话称得上是危言耸听。背后的逻辑，是对技术深深的恐惧。6. 人是生而自由的,却无往不在枷锁之中。在没有任何技术介入的情况下，我们从一生下来开始，就会受到引导、规劝、甚至强制教育。父母会告诉我们，这样做是对的，那样做是错的。如果干了某些事，就一定会挨揍。在上学以后，我们读书、学习，书本上，课堂上，老师的耳提面命，书中的价值灌输。什么样的少年，才是一个好少年？我们如何才能带上小红花？我们如何才能称为三好学生？我们如何才能当上班干部？在生活中，小说、诗歌、散文、杂志，在向我们倾诉着各种不同的价值观。形形色色的广告，在以种种价值观，无所不用其极的诱导我们消费。身边的同学、同事、朋友、亲戚，也在不断的向我们传递他们的价值观。我们一路行来，哪有一天躲得过呢？三十而立、四十不惑，追求的无非是确立自己的价值观。我们不断学习、思考、总结、成长，无非是为了不受人惑、有自己的主见。那些读完了霍炬的文章，认定人类的未来注定会灰暗的朋友，也许已经不自觉的接受了某种灌输。比起尚未到来的「人工智能操纵你的未来」，只怕已经被一篇文章洗了脑！7. 未来真的会那么灰暗？我一直觉得未来学家，是一种非常高大上的、安全的职业。当然，他们最好不要预测自己活着就能够看到的未来，免得到时候麻烦。那篇引发了霍炬文章的「介绍强人工智能」的文章，其中的逻辑，也非常吊诡。如果未来机器的智商，是人类的成百上千倍，差距大到了蚂蚁与人类的差距。我们谁有资格预测未来呢？蚂蚁有资格预测人类社会未来的发展趋势吗？与其勉强预测，写些危言耸听的文章。倒不如老老实实的承认：未来无法预测！把小说写得像科普文章，真的靠谱吗？未来将从何而来？我不知道。在我看来「未来不会那么灰暗」，至于理由，也许是因为我比较乐观吧……"
  },
  
  {
    "title": "开源项目也要讲注意力经济",
    "url": "/my_blog/posts/Open-source-attention-economy/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2015-03-11 20:50:00 +0800",
    





    "snippet": "这是因OSTC大会的需要，接受CSDN采访的一个答复稿。文字与CSDN网站的略有不同。CSDN: 庄老师，可以自我介绍一下吗？您现在在华为的工作还是以推广开源服务为主吗？我是2013年11月加入华为的，目前主要的工作是华为的内源社区平台建设。简单的说，这项工作的主要目标，是将开源社区的思想、方法、开发模式与激励机制，引入到华为内部，让华为内部的六七万研发人员，能够以开源的方式，开展内部的开发协作活动。（Open Source -&amp;gt; Inner Source）在加盟华为之前，我就清楚的认识到，这项工作的难度会非常大。但是，令我惊讶的是，在华为内部，从上到下，都有相当多的开源热心人，开源爱好者，甚至开源大行家，在积极的推动这一平台的建设，在努力推动内部文化的逐步变革，也在推动着华为变得更加开放，甚至更加积极的参与到开源社区之中。总体而言，我认为这一变革大有可为。能够身处其中，并贡献力量，我也非常自豪。CSDN: 2012年您创建的“我们的开源项目”活动到现在为止，它的进展状况怎么样？对开源的宣传效果大吗？事实上，当年的活动，我只是首先提出了倡议，不能算是我一个人创建的活动。从一开始，就有很多很多的热心朋友，参与了进来。在《大教堂与集市》一书中，有一条经验是这么说的：「当你对一个项目失去兴趣时，你最后的职责是把它交个一个称职的继任者。」后来，「我们的开源项目」活动，被「开源力量」的朋友继续发扬光大，后来又进一步推出了「开源力量公开课」的一系列线上、线下的课程。目前也办得红红火火，相信很多朋友也都知道。至于对开源的宣传效果，我感觉很难评估。总体来说，国内的各种平台、媒体、渠道，对于开源项目、开源社区、开源参与者的宣传，已经越来越多，也越来越好了。CSDN: 两年半以前，您对“想要进入开源领域的开发者”的建议是“慎入”，那现在呢？这个开源领域对于新手还是那么的“危险”么？到什么时候这个领域才能成为一个乐土？依然是「慎入」，其实，任何时候做开源，都不危险。但是：个人参与开源，始终是一个小众的，孤独的，大多数时候没有太多回报的事情。如果一开始期待太多，很可能会迅速感到失望。做好心理建设，对开源有深入理解，然后在投身开源，我想会有更大的收获。CSDN: 在《OpenSSL是否值得同情？》一文里，您认为开源项目的失败，主要归咎于开发者和管理者，那么开发者最想要从外界获得的贡献是什么呢？怎样才能避免项目流产呢？在那篇文章中，其实有一个观点，我并没有明确的表述出来：在开源社区，除了有开放、温暖、善良、互助的一面，同样还有冷漠、残酷、甚至无情的一面。在同一个领域，最初可能有多达几十、上百的同类开源项目，纷纷涌现，各领风骚。不要说那些始终默默无闻的项目，即使是那些曾经风光无限的项目，一旦新的替代技术出现，大家就都开始转移兴趣，投入新的热潮之中。大家不再批评，甚至不再谈论，甚至都不再记得曾经有过的开源项目。所谓前浪死在沙滩上，指的就是就是这种情况。相对来说，OpenSSL已经足够幸运了。我一直认为，互联网的众多思想和实践，其根源来自于开源。这里只举一个例子：注意力经济。开源项目，开源创始人，其实同样迫切渴望吸引更多的注意力。有人关注，有人使用，有人反馈，甚至有人批评，对于开源项目的发展，至关重要。这也正是霍炬的文章中谈到的观点：「使用它就是对它的帮助」。需要区分的最想得到的帮助，与最有价值的帮助。最想得到的是关注度，而最有价值的是patch。有人源源不断的为我的项目提交patch，这是最有价值的贡献。当然，这个需要有正确的态度。《大教堂与集市》中所说的「正确的态度」。这是避免项目流产的关键。至于何谓「正确的态度」，建议还是去通读《大教堂与集市》全书为好。CSDN: 您最近一直在看关于 Docker 相关的书本，您如何看待 Docker 未来的发展趋势和方向？我最近刚刚写了一篇文章《experience.exe》，是讨论一个现象：在以docker为代表的容器技术出现之后，可执行的经验，变得更加容易了。当然，这仅仅是非常窄的一个观察角度。事实上，Docker的出现，有可能改变一切。上次在某个技术群里有朋友说：「Docker也不会是银弹」，而我的看法是：「Docker不会是银弹，但是容器技术是可以确认的未来。」从容器的视角出发，我们得以重新思考：「操作系统与发行版、服务化架构与架构设计、自动化运维与监控、自动化部署与虚拟化、自动化测试、协作开发模式……」新的商业机会，也会从中孕育。当然，我一直说「以Docker为代表」，而不是单单谈Docker。就像上一个问题中谈到的：「前浪死在沙滩上，也很有可能」。CSDN: 如果一个开源社区在发展过程中更加靠近广告、商业宣传等，逐渐偏离原本的方向，要怎样做才能恢复在用户心目中的形象？只有我不需要的广告，才是我会反感的广告。当然，更好的，更有技术含量的广告，是需要花心思的。站着把钱挣了，善用技术很重要。另外，这其实是一个含金量的问题。越是有好的内容的社区，用户越是能容忍社区的广告。基于优质的内容，赚钱不难。最后，恢复形象是最难的事情。一失足成千古恨，印象坏了就很难恢复了。CSDN: 您怎么理解 OSTC 大会的主题“社区胜于代码”这句话的？社区与代码，我认为是土壤与种子的关系。没有土壤，种子不可能生根、发芽、茁壮成长。但是，再肥沃的土壤，没有栽下种子，什么都长不出来。热火朝天的社区，当然会帮助开源项目成长的更好。不过，我认为另一句话也很重要：「Talk is cheap, show me your code.」所以，我认为「能够帮助社区成员，专注于代码的社区，才是真正的好社区」。CSDN: 正好问到社区建设出现的问题，开源社区如何协调商业宣传的关系？中庸之道很重要，太过于清高，拒绝任何商业的社区，同样很难发展壮大。所以，社区成员的共识很重要。较之众说纷纭的意见，后台的运营数据，是更加重要的参考依据。换言之，开辟广告位，投放广告，然后观察数据，再决定如何调整。这样会比较稳妥。CSDN: 2014年在开源上的大事件还是比较多的，您怎么看待接下来的一年、几年里的开源前景？之前看过一篇文章，标题是《开源已经完胜，但这并不是结束》。在我看来，越来越多的商业公司，开始意识到开源的价值，也因此各怀目的地投入到开源之中，在最初的开源黑客们看来，这未必就是什么好事。开源作为一种标签，开源作为一种口号，开源作为一种企业形象，开源作为一种手段，开源作为一种商业模式，在很多真正热爱开源的人看来，往往并不是那么对胃口。当然，还是得回到中庸之道上来，拒绝商业、质疑动机、预设立场、甚至草木皆兵，都未见得是好事情。总体而言，我认为未来几年的开源，肯定会越来越繁荣，越来越热闹，吸引越来越多的参与者甚至搅局者，这都是好事情。距离开源的盛极而衰，现在还早得很。"
  },
  
  {
    "title": "experience.exe",
    "url": "/my_blog/posts/experience.exe/",
    "categories": "Thinking, IT",
    "tags": "Cloud",
    "date": "2015-03-01 22:38:00 +0800",
    





    "snippet": "一个只有程序员才能立刻理解的笑话：「中国的法律是txt格式的，西方的法律是exe格式的。」当然，这个笑话相当片面（废话），但是却可以成一个很好的引子，引出今天的话题：「什么才算是可以被执行的经验？」一、先来谈谈，什么样的经验是txt格式的在stackoverflow，有大量的问题，是这种格式：「在XX平台上，我想跑XX和XX和XX，怎么搞？」、或者「我在安装/运行XX的时候，系统报错，说是找不到XX，怎么办？」这些问题，通常有其他老手已经碰到过了。于是，有某个好心人，在下面答复一番，读到这段说明的新手，再照此操作一番。如果顺利的话，自然就OK了。如果搞出其他的问题，只怕还要再来追加提问。二、再来谈谈，什么样的经验是可执行的所有的开源项目，都包含了宝贵的经验，而且一旦编译(动态语言只需要配置一下)成功，就是可执行的了。当然，编译与配置，同样需要经验。configure脚本与Makefile、Rake脚本，就是这种编译类经验的可执行版本。而Gemfile、requirement.txt、package.json之类的文件则是配置类经验的可执行版本。这些当然都是极好的，但是却又远远不够。我们依然需要阅读install文档，依然有各种坑需要去踩。三、曾经的一个设想：dependency.io大概在去年6~7月份的时候，我曾经有过一个设想，主要也是受到了brew的启发：如果有某种机制，能够解决任意平台、任意语言、任意情况下的各种依赖问题，那应该可以大大的解放开发者吧。如果每个人都能够将自己的一点经验分享出来，再汇集到一起，世界一定会变得更加美好吧。但是，在略微思考之后，就发现要解决这个问题，实在是太复杂了。  一个系统要正常运行，考虑到不同的操作系统、平台与版本，需要正确的配置一堆组件  一个组件需要考虑其版本、依赖平台以及获取方式，还有它所要依赖的其他组件  最简单的办法自然是apt-get，但是有时候必须考虑从源代码编译，甚至在特定平台版本之下，需要打上某些patch，才能正确编译  也许在某个平台下，就是无法编译、安装成功的，这个在知识库里也应该有「结论」  在一切都已经在我的机器上安装完成之后，还需要正确的配置，将他们组合起来  如果在我的机器里，需要并存一个组件的几个不同版本，如何避开冲突，也是一场噩梦  以上的这一切，需要一个层层递进的依赖关系，以及一个足够灵活的数据格式最后，我放弃了这个项目！当然，类似的事情，还有人一直在做：Chef &amp;amp; Cookbook四、重型的解决方案在我们的项目组里，有一个非常笨重，但却有效的办法：派一位「死士」先在一台干净的虚拟机上，把所有的依赖问题解决，完成各种配置，最后将虚拟机复制N份，给每个开发人员使用。多年以前的vagrant+box+virtualbox，其实就是这样一种方案的略微方便一些的版本。为什么说这样的方案是「重型」的？虚拟机的大小是几百M；启动时间至少几十秒；一台虚拟机至少占用几百M甚至几个G的内存；当然还有高昂的CPU计算资源消耗；如果这一切都仅仅是为了解决复杂的依赖关系，那也太奢侈了。五、容器——一个足够好的折中方案基于容器，我们可以获得一个个基本上近似于干净、相互隔离的「操作系统」，在此基础上的配置与依赖关系，可以通过足够简单的方式来描述。而另一方面，由于容器的大小、启动时间、占用内存、消耗CPU都大大的低于基于虚拟机的重型方案，这就使得在一台机器上，同时启动成百上千个容器实例，也不在话下。这种优势对于运维的好处先按下不表，这里先讨论其对于经验梳理的意义：原本在一台虚拟机里，我们需要配置N个不同的组件，以及组件之间的相关配置，要将其组成在一起，使其能够顺利工作，复杂度是惊人的。现在，我们可以将工作分为两部分：每个组件的依赖描述，以及组件之间的组合配置关系。举一个简单的例子：cookbook gitlab 与 docker gitlab这两个项目，就是两种不同思路与技术平台的产物，同样是为了描述「安装并运行Gitlab」的经验，复杂度大概会相差10倍。在docker模式下，我们只需要阅读Dockerfile与fig.yml两个文件，大约50+行，就能够搞明白了。而在Chef模式下，我们至少得阅读recipes目录下的三个文件，大约500+行吧……另外一件docker做得特别靠谱的事情，是建立了简单好用的Docker Hub，这使得创建、分享、学习各种经验，变得更加容易了。题外话另外一个值得关注的社区，是wercker，这个社区也在以boxes与steps的方式，在努力构造更加容易分享和执行的经验。六、从经验描述的角度来看dockerfile与fig.yml如果扯远一点的话，我们可以看到几种不同的描述经验的格式，广义的来看，无非是某种DSL而已。  顺序执行式：当我需要做一些事情，按照顺序1，2，3这样做下去。  加上IF/ELSE/FOR/WHILE的顺序执行式：在顺序执行的基础上，做一些条件与分支判断，通过循环在减少一些重复代码，然后就差不多了。  Makefile/Rake风格：一件事情，可以分解为多个task，每个task可能存在前置依赖的task，整个任务可以被分解为层层依赖的一堆task。  Config/YAML/XML风格：这是较为死板的一种模式，甚至几乎称不上是描述经验的DSL，而是将各种配置参数，以较为方便阅读的格式写出来而已。目前的Dockerfile，与fig.yml（升级为docker compose之后，变成docker-compose.yml了），可以说都相当简陋。缺乏许多重要的特性。目前只能算是堪堪够用，却远不能称之为好用。  docker build无法带参数，一个Dockerfile只能build出一个结果。假设两个非常接近的image，我也只能写两Dockerfile；  docker compose同样无法带参数，我不能使用同一个yml配置文件，或者启动developement模式、或者启动production模式；  构造容器与组件的很多经验，实际上需要写在这两个文件之外，以某种魔法的形式，在不知不觉中被引入容器；七、针对未来的一些猜想  在dockerfile与fig.yml复杂起来之后，新一轮的DRY式改良，应该会再次出现，函数、参数、模板、include之类的语法也可能会被引入。  如果我们将dockerfile看做是一个用来build docker镜像的底层脚本，说不定可以创造某种更加高级的DSL，用来编译生成出最终的Dockerfile。  如果将来容器大行其道，可以被执行的经验越来越多，分享与交流经验的社区越做yue好，只怕stackoverflow，会渐渐的衰落吧。"
  },
  
  {
    "title": "OpenSSL是否值得同情？",
    "url": "/my_blog/posts/about-openssl/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2015-02-08 10:38:00 +0800",
    





    "snippet": "《界面》的一篇《隐形战友》，引发了霍炬的批评《那些被歪曲的开源软件和OpenSSL的真实历史》然后新浪名博@破破的桥，也写了一篇《针对OpenSSL捐助的讨论》破桥的观点，浓缩以后，是这么一句话：“openssl长期以来代码更新慢，质量差。根本原因是缺钱。它找不到商业模式，大公司不重视。个人用户虽然在用，但对它没任何概念，认捐者寥寥，每年几千美元。”我的批评如下：看了破破的桥的回应。别的不多说，就一条。霍炬说，openssl主要是管理问题，不是钱的问题。而他说：请好的管理人员要钱。也许有些程序员是天生的管理人员，但这很罕见。问题在于，OpenSSL基金会暴露的管理问题，不是需要花高价请优秀的管理人员才能解决的。而是他们犯了很多完全不应该犯的低级的错误！如果我开源了一个项目，然后人家批评我的代码烂。我辩解道：“还不是因为你们都不给我捐款，害我没法雇佣到优秀的程序员，所以漏洞一直存在，代码只能那么烂。”我如果真敢这么说，以后就别再开源圈子里混了。但是，破桥的观点，本质上就是这种推卸责任的逻辑。这就是圈子外的人，常见的想当然了！在开源圈子里，正确的回复应该如何呢？骂我的代码烂，没问题！要么给我贡献代码，要么给我提issue，要么自己fork一个版本自己玩。给钱当然也很好，但是那个不是关键。帮助一个开源项目越来越好的根本，是一个一个的优秀patch，除此而外，全是间接贡献。钱是最间接的。而且这种逻辑，对于那些从来没有收到过捐款，全部是由自愿者业余贡献，但是却非常优秀的开源项目。是非常不公平的！常见的故事应该是：一个开源项目，因为贡献者越来越多，质量越来越好，用户越来越多，才会有商业与个人的捐助出现。如果一个开源项目，在走下坡路，质量越来越差，捐助越来越少，那首先应该反省的，也是开源项目的开发者与管理者自己，而不是倒果为因，推卸责任。以上，是我对破桥文章的一点看法。总结来说，我对与OpenSSL的批评，要远大于同情。"
  },
  
  {
    "title": "转、进、定——我的2014",
    "url": "/my_blog/posts/my-2014/",
    "categories": "Dairy",
    "tags": "Essay",
    "date": "2014-12-31 23:18:00 +0800",
    





    "snippet": "看着很多朋友，都纷纷在总结回顾自己的2014，我也试着总结一下吧，原本想按照往年的传统，选一个年度汉字的，结果思前想后，发现至少需要三个字，才能表达这一年的林林总总。一、转：这一年我有三大转变：  加入华为，而且干满一年了；  开始跑步，而且喜欢上跑步了（不是坚持，就是喜欢）；  彻底离开知乎，而且真的戒掉了；二、进：这是我进步非常大的一年，因为在华为的工作与开源有关、与研发有关，我思考了很多、很多，也有了很多的收获。在多年以后，也许会有人评价，2014年是华为的开源元年，而我们则是这一重大变革的亲历者。从这个意义上来说，我感到非常自豪。三、定：从而立到不惑，慢慢的就能定下来了40不惑，无非是心有定见，眼看马上就要39了，我仔细思索了一下自己的心路历程，渐渐的感到：自己的想法，已经很少左右摇摆，虽然心态依然开放，但判断却很少犹豫，这大概就是一种不惑吧。最后，祝愿所有的朋友，新年快乐，万事如意！身体健康，阖家幸福！"
  },
  
  {
    "title": "不要害怕做一个傻瓜",
    "url": "/my_blog/posts/Dont-be-afraid-to-be-a-fool/",
    "categories": "Dairy",
    "tags": "Essay",
    "date": "2014-08-18 23:26:00 +0800",
    





    "snippet": "　　人人都怕变成别人眼里的傻瓜，所以在微信圈子里《医生不会告诉你的十个秘密》、《在旅游景点小心这五种人》、《常见营销圈套集锦》（以上标题全是我编的，如有雷同，实属巧合）会非常热门，转得到处都是。　　前两天，知乎出了一件大事，因为曾经推荐过一把菜刀，被人大肆攻击，最后因为倍感疲惫，退出了知乎。有人在知乎上提问：「知乎用户为何无法善待在知乎上做营销的人？」。　　其中一位朋友＠Lawrence Li的回答，我非常赞同：『這就是「受過欺負的臉」。看什麼都忙不迭地進入軟文探偵模式、生怕有哪個廣告或哪個植入沒看出來、自己又被欺負了。而一旦看出來、那一定是要嚷嚷的。』　　所以，葛巾在退出的时候说：「作为一个偏时尚类的回答者，不停被怀疑有各种得利，已疲于辩驳。」其实，那些人的所谓质疑，只是想证明自己并非傻瓜，所以「拥有质疑的能力」而已。　　另外一件大事，起初还算一件不错的善举，一群美国的名人与富豪，为了提高人们对ALS(肌肉萎缩性侧索硬化症)的意识，同时也号召人们为ALS联合会捐款，纷纷将一桶冰水浇在自己身上，同时拍下视频，全球传播。他们那边大家都一边捐款，一边浇冰水，一边发视频，玩得不亦乐乎。　　结果到了中国，就出现了一篇文章《刻奇，网络传播的诡异钥匙》，众多读者纷纷大赞：「啊，原来如此，这下就看穿真相了！」，当Fenng说：「这些最能抓住庸众的情感。没错，不是大众，是庸众。」很多人纷纷转载，点赞，打赏，评论，以证明自己足够聪明，并非「庸众」。　　这让我想起以前不知在哪里读到过的一个故事：「某某名人，因为听说某个小女孩生病，急需一笔钱救命。于是他就捐助了一笔钱。事后听说，原来他受骗了，并没有一个小女孩生病。他很高兴的说：那太好了，原来没有一个生病的小孩！」　　这个人，很愚蠢吗？不！他只不过是个善良而乐观的人。孟子曰：「君子可以欺以其方」，简单的解释就是：「君子不怀疑正当的东西，不质疑合情合理的东西——因为，维护一个社会基本的信任底线，比防范受骗还重要。」　　虽然儒家常说「过犹不及」，因为中庸之道才是最高境界。但是，在无法做到中庸时，我宁可遵循自己的本心。　　所以，在我看来：「宁可热血中二，不要冷酷无情」、「宁可做个善良的傻瓜，不要做个冷漠的智者」，因为孔子也曾经曰过：「不得中行而與之，必也狂狷乎！狂者進取，狷者有所不為也。」"
  },
  
  {
    "title": "我能为开源做些什么？",
    "url": "/my_blog/posts/What-can-I-do-for-open-source/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2014-06-11 20:50:00 +0800",
    





    "snippet": "Crmky独立开发Cindy，已经很久了～～～至今只有他一个人。这是一个Java的NIO开发框架，我在上一家公司，和现在所在的这家公司，都已经使用了这个框架。但是，开发人员始终只有他一个人。前天他写了一篇Blog：《目标》，对我有很大的触动。我也一直存在这样的疑虑，为什么我们要用Java开发网络应用？或者说，使用java开发的网络应用，难道注定只是一个快速原型，就像当年用VB开发桌面应用？一旦需要面对性能需求时，就得推翻过去的工作，用C/C++重新实现一遍？现在，目标已经很明确了——“无限接近于C/C++效率的java网络框架”。这是Cindy的终极目标，而我则相当确信，我一定要为这个目标，做出贡献！现在，我已经是Cindy项目的第二名成员了。:)正好今天看到一篇Leal的blog。我能为开源社区做些什么？  zoomq在woodpecker上写道：  每日至少抽一刻钟解答列表中初学者的问题，  每周至少抽两小时整理新学知识，用Blog/Wiki/mail将体验发表/分享出去,  每周至少抽四个小时来翻译自个儿喜爱的自由软件的文档，  每月至少抽八小时编程，推进自个儿的项目，  每年至少参加一次自由软件的活动，传播自由软件思想，发展一名“自由人”……  只要我们每个人都坚持下去……  10年！就足以改变中国软件的整体风貌！自接触电脑以来，自由/开源软件也一直给我诸多帮助和乐趣，Linux、Python、Vim凡此种种。当我有些业余时间，有些体会和收获时，又该为自由/开源社区做何回馈呢？我的思考是：参加一个项目，或者发起一个项目，使用一个项目并且提交反馈，宣传一个项目。不要仅仅是感叹中国开源项目的水平。如果你是一个程序员，那么，你也可以为之做点什么。原文写于：2006年3月27日，这时候，我还不知道zoomq就是大妈，这也是我第一次写出自己对于开源的看法，现在想来，还是比较稚嫩的呀。"
  },
  
  {
    "title": "图形用户界面(GUI)应用开发的两种思路",
    "url": "/my_blog/posts/GUI-2-ways/",
    "categories": "Thinking, IT",
    "tags": "SoftwareEngineer",
    "date": "2014-06-11 20:30:00 +0800",
    





    "snippet": "一个初步的想法，先简单说一下。  最初的图形用户界面，都是代码堆出来的，用代码来画界面，用代码来响应事件，用代码来处理事件。  OO风潮一起，GUI的框架自然也要跟进，基于控件的GUI开发，大行其道。  最初的Web，根本无法与GUI应用同日而语，反而能够不受太多OO思潮的干扰。独立发展出了：结构、表现、行为三分离的架构模式。也就是XHTML、CSS、DOM/ECMAScript。  基于控件的开发，封装细节，因此也各自独立。大家通过消息机制来沟通。这样就导致有一部分逻辑是被封装在控件内部，另一部分则散布在控件“四周”。  DHTML-&amp;gt;AJAX-&amp;gt;XUL这样的发展思路，显示了另外一种开发GUI应用的可能性。结构与表现分离，要修改界面效果，自然是修改CSS来得方便。结构与行为分离，自然能够对所有的“动作部分”集中思考。个人认为，后一种GUI应用开发的架构模式，是更加合理的。原文写于：2006年1月21日，以Web的方式来开发桌面应用，是一直存在的思路，不过，至今也没有变得流行起来。只是在移动领域，以HTML5的方式开发倒是变得越来越流行了。"
  },
  
  {
    "title": "定论——软件开发的方法论探讨",
    "url": "/my_blog/posts/Definition-of-Software-Development/",
    "categories": "Thinking, IT",
    "tags": "SoftwareEngineer",
    "date": "2014-06-10 19:46:00 +0800",
    





    "snippet": "一、消除隐喻1、隐喻软件开发这件事情，出现得很晚。距今只有几十年的时间，关于它的定义，我们可以简单地说：“就是把软件做出来。” 这基本上等于什么都没有说。而软件开发究竟是怎么回事，大家也没有搞明白，于是隐喻就派上用场了。当你要向一个完全没有概念的朋友，解释什么是软件开发的时候，你无法向解释建筑工程那样把他带到现场去看——案件开发的现场，你的朋友会以为软件开发就是一群人坐在电脑前面打键盘——你只能打比方：它就像是造一幢楼，有基础，有结构，有可以使用的房间，在这之前必须要设计，最后一样要通过验收，最终用户就能够住进去——哦，不，是可以使用软件的各种功能。这样，你用上了一个隐喻：软件开发就像建筑工程，或许极可以称之为软件工程。还有其它一些隐喻：比如手工作坊与软件工艺。我们不会说建筑工程就像什么什么，它们都有自己鲜明的特点，不需要通过像什么什么来解释。但是软件开发，还是太年轻，也缺乏鲜明的特征，只能借助隐喻，我们才能向人们解释它。在这条路上，很多人都已经走得太远，隐喻不但被用来向外行解释什么是软件开发，居然被用来说服自己人，软件开发就应该像那个比喻的对象一样，具有类似的规范、过程、特征以及方法论。但是，比喻只能是比喻。软件开发的方法论，只应该从软件开发的本质推导出来，而不是从一些隐喻里抄袭过来。2、另一个隐喻佛教有一种说法：“佛法不过是一条渡船，过河之后，你就不再需要它了。”寻求软件开发的本质，也许还是需要隐喻的帮助，只是这些船能不能把你带到彼岸，要仔细辨别。设想这样一个场景：在公安局的一个办公室里，你的对面坐着一个目击证人，而你是一个犯罪肖像画家。这个证人在讲述他还记得的罪犯特征，你一边提问，一边在纸上沙沙的画着。一开始的提问与回答总是很概要性的。“圆脸”“不，很瘦的长脸”；“戴眼镜？”“是的”。在纸上出现了大致的轮廓之后，对话变得比较琐碎，“眼睛再小一点？”“鼻子比这个大一些。”渐渐的，证人的话越来越少，而且不断地端详着纸上的那个人，而你还在做一些细小的修正。突然，证人激动地大叫起来：“就是他！就是这个人……”于是，你的任务完成了！这个过程像不像软件开发呢？有人也许会说，嗯，软件开发就是这样的。不！其实软件开发，并不是这样的，它应该是这样的……你的朋友，晚上到你家来了。“我昨天晚上做了一个梦，梦见了我这辈子见过的最美的女孩，你帮我把她画出来吧。”“她的脸是……”在一段又一段如梦如幻的描述之后，你开始画起来，过程与前面有点类似，但是，似乎你的朋友没有停下来的迹象，他不断的要求你改进，希望这个她能够更加完美。终于，他放弃了：“就这样吧，虽然不是她，但是已经很像了。”你长吁了一口气，但是，你的朋友疯了，他恳求你把这个女孩变成一个活人，能跑能跳，能够跟他交流，而且还能够爱上他。没想到，其实你不是人，而是上帝，而且你大发慈悲，竟然真的满足了他的要求。终于，他满意地回去了。但是，几天之后，他又来了，他居然因为还不够满足，又来了！“上帝，”他恳求道，“你能不能够帮我把她改一下，当我……”随后的日子里，他不断地找到你，要求你再完善完善他的女人。直到有一天，你发了一道闪电，劈死了这个贪得无厌的家伙。不不，最后这一幕没有出现，因为根据软件开发及维护合同，你不能劈死你的客户！（我敢打赌，是个程序员，就想过这么干。）如果这个合同签得不够好，他真的有可能向你提任何要求。3、消除隐喻这个隐喻怎么样？这是对软件开发过程的一个好的描述吗？不，它还不够好，而且我们不可能通过修正完善这个隐喻，来得到一个对软件开发的准确的描述。事实上，所有的隐喻都不够好，都会扭曲软件开发过程的真相，都会使我们对软件开发的过程产生误解。为什么会这样呢？为什么一个挺像软件开发的隐喻会最终误导我们呢？原因在于一个隐喻是一个完整的场景，这个场景中有很多相互交织的“概念要素”。当这些要素有很多在软件开发中出现时，我们就会认为这个隐喻很贴切，而当一个隐喻越是贴切时，这个隐喻中的其他一些在软件开发中不存在的要素，或者与软件开发相矛盾的要素，就会打扰我们的分析，干扰我们的判断。使得我们不再思考软件开发本身，而是将思考建立在某个隐喻的场景中。这样思考得到的结果，肯定存在着误导的可能。再由于不同的隐喻互不相容——你无法想象一群工匠去建设现代化的高楼大厦，他们最多只能造些平房——因此，建立在各种隐喻基础上的软件开发，至今没有找到适合自己的方法论，倒是不同的隐喻之间互相打得火热。4、分析各种现有的隐喻：1)工程隐喻在各种隐喻中，建筑工程与软件开发的关系最为密切，这个隐喻与软件开发的相似之处最多，因此影响也最为深远。这个隐喻有四个要点：分解、分配、设计和阶段化。分解是一种极为深刻的思想，将整个过程分为几个阶段，将整个任务分解为几个子任务，将系统分解为多个层次，多个模块，将需求划分为多个类型等等。这样的思路，是解决复杂问题的唯一正确的方法，一团乱麻的需求、任务、项目、设计，根本不可能成功。但是分解也意味着它最好第一次就划分正确，当任务被层层分解，变成了很多很多的子任务、模块、子模块、类的时候。你发现有一个子任务的分解有问题，修改的困难可能极为惊人，而软件开发，在第一次就划分正确的情况，几乎绝无仅有。分配与分解一样，是工程隐喻所特有的，当一个需要完成的系统，已经被仔细的分解之后，分解的粒度会达到一个人能过独立完成的范围，然后根据现有的资源以及任务的前后依赖关系，合理的分配给各有不同能力和特长的人，没有这样的分配，项目同样会一片混乱，而这个隐喻还包含一种（支配关系），存在分配的人与被分配的人，层层分解的任务与层层分解的人力资源，使得整个项目成为一个严密的金字塔结构，而这样的结构，往往使得项目的应变能力与可能性，随着项目的扩大而缩小。基于以上的两个要点，工程隐喻极为顺理成章的推出了这样一个结论：“必须严格的控制需求的变更，如果可能，将所有的变更都顶回去。”纯正的软件工程的思想中，任何需求的变更都是不受欢迎的。设计极为重要，无论是对于建筑还是对于软件开发来说，都是这样。但是设计与设计不同，在建筑行业，不体现设计师理念的建筑，会被称为没有灵魂的“水泥块”。但是在软件开发里，如果开发人员老是想着往程序里加入自己的东西，会被称为过度设计。但是由于软件开发对于建筑工程的模仿，过度设计变得比比皆是。在建筑工程中，有着极为清晰的阶段划分，分析、设计、施工、验收。最早的软件工程，就是完全模仿这样的阶段而执行的。这样的模仿，后果是严重的，因为这样的阶段不是软件开发的特征，强行套用，大多失败。随后的改进似乎总也跳不出这个思维模式，就像用无数的直线去拟合一条曲线，用N多个正方形去拼出一个圆形。比如说螺旋式开发，在一个螺旋中，还要搞出四个象限，使得软件开发的过程，不断的重走这四个阶段。但是，软件开发的过程，真的是像建筑工程一样吗？2)流水线隐喻产生式编程和MDA，是所有“银弹”承诺中，最为大胆的两种。如果有一天世界大同，万物升平，人间与天堂无异，那应该就是MDA的时代来临了。这两种思路的理论依据（如果这能称之为理论的话）何在呢？其实还是一个隐喻：流水线。当然他们不会直接用普通的流水线来做比喻，而是一种比现代工业中最为先进的柔性制造流水线还要先进的“超级无敌自定义流水线”。用户（对，就是最终用户）可以选择、定义并且画出那个“软件装配图”（UML之类的表示方法），就能直接组装出用户想要的软件。但是，这样的隐喻其实无法用于软件开发，甚至无法用于工业生产的大多数领域。在工业领域，大多数流水线 还是用来生产有限种类的产品，种类多到一定程度之后，流水线的效率根本无法体现。当然成本优势也无法体现。这还是一个零件的粒度问题，大粒度的零件组合，使得生产的可能种类减少，而小粒度的零件，又使得装配成本与效率无法体现，这样的两难，在软件开发上同样存在，而且更加严重，所以这颗子弹，不可能是“银弹”。3)舞蹈隐喻CMM本身不需要隐喻，它的理论基础来源于纯正的软件工程，所有软件工程有关的隐喻，CMM都用得上，但是CMM有它自身的特点，主要是在CMM的实施方面。我看到过一个关于CMM实施的隐喻：软件开发就像跳舞，软件过程改进就像是舞蹈编排，软件开发人员在过程改进专家的知道下，就像舞蹈演员在舞蹈编导的知道下，学习新的节奏、动作。最后开发出令消费者满意的软件产品。就像舞蹈演员为观众带来出色的表演。这样的隐喻，为一个巨大的咨询市场开辟了道路；最天才的舞蹈演员，也不能没有编导的知道，所以想要公司提高CMM等级，就必须找专家来做咨询，果然巧妙！但是这样的隐喻，却经不起推敲，舞蹈编排过程中，演员们排练的目标是达到编导的要求，如果演出的效果不好，自然由编导负责。但是软件开发过程的改进，如果也是为了博得咨询专家的满意，到时候软件开发出来不赚钱，那些专家可不会负责。他们早就赚到咨询费，走人了。关键问题在于，过程改进只能是一种手段，它本身不能成为目的，更不能想当然的认为，完美的过程就一定能带来完美的产品。舞蹈编导不是观众，没有一个编导敢保证自己的这次创作，一定能赢得观众的好评，但是为什么现在CMM专家，就敢作出这样的保证呢？当舞蹈演员在一个“三角形的舞台上”，完美的跌落的时候，谁会为这样的悲剧负责呢？4)工匠、工艺隐喻说到工程隐喻，现在大家自然会想到最近出来的《软件工艺》这本书。如果工程的隐喻有问题，那么工艺怎么样？如果工程师的隐喻有问题，那么工匠怎么样？按照软件工艺的说法：“如果项目中的成员不具备执行项目过程所必备的技能，那么纵有世界上最好的过程，也无法挽救项目失败的命运；与此相反，真正优秀的开发者，能够让任何过程，发挥最大的作用。”真的就这么简单吗？工匠与工艺的隐喻，与工程相对，但是这样的对立，并非如《软件工艺》所理解的那样，是由于不同的复杂程度而做出的不同的选择。如果2000个人年的项目，我们应该采用工程的隐喻，5个人年的项目，我们应该采用工艺的隐喻，那么50个人年呢？500个人年呢？我们是不是有可能将两种不同的隐喻像调鸡尾酒一样，选取适合的比例，然后调制起来呢？这样具有的“颠覆性”的理论，我想作者也没有考虑过如何与工程隐喻相调和吧？在工艺隐喻中，还有几个特点，质量、培训、高手。工艺隐喻，意味着工匠（程序员）会在自己的作品上签名，并终生为之负责（这与XP是有区别的）这样就能保证质量。但是我们知道，手工制作就意味着质量无法保证，第一次与第二次不同，第二次与第三次不同，现代工业比起手工业来最大的进步，就是能够保证一个始终如一的质量水平。所谓为自己的作品负责的荣誉感，最多只能保证我能够在“事发之后”找到人来修补，却不能保证我免受这样的损失。软件质量更多的取决于一个开发团队的能力，而不是他们愿意为之负责的决心与荣誉感。如果真的那么简单，中国男足立了那么多次军令状了？早就该有成效了吧？培训开发人员，当然是非常重要的，但是现在软件开发中较多使用的“新手”，并非“工程隐喻”的罪过。作者设想的学徒的过程，也并不与软件工程相矛盾，这在日本的软件工程实践中，可以得到证实。不客气的说，这样的浮躁，不是软件工程的责任，而是文化的问题。可悲的是，中国的软件产业，较之美国，更为浮躁。高手是宝贵的，但同样也是稀缺的。一个公司或者一个项目团队，不可能全由高手组成，再者，对于一个项目来说，所有的活都让高手来干，也同样是浪费。在这里还要指出作者的自相矛盾之处。一方面，作者强调“师—徒”式的培训，另一方面，又想把低手从公司里赶出去。那么究竟该怎么做呢？如果一个项目内，低手比高手还要多（这是几乎是必然的）。这样的项目应该如何组织呢？任务如何划分呢？作者没有告诉我们。因为在工艺里面，学徒做的可能是毫不重要的，甚至是重复的劳动，只是为了学习。但是在软件企业，谁来为这样的学徒买单呢？工艺的隐喻，新则新已，好就未必。这本书，就是那种“用隐喻来思考的产物”。真要照做，只怕危险。5)敏捷的场景敏捷开发与其它模式不同，它似乎没有隐喻，但是，还记得我们是如何定义隐喻的吗？一个隐喻是一个完整的场景，这个场景中有很多相互交织的“概念要素”。 当这个场景中多出了与软件开发无关的要素时，就会误导我们。敏捷开发是一个逼真的场景，这个场景不是像软件开发，它就是软件开发，它没有多出任何东西，因此，这样就完美了吗？不，它却少了很多要素。当一个逼真的场景，向你描述了一个成功的，但是却却少了很多要素的软件开发项目时，这样的场景同样会产生误导，会使你认为其他的要素，都是不重要的，至少是可以在大型项目中才需要考虑的。我说的要素，并非CMM的KPA，或者RUP里的关键活动，然后通过剪裁就能得到XP那样的要素。而是指关键的概念，缺少关键概念，故事就会显得虚假，那么在敏捷项目中，缺少了什么呢？时间概念，成本概念以及分工概念。在一个又一个的迭代周期中，什么时候，项目算是完成呢？这个完成，由谁来决定呢？似乎敏捷开发面对的是一个User Story集合，多一些，少一些，都没关系的。如果用户给定时间，功能的多少，就得由开发人员决定。反之，如果用户要求必须数量的功能，开发时间的多少就得由开发人员决定。这样的项目，可以说简直没有压力，这是咱们梦寐以求的项目，但是这可能吗？再说成本概念，同样的道理，合同是在开发开始之前签订的，但是按照敏捷开发的场景，能开发出多少东西，需要多少时间，都是不一定的。那么成本如何确定？如果成本无法确定，这个合同可能就会有一方要吃亏，这样的合同，谁去签呢？再说分工概念，敏捷开发是程序员提出的，而且完全是从程序员的角色出发，在他们的故事里，除了用户，就只剩下了程序员，你也许会说，还有项目经理呢！但是，那只不过是一个名称而已，他不过就是一堆程序员里最有权威的那个。那么其他角色呢？你在敏捷开发的故事里，看不到界面设计人员，看不到独立的、专职的测试人员，看不到数据库管理人员（随着设计的浮现，也许项目进行到40%时，程序员中会有一个人，转而承担较多的数据库管理的职责，但是这并不一定）看不到产品经理，看不到用户手册的编写人员，看不到客户培训人员（XP认为客户会和程序员一起工作，但是那些没来的可能谁去培训呢？）也许XP的支持者会说，“嗨，我们又不是要开发巨型项目。”但是我要说的是：“不管有多大的项目，一定会有不需要、也不应该程序员做的事情。”作为一个软件开发的方法论，就必须包含对这些工作的探讨，一个完全从程序员本位出发的，不考虑其他工作的方法论，不是一个完整的方法论，这样的场景如果被普遍模仿的话，也是相当危险的。6)银弹隐喻《没有银弹》如此著名，以至于无论它的赞同者还是反对者，都无法回避它的存在。但是银弹究竟是什么呢？“没有银弹”究竟意味着什么呢？首先，“银弹”是一个隐喻，它的本意是能够杀死人狼（一种怪兽）的武器。用在软件开发里，银弹是什么，用通过追问“什么是软件开发中的人狼”来得到答案。在一个项目中（在一个村庄里），出现了一个困难（出现了一头人狼），如果任由困难存在，项目就会失败（如果没有办法赶走人狼，村民就会受害），一种方法出现了，解决了这个困难，项目成功了（银弹出现了，打死了人狼，村民获救了）。所以我们可以这样理解：银弹就是能够保证项目成功的方法。但是，如果Brooks真的这样简单的推出自己的结论，那么大家都会说；“废话，谁不知道，没有一种方法能够保证项目的成功？”Brooks的水平当然远不止此。但是很多人对《没有银弹》的理解，却事实上到此为止了，然后他们就拿着这个结论，四处“传道”开来。Brooks更进了一步（或者说退了一步），他将保证项目成功的目的，弱化为提高项目效率的目的，并且给出了一个看起来能够量化的标准“单一技术，十年之内，提高十倍以上的效率。”（可靠性和简洁性根本无法量化，咱们先不讨论）但是，我们知道，如果一个论断无法证实，又无法证伪，这个论断就毫无意义。那么我们如何能够检验他的这个论断呢？首先我们要能够明确，什么是单一技术？软件工程算单一技术吗？CMM体系算吗？CMM里的一个KPA呢？UML算吗？设计模式呢？XP呢？还是XP中的结对编程呢？怎么才算单一？没有界定！也无法界定，包括Brooks，也不能告诉我们，什么算单一技术？然后我们还要确定，如何比较开发效率，如何量化？严格的说，必须证实两组能力，知识水平，人数，了解的信息都完全相同的人马，在互不交流的情况下，同时开发一个项目，都达到了一组项目的目标（即不是不够，也不是超过），然后两组人的开发时间，是否相差十倍。再者，当我们要证明单一技术的功效时，必须保证这两组人马只在这一项技术上有区别，其他都一样。最后，当我们要证明十年之内的差别时，还要保证十年后的这组人马，与十年前的那组人马使用相同的软件、硬件设备。（十年前是什么操作系统？WIN32？CPU呢？486？）这样的研究，才能够算是精确的验证。但是这样的验证，没有，也不可能有人去进行，自然这样的论断也就毫无意义！可笑的是，居然有人，当真去寻找银弹的证据，并且兴奋的宣称找到了，最近还有一家著名的公司，出版了一本的著名的杂志，名字就叫《银弹》！但是，最可笑的还在于，Brooks居然还写了一篇《再论没有银弹》，宣称自己的论断，已经基本上成立了。如果事情到此为止，那么Brooks也不过就是跟大家开了个玩笑罢了。但是Brooks更进一步指出：“软件开发分为根本问题与次要问题，根本问题占软件开发的90%的比重。而且很难被很好的解决。”一方面，我们要说：“这样的认识很有必要”，另一方面，我们也要说：“这样的论断，毫无疑义。”因为它既不能被证实，又不能被证伪。90%从何而来？如何证实？我们无法得知。我相信，10年，10倍，根本就是他随口说出的一个数字，同样的，90%也不过是一个“印象”。当不得真，作不得数，也无法用来指导我们的实践，更无益于我们提高软件开发水平。这样的玩笑文字，竟然风行世界，备受瞩目，的确是软件开发的方法论，还处于蒙昧的“隐喻时代”的最好证明！二、追求定论这篇文章的标题就叫定论，那么什么是定论呢？就是不再有异议的结论。就是每个人都能同意的结论。A方法比B方法好，好在哪里？好多少？为什么好？我们追求定论，就是追求一种有效的比较和评价标准。软件开发有那么多方法，有那么多过程，那么多“最佳实践”，但是却从来没有定论，为什么没有定论呢？因为软件开发的“方法学”还处于蒙昧的“隐喻时代”，各家各派，都从自己的隐喻出发来看问题，所谓“鸡同鸭讲”，指的就是这种情况。但是追求定论的努力，并不是从我才开始的。在此之前也有人追求过，这样的努力，统称为——“软件度量”，这当然是典型的西方观点：能够量化，就能够比较；能够比较，就能够改进。这样的观点，一点没错，但是还少了前面一句，首先要理解，才有可能量化。如果我们不能真正理解软件开发的本质，就无法判断哪些可以量化，如何量化，以及度量得出的数据又该如何解释，数据的重要性如何？不能回答这些问题，追求定论，依然是不可能的。请允许我先把话题扯远一点，谈一谈管理学，谈一谈泰勒以及泰勒之后的管理学。1.“科学管理”与“泰勒式管理”泰勒是毫无疑问的科学管理之父，为什么我会起这样一个标题呢？“科学管理”和“泰勒式管理”还有什么不同吗？所谓“科学管理”，在我看来，就是以科学的方式研究管理。而泰勒正是以这样的方式研究如何进行管理的第一人。在泰勒之前的所有管理，无论好坏，都只是停留在经验的层面，而经过泰勒的科学方式的研究，管理也终于可以当之无愧的称之为一门科学，而泰勒以这样的研究方式，得出的结论，就可以称之为“泰勒式的管理”，这两者并不能等同。我们知道，一个科学体系，包含两个方面，假设（公理）与逻辑推论。从哲学上来说，我们把假设称为世界观，而把推出结论的方式，称为方法论。无论谁来研究管理，只要他运用的是科学的逻辑的方法，我们就可以称其为“科学管理研究”，而如果他的初始假设与泰勒的不同，那么他得出的结论，就不是“泰勒式的管理”，但却肯定是“科学管理”。无数的人可以有无数种不同的假设，那么我们如何判断哪一种假设更为合理，得出的结论更有价值呢？答案是：通过解释和预言。一套理论，必须自洽，也就是仅仅依靠本体系内已知的，有限的假设，通过逻辑推理，能够解释所有已知的、相关的现象。其次就是通过推理得出的预言，要能够接受验证，并且不被证伪。两种不同的假设得出的不同的预言，就能够通过验证，判断他们的胜负。而在预言没有被证伪前，该理论体系，就和其他尚未被证伪的理论一样，是有效的。而所谓的伪科学，就是只能解释，无法给出预言的理论。“泰勒式的管理”，首先被证明是有效的。通过发现或者发明某个具体岗位上的最佳办法和最佳工具，大幅度的提升了工作的效率。以搬运生铁为例，工场工人裁减数从400～600下降到140，人均工作量从每天16吨，上升到每天59吨，人均收入从每天1.15美元上升到每天1.88美元，平均费用从每吨0.072美元，下降到每吨0.033美元。另外还有更为重要的效果是在工人本身，工人中喝酒的人大为减少，浪费钱的人也少了，因此都比以前生活得更好，他们把自己的顶头上司和教师，看成是最好的朋友而不是强逼他们做工的人。泰勒的研究方式十分科学，他寻找并假设了影响工人效率的几大因素：技能、工具、激励、外部环境。并一一研究这些因素对于效率的影响，进而通过实验的效果来得出结论。这所有的一切，都没有什么错，只是当时的科学研究，尚无法证伪泰勒的诸多假设。而这些假设，也只有通过更进一步的科学研究，才有可能证伪。这个研究在管理学历史上大大有名，被称之为：“霍桑试验”，由乔治.埃尔顿.梅奥主持。“霍桑试验”原本是一次典型的“泰勒式的科学试验”。根据科学的思维模式，一个待研究的系统，接受很多输入变量，也产生很多输出变量，在严密的、可控的、量化的输入变量的变化情况下，观察输出变量的变化，通过一系列的数据去分析系统可能的数学模型，而“霍桑试验”的第一阶段，就是要研究各种外界工作条件，对生产率的影响。他们把女工分为试验组和控制组（始终不改变条件，以作对照）然后每次试验只改变一项条件，比如照明条件，工间休息时间和频率，工作日长度等等。按照试验计划，第3、第10和第13试验期的工作条件将完全相同。但实际记录到的产量，却分别是：2500、2800、3000。这是完全不符合预测的，也不是简单的测量误差可以解释的，更令人不解的是，对照组的产量也在持续的提高。这究竟说明了什么问题？到底是哪里出错了？梅奥是这样分析这个问题的：他认为存在着两种研究方法，“临床式研究”和“实验室”式研究。“临床式研究”的目的在于对事物的本质形成正确的认识，并学会处理实际材料的技能，在此基础上，进一步区分哪些方面可以继续进行更详细的“试验室”式研究。如果随后的“试验室”方法由于排除了某些未知的重要因素而归于失败，研究人员就应当回到“临床式研究”中去，以便弄清自己忽略了哪些因素。而在我看来，所谓的“试验室”研究，就是在不动摇基本假设的前提下，进行逻辑推理，对照现实，丰富理论的细节。只有当这一理论的预言失败，或者出现无法解释的现象时，基础假设才会被置疑，研究者需要重新去寻找能够解释现有现象的新的假设，这样的研究往往非常困难，而且一旦成功就一定意义非凡。这在科学哲学上，被成为“范式的转换”。科学范式的转化，从来都不是科学的失败，而是科学的重要的，甚至是跨越式的进步。在管理学上，从“经济人”假设转换为“社会人”假设，就是这样一次重要的进步。但是却有很多人，既不了解科学进步的规律，也不了解管理学的演变，却简单的认为人际关系学派的兴起，就意味着科学管理学派的失败和错误，并进而认为科学管理学派的失败，就意味着以科学方法研究管理底失败，这样的误会，实在是太不应该了。2.探寻假设在探寻软件开发以往的方法论背后的假设之前，首先要指出的是，这些假设很难被发现，不是说它们不存在，而是这些加上很少被看成是假设，往往作为理所当然的一部分，被排除在常规的思考范围之外。让我们来看几段大家都很熟悉的文字吧。  “大多数大型软件项目都没有达到预期的目标，交付推迟，预算超支，功能不完善。许多软件项目彻底失败了。”　　　　——FDD  “当前，软件开发的情况并不理想。很多系统最终不能交付，或者最终交付的系统经常性地发生延期或者超出预算；系统常常不能满足用户的需要，其结果是不得不一遍又一遍地开发。”　　　　——AM  “许多软件项目，或许应该说大部分软件项目实际的开发周期比预期的要长，实际的花费比预期的要多，实现的功能比预期的要少。这造成了严重的质量问题。”　　　　——某一本CMM的书籍怎么样，是不是似曾相识？我敢肯定，你不只在一本书的序言部分，看到过类似的文字。无论这本书写于70年代、80年代、90年代还是21世纪。情况一直都是这么“糟糕”。有趣的是，这些书都会在“痛说软件开发现状”之后，转而兜售自己的方案。当然，在Brooks的《没有银弹》之后，他们兜售的语气谦虚了很多。作为一个文化现象来说，这非常值得细细品味。但是，我们需要追问的是：为什么？难道软件开发是全世界最难的事情吗？为什么失败率如此之高？如果我们在使用了层出不穷的手段之后，还是不能提高成功率，我们应该怎么办？其实也很容易，当年我的一个老板就想出了一个绝妙的办法，绝对简单，就是将我自己的工作量估算乘2！我们的项目几乎从不失败，总是能够在计划时间内完成。于是我想，如果我们把全世界的软件项目估算都乘以2的话。也许软件开发这个行当，也能成为一个有尊严的职业。大家都会生活得更加幸福。“这实在是太过分了！”也许有人会说：“你这是自欺欺人、掩耳盗铃、移靶就箭！”但是且慢生气，生气的人应该冷静下来反思：如果目标如此难以达到，会不会是目标有问题呢？当然，事情没有这么简单，如果把目标直接乘2来提高成功率，全世界的老板都会发疯的！我们要做的，是提高估算的准确性。“啧啧，还以为是什么了不得的结论呢！这个问题早就有人研究了，不就是IT度量吗？”一定会有人站出来这么说。但是，IT度量的研究，提高了估算的准确度了吗？思路在这里被卡住了。直到有一天，我看到了量子力学中的“测不准原理”！“测不准原理”告诉我们，在物理学中存在着很多对变量，当我们想要精确测量其中一个变量时，对另一个变量的测量误差就会越来越大。但是，在软件开发里，我们是进行估算，而不是进行测量，而且也不存在一个和工作量相对的变量，当工作量估算准确时，它会变得模糊。简单地套用物理定律是行不通的，思路又卡住了。突然有一天，我问自己：“假设工作量已经估算精确到了99.9999％会出现什么情况？”“不可能！”“如果真的达到了这个精确度了呢？”我对自己穷追不舍。“那只有一种情况，就是项目已经接近完成了！”“我们估算完成时，项目接近完成，这意味着什么呢？”“这毫无意义，没有一个项目会花这个多时间来估算，而且如果要这样估算，估算本身要花多少时间都不知道。”停！我已经想通这个问题了。估算工作量也是一种工作，同样也需要工作量。对于大多数任务来说，估算所花费的工作量，相对与总的工作量来说，几乎可以忽略不计，或者说：为了能够得到一个有指导价值的估算值，所花费的工作量，几乎可以忽略。但是，对于软件开发来说，这只是一个假设。我们假设对于软件开发的工作量估算，同样只需要花费极少的工作量。但事实上，当我们花费三五天时间得出结论，这个项目需要20个人月时，我们估算的误差，可能（甚至一定）会大于200%这就是我们这个行业显得如此失败的原因。为什么这个行业与其它行业不同呢？在建筑行业，工程概预算的费用，不超过总费用的百分之一、甚至千分之一。为什么软件项目的估算做不到这一点？因为两个原因：一是由于技术的复杂性，以及这个行业技术的飞速发展（也可说尚未定型），同样的需求，采用不同的设计，不同的技术实现，工作量相差极大。仅仅根据需求，无法估算出工作量。而随着概要设计、详细设计的层层分解，工作量估算的精确度的确会提高，但是对于软件开发来说，项目也越来越接近完成了。二是由于需求的变动性以及不可预测性。早期的估算、设计甚至代码，都有可能作废。一个项目实际上重做了N遍，在软件开发领域也是常有的事。估算的误差，自然也就大到不可思议了。然而，绝大多数人没有想过这个问题，大家都自然而然的根据最初的工作量估算，来评价以后的工作。  工作量/人员效率＝项目时间  工作量×单位成本＝项目成本  缺陷总数/工作量＝软件质量我们根据最初估算的工作量，来推出项目的时间、成本和质量目标，我们假设工作量估算只花费可以忽略不计的工作量，我们依据这些目标来衡量项目的成败，然后我们发现大多数项目都失败了，然后我们研究技术、改进过程、寻找银弹！最终，我们发现自己还是这么失败！是到了彻底反省我们的假设的时候了。（注：Brooks在《人月神话》中指出了另一个重要的假设：人与月是可以互换的。）三、软件开发的特征软件开发究竟是怎么一回事呢？在我的前一个连载《敲响OO时代的丧钟》里，我也讨论到了软件开发的实质，自己引一段来用用。  软件开发的定义：“软件开发，就是在一个受到限制的环境中，利用环境提供的可能性，修改或添加环境允许的各种状态，去满足某一组需求。”1) 软件开发所处的环境，不仅仅是一个限制，同时也是一个可能性。软件的能力，局限性与硬件的能力，比如说，如果计算机没有喇叭，那么任何软件都不能使计算机播放音乐。但是，另一个必须考虑的方面是，同样有能力发声的计算机，要想使他播放音乐，可能很容易，也可能很困难。用专业一点话来描述就是：“有些硬件的API设计很合理，有些则非常愚蠢。”由于我们对于软、硬件的定义是一个连续体，因此，这个观点不只是可以用来评价硬件API设计，也可以用来评价语言、虚拟机、框架、平台等等软件的一个方面的优缺点——是否有利于二次开发，这是一个重要的评价标准。2) 修改、添加状态，比较拗口，其实就是编程的意思。在一个受限制的范围内编程，我们需要考虑很多东西，语法、接口、规范、内存大小诸如此类，当然，不同级别的，不同领域的编程，需要考虑的限制是有巨大差别的。软件开发的水平高低也就体现在，满足同样的需求，有些方法速度更快，有些方面却要慢很多。而软件开发的方法的选择，受到很多因素的影响：环境限制，经验多少以及对于需求的了解程度等等。3) 满足需求，是啊！提起这个需求，每一个程序员都会有好多的苦水要倒出来。为什么满足需求就这么难呢？因为，对于程序员来说，那是另外一个世界(这是比较客气的说法)，那些提需求的家伙根本不懂怎么说话(这个说法稍为激烈一些)，那是一些不知道自己要什么的蠢货(你遇到过这样的用户吗？)作为程序员，我知道我有很多同行，非常苦恼于与客户谈需求这样的任务——“至少电脑不会出现前后矛盾的逻辑错误”——这就是做程序员的难处。如果我们不仅仅是抱怨的话，也必须承认，程序员是非常挑战的职业，一个好的程序员，不但得是软件开发领域的专家，还得是他开发的那一类软件所在领域的专家。但事实上，其他行业的人，只需要做一种专家就能够混得很好了。软件开发的实质，与软件开发的特征之间，还是有区别的。毕竟我的前一篇文章，是从技术的角度出发来看软件开发，而现在我们的要讨论的是从管理的角度来看待，它又有哪些特征呢？软件开发的管理特征，在外行看来，也就是一堆人在做个东西。但是，软件开发的独特之处就在于，软件开发是由一堆独特的人，以独特的方式，做独特的东西。我们先来看看软件开发，遇到了哪些独特的困难：1、沟通困难：同为软件开发，可能面对的思维模式，是完全不同的世界。比如二进制的世界，函数的世界、逻辑的世界、过程的世界、对象的世界、二维表的世界等等等等。在这些不同的世界中开发软件，需要的思考方式、思维习惯都是不同的。开发项目大到一定程度以后，不同的世界必须在一个完整的项目中和谐并存，这些差异，有时候就会带来沟通障碍。再加上技术与需求世界之间的差异，沟通成为一个非常重要的工作。软件开发中的人与事，如何才能有效沟通，是一个非常重大的课题。2、控制困难：程序员都是些怪人，至少都是些聪明人。要让他们听话，很难啊。一个项目，要想顺利进行，程序员们能够接受的，必须是“稳定而合理的命令”。而在软件开发过程中，往往需求频繁变动，领导层层叠叠，用户花样百出，计划一改再改。程序员们经常会接到朝令夕改的命令，而且还来自于那些莫名其妙，连说话的逻辑都成问题的家伙。如何才能知道，那些小伙子是在严格地执行命令而不是在那里磨洋工呢？3、评价困难：要控制，必须要能够赏善罚恶，但是在软件开发中，何为善？何为恶？如何评价一个程序员的工作？我们当然可以在项目计划该结束的时候，再去问他们，做完了吗？但是如果他们那时候没有完成，再要挽救就来不及了。必须在项目开发过程中建立即使有效的反馈机制。以小而高密度的评价手段，来对开发过程进行较为准确的控制，这一切，都必须建立在合理的评价机制的基础上。但是，这样一套评价机制，非常困难。什么才算是好的需求分析？好的代码？好的设计？好的测试用例？没有定论。举个例子：两三年前，在项目中加入EJB的成分，越多越好。现在呢？设计人员，随时都可能被人指责滥用EJB。这风向变得也太快了。4、估算困难：这个在上一章我们也讨论到了，软件开发与其它行业的一个重大区别，就在于对于软件开发的估算成本，不能忽略不计。想要估算变动剧烈的项目的时间、人力、成本，简直就是不可能的任务。怎么办？讨论软件开发的特征，需要站在一个大的背景下来看。我以前考过PMP，在PMBOK中，软件项目管理，是作为项目管理下的子课题来讨论的。按照PMBOK的知识结构图，PMBOK已经告诉了我们那么大一个圆。而要进一步搞好软件的项目管理，我们只需要再掌握相关应用领域的知识和实践，就ok了。这其实是大多数项目管理的理论，对于软件项目管理的看法，所有的项目，都是项目。软件项目与大多数其它项目，大同而小异。至于差异部分，往往被归入“风险管理”的领域，就算是“一切尽在掌握了”。而事实上，软件项目与其它项目的差异是如此之大，以至于由量变而导致了质变，使得我们以传统的工程项目管理的方式来管理软件开发项目，注定是要失败的。我们来看看这样一个关键词：“迭代”。这是其它的项目管理中，基本上不可能出现的概念，而在软件项目管理领域，却是几乎每一种方法学中，都要极力强调的概念。这就是最大的区别。如果我们能够搞清楚迭代的本质，也就能够搞清楚软件项目与其它项目的本质区别了。在我看来，在软件开发的过程中，引入迭代，就是承认，软件开发需要承受大大小小的失败，而减少失败的办法，就是不跑步，不走路，尽可能的爬行，这样就算跌倒，也不会跌得太重。我们来看一个有趣的数据。这是我在竹笋炒肉的blog上看到的一段话。1994年，由于其非凡的软件开发能力和优秀的软件质量，SEL成为第一个因软件过程的成就而赢得IEEE奖励的软件开发组织。与普通的软件开发组织相比，在同样的软件开发条件下，NASA所开发的软件的质量要好10到20倍。这个成就是如何得出的呢？那么是怎样的项目呢？我搜索了一个google，找到另外一段话：  To put it a little differently, the average MIS shop would need about 14 calendar months and 110 staff-months to deliver a 100,000 line-of-code MIS system, and it would typically contain about 850 defects when delivered. The NASA SEL would deliver a system of that size with about the same amount of time and effort, but it would contain only about 50 defects.也就是说，10万行代码的一个MIS系统，他们花了110个人月，一共14个月，才完成。平均下来，每个人每天大约需要写30行代码！如果这样也算成功的软件项目管理的话，我以后只要将所有的项目工作量估算，乘以10，就能同样拿到IEEE的奖励了，如果我的老板允许的话。各位一定非常惊讶(如果是读过前面几篇连载《定论》的人)，怎么这就完了呢？看着架势，应该还早啊。是啊，按照原定的计划呢，的确是还早，但是那样的写法，我自己都不知道会写到何年何月去了，因此打算结束这个东西，把我要表达的想法，一口气跟大家说了，也是一种解脱。总结我的想法，主要有以下几点：1、现有的软件开发方法，都不是定论，不过是你说你的好，我说我的好罢了。要能够得到定论，必须要有一种能够判断方法好坏的方法。也就是说，能够判断一个方法，用或不用，有多少好处。几个方法比较，哪个能够胜出的“检验标准”。2、要能够检验软件开发方法的优劣，必须基于对于软件开发本质的正确认识，这样才能量化两个因素：软件需求的复杂程度以及软件开发的实际工作量。而现在的软件复杂度的度量，并未区分“需求”与“实际”的不同，或者“代码行数”，或者“功能点”，都是如此。3、在能够正确度量需求复杂度与实际工作量之后，我们会发现，过去那么多号称是为了保证软件顺利开发的手段，往往只会坏事，耽误事。但是，完全不提前设计的方法，也并不可取。原文写于：2005年11月，最后其实是草草结束，并没有写完。当然，后续我也一直在思考，直到最近，我又另外写了一篇《从软件工程到研发管理》，希望能够把这个问题思考明白。"
  },
  
  {
    "title": "我是凉粉|《机器人历险记》|Web 2.0",
    "url": "/my_blog/posts/fans-and-requirements/",
    "categories": "Thinking, IT",
    "tags": "Product",
    "date": "2014-06-09 21:30:00 +0800",
    





    "snippet": "BJUG，北京Java用户组，全球Java User Group Top 50之一。我虽然人在上海，也有幸加入了BJUG的邮件列表，常常会参与一些有价值的技术讨论。但是，在2005-8-25 下午3:34我收到了这样的一封邮件：  Xiaogang Cao 致 javaparty :  诸位，你们看超级女声吗？你们知道那个唱得最好的张靓颖吗？投票了吗…..没投的话，记得发AX到8088,然后等到短信回来后，回101，每个人可以投15张票…我们的口号是：爱JAVA,爱靓颖~~~惊啊！没想到啊，晓钢也是“凉粉”啊！其实呢，我也是个“凉粉”，那天我也用自己的手机投了靓颖15票，但是……(以下删去5000字抒情内容)其实在程序员这个群体中，喜欢靓颖的真的很多很多，但是我们几乎从来不相互交流，更没有晓钢兄那样的勇气，在BJUG邮件列表中，公然拉票当然了，我们都不是狂热的凉粉，这件事情，过去也就过去了。知道前两天，晓钢又在BJUG发了一封信，我才知道，张靓颖也有BLOG了！我自然是立马打开自己的bloglines，将靓颖的RSS加入我的在线RSS阅读工具，心里也在感谢新浪BLOG，是他们提供了一个让我们与我们心中喜欢的明星，一个直接的“链接”。这与机器人历险记又有什么关系呢？我4个月之前看过一次，这一次又在家里，陪儿子看了一次，当时没有注意到的大焊的一句话，现在看来，倒是非常重要的。“发现需求，满足需求！”我们有什么需求？我们自己其实也不是很清楚，但是当我知道张靓颖的BLOG的时候，我知道，“哦，原来能够看到张靓颖的BLOG，是我的需求。”当我这个需求，被发现并且满足的时候，我就爽到了。在深入一点讨论，按照传统的观点，“供给”与“需求”是一对矛盾，而现在，在我看来，需求自然是一种需求，供给也是一种需求。被别人需要的需求！发现需求，满足需求，在WEB 2.0的时代，就更加广泛了，不但满足别人的索取的需要是一种满足，满足别人发布的需求，也是一种满足。我一向都嗤之以鼻的安替，对这个问题，另有评论。  什么是昏头透顶观点？这就是昏头透顶观点。我打赌凡是提出这些观点的人不是搞IT的就是学生，反正不会有做媒体和做营销出身的人。当这些人持有这样的博客草根论的时候，其实是把博客当成了和email一样的交流工具、或者像游戏软件这样的娱乐工具，而不是一个新型的传播工具，他们考虑赚的钱，其实是作者的钱，而不是读者的钱。  但是对于任何一个传播工具，商业模式一定是赚读者的钱，而不是作者的钱。打个笔法，办报纸的人，他会考虑赚作者的钱嘛？还是花钱买作者？当然是后者。他能赚的钱，是把这些作者整合起来，再收读者（订阅）和阅读附加值（广告）的钱。如果他只想赚作者的钱，那就是杀鸡取卵。如果安替真的懂得Web 2.0时代的商业的话，我就把这庄字倒着写了！如何才能赚钱，满足需求，就能赚钱。读者有需求，我们就可以赚读者的钱，作者有需求，我们就可以赚作者的钱。A读B的文章，这样一个事件，无论是A还是B，希望它发生，我们都可以从中赚钱。这就好比股市，交易所赚的是交易费用，而不是说：“我只收买家的钱”，或者“我只收卖家的钱”。有这么蠢的交易所吗？所谓Web2.0时代，最关键的特征是什么？我认为，就是它使得原本难以出现的个人与个人之间的交易，成为可能。更进一步说，通过Web2.0的大力开发，个人与个人之间，不止是可以交易有形的物品，更可以拓展到一切能够电子化的资源的交易，或者说交流。这样，在去中心化之后，无数以前不可能出现的支线连接出现了，虽然支线都非常细，但是加在一起，却是太粗太粗了。这也正可以解释“长尾效应”的由来。所以，这个问题，与所谓的精英，草根无关，安替也的确不懂这种事情，所以他的评论，不看也罢。原文写于：2005年10月22日，回想起来，没想到我还当过凉粉啊……另外，安替的文章的确不必多看。"
  },
  
  {
    "title": "一个不可原谅的bug",
    "url": "/my_blog/posts/An-unforgivable-bug/",
    "categories": "Thinking, IT",
    "tags": "Programming",
    "date": "2014-06-09 21:24:00 +0800",
    





    "snippet": "最近出了一件大案子，是咱们程序员同行干的。超市收银员上演“无间道”。正好我的一个朋友，是在这家超市工作，才透露了一些内情给我知道。按照公开的说法：“乐购超市几家门店货物缺损率大大超过了业内千分之五的物损比例，缺损的货物五花八门，油盐酱醋等日常用品的销售额与实际收到的货款差别很大。”；“经过深入调查，侦查人员发现超市原有的收银系统被装入了一个攻击性的补丁程序，只要收银员输入口令、密码，这个程序会自动运行，删除该营业员当日20％左右的销售记录后再将数据传送至会计部门，造成会计部门只按实际营业额的80％向收银员收取营业额。另20％营业额即可被侵吞。”按照我朋友的说法，超市的货物损失，从来就不是什么大事，货物数量对不上，也从来都不是超市的损失，直接打个电话，让供应商补货就是了。问题出在哪里呢？他们这个程序，被设计为每天拉掉最后一笔交易记录，而这最后一笔交易记录，可能是任何商品。但是，有些商品，不是公开货架上的商品，而是超市专柜经销商的商品。这专柜是有专人看管的，售货员交接班时，都是要清点移交的。结果呢，根据销售记录，发现专柜货物遗失，而总共只有两个专柜营业员，一口咬定决不是自己偷的。这才引起总公司的重视，开始查这个案子！如果当初他们设计程序的时候，能够跳过专柜商品，只删除货架商品的销售记录的话，这个手段，永远都不会被发现……现在那帮家伙自然是一网打尽了……由此我们可以得到这样一个教训：“高风险的程序，一个bug都不能出啊！”原文写于：2005年10月24日"
  },
  
  {
    "title": "软件开发文档的持续集成",
    "url": "/my_blog/posts/CI-for-document/",
    "categories": "Thinking, IT",
    "tags": "SoftwareEngineer",
    "date": "2014-06-09 17:38:00 +0800",
    





    "snippet": "大多数程序员，都极度痛恨写文档。Coding是愉快的，而Write是痛苦的。有一部分原因，其实是要归咎于程序员自身，以我的经验，很多程序员往往会“艰于表达”，尤其是用“文字、图表、PPT、Word”之类的Office Document来表达。当然，还有一部分原因，是由于很多项目开发实践中，文档的前后矛盾、形式主义、反复修改、歧义重重，常常让程序员们抓狂。UML是一个比较好的工具，但是，仅仅靠UML，是无法将项目的知识描述清楚的。也有不少项目组在引入了UML之后发现，文档的工作量不但没有减少，而是更多了。随着项目的进展，需要维护的设计文档数量，也更多了。也因此造成了更多的前后矛盾，形式主义，反复修改。根本的痛苦，并不在于一开始写一份文档，而在于所有写下的文档，都必须跟随项目的进展而随之变化。当我们写出来的文档越多，需要被持续维护的文档也就越多，需要反复检查文档间的可能存在的矛盾也就越多，所有扔出去的石头，最后都会落回到自己头上。于是，还有不少项目组，将文档工作与代码工作截然分开，文档就写一次，用来应付上面的管理层，而代码自管自的继续开发。对于小型项目来说，这其实是一个不错的权宜之计。但是一旦项目越来越庞大、复杂。所有的隐性的知识，都仅仅存在于程序员的脑子里，所有成文的东西，都可能是错的，而真实的情况，却隐藏在代码之中。如果代码质量再糟糕一些，后来维护的朋友，就遭遇火坑了。文档，写还是不写，这是一个问题！还记得测试驱动开发吗？为自己的每一个方法，每一个类，都写出单元测试来。不但如此，更加彻底的做法是，在写代码之前，先写测试用例。这样才能保证不会忘记写测试用例。更大的好处在于，这样有助于思考、有助于获得更加完善的设计，有助于写出更加高质量的代码，有助于安全的重构，有助于自动化的持续集成实践。总之，是好得不能再好的一项开发实践。这一实践之所以可行，就在于他将繁杂的集中的测试工作，分解为日常的，必须不断进行的工作。当你每天都在写测试用例，当你的每一个测试用例，都能够与代码完全对应时，压力反而减轻了，工作量也更少了，更重要的，一些优良的习惯也因此被养成了。在两年前，我要开始一个全新的P2P网络电视项目时，也在考虑关于文档的问题。当时我发现了Open Source的WikiPedia。这是一个PHP的WIKI，最大的应用是维基百科全书。因此，这个项目的质量就绝对值得信赖。我就将它拿过来，作为我们项目文档管理的工具。用Wiki来管理项目文档，基于以下一些考虑：  文档是项目的知识，这些知识必须集中管理、容易获取、人人可以编辑。  项目在生长，代码在增加，文档也必须能够跟随项目自然生长，强行划分设计阶段和开发阶段，是不可取的。  Wiki不是传统的项目文档，而是一个应交流需要，可能随时增删改的知识库。项目组的成员，遇到问题，就应该首先查看Wiki，如果这是Wiki中没有，那么他应该找人询问。而那个知道答案的人，如果他不想再今后不断的回答同一问题，就应该把这个答案写入Wiki，这就是Wiki条目增长的自然动力。  传统文档最大的问题在于浪费，而Wiki通过持续修改，按需提供的方式，保证了所有写下的文字，一定有超过一个人需要读它。在Wikipedia的基础上，我又做了一些增强，以更好的辅助项目的管理。  Include功能，增加include标签，可以在一个条目中，引入其他条目的全文，而不是仅仅增加一个link。  文档的层次结构，当项目的文档条目逐渐增加，分门别类的条目，更加便于查找，也可以有效的避免条目重名的问题。  一个Click，就能够创建新一个条目，用于填写当天的工作安排。相应的管理制度，也必须建立起来。  每日15分钟文档制度，基于“填写当日工作”的功能，我规定每个项目组成员，每天要花三个5分钟来写文档，早上的5分钟，填写当日工作计划。中午的5分钟填写上午的工作情况，下班前的5分钟，填写下午的工作情况。这样，每天的文档工作相当轻松，但是文档能够保证持续的跟随项目成长下去。更进一步的，这样的制度，对于项目的进度控制，也很有帮助。  User Case条目驱动，所有分解出去的User Case，在分配到责任人之后，该责任人的第一项工作，就是在Wiki中写下对于这个User Case的理解。随后项目进展，也应该持续的维护这个条目。  同时进行Bug的管理，Bug也作为Wiki中的条目，以便于和其他条目项目引用。  每次Check In CVS时，必须写注释。这是更加细节的文档，然后我还做了一个小程序，能够自动的从CVSTrac中读出当天Check In代码的注释。供每个人在写当天文档的时候引用。总而言之，我对于项目文档的看法，并不是非此即彼的极端主义者。在我看来，好的项目文档管理政策，应该有助于集中团队知识和智慧，同时不要让程序员痛苦和反感。这样才叫做有效的项目管理。仿造Martin Fowler的著名文献《持续集成》，我给这篇Blog起这样一个名字《软件开发文档的持续集成》，希望能够引发更多的、更深入的思考。原文写于：2006年05月12日，现在看来，还是很不错的实践啊。"
  },
  
  {
    "title": "理想中的Ajax IDE",
    "url": "/my_blog/posts/ajax-ide/",
    "categories": "Thinking, IT",
    "tags": "Product",
    "date": "2014-06-08 22:03:00 +0800",
    





    "snippet": "最近MyEclipse推出了支持Ajax的最新版本，Eclipse也有了一个The AJAX Toolkit Framework (ATF) Project。再加上Sun正式发布Java Studio Creator 2，其中提供了对Ajax的支持并且提供了一组易用，易部署的基于Ajax的UI组件。可以想象，支持更加方便的IDE的Web开发工具的时代，即将到来。我也来设想一下，我理想中的Ajax IDE吧。1、可视化，但不是直接编辑。类似于Dreamweaver，但是应该再增加一个独立的DOM Tree。任意选择一个DOM节点，就能够高亮相关的CSS规则。任意选择一个CSS规则，就能够高亮受影响的DOM节点。开发工作，是对于DOM Tree的操作+对CSS规则集的管理。而不是直接手动去拖拽页面元素。2、智能的CSS优化。那么多CSS规则，甚至是跨页面的CSS规则，有多少是可以重用的，有多少是可以归并的，有没有可能设计出一个CSS优化算法，鼠标一个Click，一切就完美了。3、JavaScript的Debug。基本上能够做到MyEclipse那样，就非常棒了。4、代码智能感知。MyEclipse似乎也能做出这个效果，就是不知道准确性是多少。5、代码重构支持。不止是JavaScript的重构，还有XHTML、CSS的重构……6、JavaScript基础库生成。如果有这样一个Wizard，我能够选择针对的浏览器平台、版本、想要用到的功能……N多选项，然后它就帮我汇集众家之长，去掉无关的代码，在生成一个我需要的JS文件。这个世界就近乎完美了。7、集成各种UI组件库。各种好的UI，在线Update，拿来就用。8、UnitTest的完善支持……差不多了，就遐想到这里吧…原文写于：2006年02月5日，这里遐想的很大一部分，被Firebug实现了，查了一下资料，发现Firebug的最初版本，诞生于2006年3月…另外的一些需求，后来被浩如烟海的JS lib与CSS lib实现了大部分，现在的前端开发，已经比当年容易太多太多了。。。"
  },
  
  {
    "title": "《代码大全》——软件开发的世界地图",
    "url": "/my_blog/posts/code-complete/",
    "categories": "Thinking, IT",
    "tags": "BookReview",
    "date": "2014-06-08 21:50:00 +0800",
    





    "snippet": "我有很浓厚的“地图情结”，以前我写过一篇《我的信仰地图》，最近又做了一次关于Ajax的演讲，名字叫做《Ajax技术地图》。我一直以来的观点是，世界是一个整体，在这个巨大的世界之中，任何事物、任何知识，任何观点，都有其合理、自然的位置。理解这个世界的过程，就是逐步将需要了解的各种事物，在作为整体的一个世界中，找到其位置。了解这个位置的前后左右，相互关系，相互影响。这样的理解世界的学习方式，我认为是最为有效的。所以当我在JavaEye看到关于《代码大全》的广告时，我的第一反应就是：这不是世界地图吗？看了看他的目录，竟然有35章之多？架构、分析、设计、编程、测试、重构、面向对象、调试、规范、管理、软件质量控制、协作、优化、开发工具、注释、甚至个性、开发艺术等等等等，只要是与软件有关的，基本上他都写到了。说实话，我当时相当的不屑……可能吗？居然有这么一个家伙，能够像当年的托马斯•阿奎那一样，以一己之力，写出《神学大全》？CSDN的网站上介绍这个Steve McConnell，在1998年的时候，被Software Development杂志的读者评为软件业最具影响力的三大人物之一，与Bill Gates、Linus Torvalds齐名。一个写书的，能和两个写代码的天才齐名？网站上的那些推荐的话，个个都是大名鼎鼎，个个都是推崇备至。作为我这样一个有逆反心里的家伙来说，直觉上就是：“会不会呀，有这么牛吗？”当然了，我也不好多说什么，毕竟没有看过书～～～没想到好事居然找上门来了，博文视点的魏泉是我要写的那本Ajax书的责任编辑。而《代码大全》也是他们负责出版的。那天他找到我，说是让我看看这本书的书稿……看看能不能写一篇书评。这等美差，我很爽快的就答应下来了。一看之下，果然是很喜欢，作者的思考问题的方式，与我的方式相当的接近，都是尽可能将多种、甚至矛盾的事物，放在一个整体的环境中来理解。比如对于隐喻，用于描述软件开发的特征的各种各样的隐喻，其实各有其价值，如果能够组合运用，自然能够获得一种平衡。正如作者所说：“使用隐喻又是件说不清楚的事情（fuzzy business）。你需要适当地引申它的含义，才能从其中蕴含的深刻启发中受益。但若你过分地或者在错误的方向上引申了它的含义，它也会误导你。正如人们会误用任何强大的工具一样，你也可能误用隐喻，但它的强大的功效，还是会成为你智慧工具箱中的一个宝贵部分。”这样的一种看法，可以说“中正平和、深具智慧”，这是我们在大多数关于软件开发的论述中，很难看到的。再比如说，作者在第三章时给出的一个表格：三种常见的软件项目种类，及其典型的良好实践。就将软件分为商业系统、性命攸关的系统以及性命攸关的嵌入式系统。然后指出对于这三类不同的应用，在开发手段、管理强度、设计、构建、测试、部署等等方面的差别化策略。这样的分类，自然就避免了将各种开发手段，简单的对立起来比较的方法，显得更加具有说服力。再比如说，全书给出了相当多的Check List，这样的表格，实在是大有益处，借用地图的隐喻来书，这样的CheckList，就是一个一个的定位器，它能够帮助你认清自己的位置，了解问题所属的范畴，了解应该努力的大致方向。这样的“开发工具”，真是独一无二。这本书我目前只看了前面的5～6章，实在没有太多的发言权，不过我现在已经可以肯定，这是一本非常有价值的好书，我推荐所有没有看过的朋友去看看这本名副其实的经典之作。说实话，天下没有免费的午餐，我这篇书评，也是属于交差之作。人家出版社把样书给你看，请你写书评，当然希望你能说些好话幸运的是，这些好话，的确都是我自己愿意说的。原文写于：2006年03月22日，是应出版社的朋友要求，写的一篇书评，现在读来的感觉，写得还是不错的 :p"
  },
  
  {
    "title": "ONLINE 2.0，这是一场硬仗！",
    "url": "/my_blog/posts/online-2.0/",
    "categories": "Thinking, IT",
    "tags": "Product",
    "date": "2014-06-06 22:51:00 +0800",
    





    "snippet": "Web 2.0是一个新名词，我虽然也用，但是却一直觉得不爽。因为我们的软件，实在不能算是Web系统，而是一个P2P软件。在PPcn.NET这个P2P行业的门户网站上，我们已经可以看到上百个P2P的软件。仅在直播型网络电视这么窄的一个范围里，就已经存在九种相互竞争的产品了。从这个现象，我们可以得出两个结论：Web 2.0这个名词，涵盖面不够广，无法表达当前网络发展的重要趋势。因此，我借当年上海热线II的说法，新提出一个概念，叫做：“ONLINE 2.0”。简单的说，就是：“基于宽带网络的；持久在线的；全新的Personal 2 Personal的网络使用模式。”还记得在ONLINE 1.0时代，我们怎么上网的吗？我们敢下载什么东西吗？还记得网络蚂蚁当初的广告语吗——“国内的因特网目前是世界上最慢的网络之一，许多人通过网络下载资料，面对几个字节的下载速率，真是欲哭无泪！”。现在的情况，早就不再是当年了。宽带包月、24小时在线的使用模式，是当年完全无法想象的。这是第一个变化，有了这样的网络，我们才可能有图形界面的、完全即时互动的网络游戏。才可能有BT、电螺这样的疯狂下载工具，才有可能有网络在线电视这样的收看体验。才可能有视频聊天这样的高级娱乐。第二个变化，则是受到了P2P软件的启发而来的Web应用。人与人之间的交流，是最能够吸引人的。传统Web在过去，并没有考虑这个问题。他仅仅是个Server-&amp;gt;Client的发布系统。BBS最初也是Telnet访问形式的。随着技术的进步，特别是浏览器的WEB技术的进步，通过WEB进行人与人的交流，也变得非常轻松、方便了。Keso有一篇BLOG《互联网作为一个操作系统》，讨论过这个问题，我在随后有一个评论：  互联网作为一个操作系统，这个看法的大方向没有问题。 关键在于，这样一个大操作系统，将以什么技术为基础？ 我认为，最关键的技术与思想是P2P，不是现在这种简单的BT文件共享之类的软件，而是一种新的思考方式——Personal2Personal。 每一个人，都通过自己的化身进入这个互联网，他使用的电脑，就是他的代言工具。这样的工具，是一个越来越有能力的个人(Personal)，而不是现在理解的一个节点(Peer)。 设计以往的操作系统，需要的自然是计算机科学知识。 设计将来的互联网操作系统，需要考虑更多的，是社会学知识，是个人与个人之间如何交流、协作的知识。讨论的也是这一趋势。但是，回到我刚才的话题，我们可以得出两个结论，第一是应该用“ONLINE 2.0”来描述当下这个热火朝天的互联网发展趋势。第二呢，就是竞争实在是太激烈了。九种直播型网络电视，在一年以后，还能活下来几种？两年以后呢？同样的，BT软件、ED软件、IM软件、电子杂志、网络电视、网络电影、网络电话；每一个狭窄的领域内，都有那么多竞争对手，有多少能够活下来呢？在扩展我们的视野，SNS社会网络、Blog服务提供商、RSS资源聚合、播客、团队协作、网络书签、网络通讯录、在线RSS阅读器等等等等，活下来的能有多少？怎么样才能活下来？我们来看几个例子：Free Mail有无数的人在用，当大家都在考虑，再不收费，如何生存的时候，GMail出现了。为什么我还要多申请一个邮箱？很多人都觉得，没有理由啊。但是在用了gmail之后，大多数人，都开始将gmail作为自己的主力邮箱——比如说我。为什么会这样？千万不要以为是AJAX！这只是表象，是手段，实质是，用户体验！更好的用户体验。反之，Google Reader，同样是一个用了N多AJAX技术的RSS在线阅读，但是我试用之后，仍然不喜欢，觉得还是不如Bloglines。差别就在于用户体验。再举个例子，几乎每个网上书店，现在都会有网上书评系统，但是现在用的最多的网络评价系统是哪一个呢？豆瓣！这是一个用起来非常爽的网站，体贴入微，恰到好处。再举一个例子，现在谁还在用NetAnts？谁还在WinZIP？那些当年的热门软件，还有多少，我们一直在跟着版本升级的呢？一句话：“逆水行舟，不进则退”，在ONLINE 2.0的时代，网络应用不可能仅仅因为一项创意，一个点子，一种技术，来“稳占鳌头”。回到我们现在自己做的这个产品上来，这并不是高精尖技术的产品。更不是一个不可能被模仿，不可能被赶超的产品。实现这个网络录像机，需要四个方面的技术：视频采集录制技术、P2P传输技术、流媒体播放技术和UI技术。这四大技术，我们的潜在竞争对手，也都早就掌握，或者不难迅速掌握。只是目前，还没有别的公司，提供像我们这样的服务而已。那天看到一篇blog，也很有感触，《努力做个365kit的好用户》。其实Tinyfool的看法，还不够深入。要提高用户体验，是一场硬仗。这场仗要想打赢，仅仅靠内部员工使用，是不够的。仅仅靠收集使用感想的方式来改进，也是不够的。要去找《About Face 2.0》来认真学习了。。。原文写于：2005年11月5日 当年我们做的Recool，当然也早就挂了，365kit也早就挂了，比较神奇的时候，我后来居然与tinyfool成了同事，但是在同事的3年间，我并没有回头看自己的这篇blog，甚至根本就忘记这件事情了，现在向来，还是真是奇妙的前缘啊。"
  },
  
  {
    "title": "Bloglines+del.icio.us",
    "url": "/my_blog/posts/Bloglines-del.icio.us/",
    "categories": "Thinking, IT",
    "tags": "Product",
    "date": "2014-06-06 22:44:00 +0800",
    





    "snippet": "这篇Blog中的创意，优先供Robbin使用。我同时是Bloglines和del.icio.us的用户，一般我的使用习惯是：每天上一次以上的bloglines，看到有趣的内容，再点击打开一个新的窗口，然后把这个内容，加入我的del.icio.us，同时在del.icio.us填写合适的Tags。如果这两个网站，能合成一个网站多好呀。  所有RSS订阅、阅读、导入导出的功能，像bloglines  所有我订阅收到的内容，我都可以给他设置一些tags  浏览我自己的已经收藏的内容时，功能像del.icio.us  我的Public OPML，可以共享给他人。  我的收藏的内容，也可以被人以tag方式订阅，比如：http://www.DreamRSSReader.com/zhuangbiaowei/tags/AJAX通过这个链接就可以订阅，我收录的标记为AJAX的内容。  网站首页，以类似BlogBus这样的首页，列出热门的Tags  另外再根据内容收录的人数，以类似365key首页的样子，列出热门文章基本上就想了这么些。原文写于：2006年01月9日后来查了一下资料：英文版的Google Reader于2005年10月7日通过Google实验室发布，2007年9月17日成为正式版。中文版的Google阅读器大约在2007年9月18日左右发布。2013年3月13日Google宣布，作为第二个春季大扫除计划之一，Google阅读器因用户数量逐年下降，于2013年7月1日终止服务，用户有3个多月的时间导出自己的数据。现在想来，真是唏嘘不已~~"
  },
  
  {
    "title": "小型企业知识管理的好办法——Google四件宝",
    "url": "/my_blog/posts/knowledge-management/",
    "categories": "Thinking, IT",
    "tags": "",
    "date": "2014-06-06 22:36:00 +0800",
    





    "snippet": "8月24日那天我没有写BLOG，出去吃饭去了。gigix他们CSDN的人马到上海来协办IBM的开发者大会，随便把Robbin、Dlee和我都叫去了。席间聊到了很多有趣的话题，只能以后慢慢回忆，慢慢整理后写出来了。其中dlee提到了文档与知识管理的重要性。我对这个问题也一直很感兴趣的。但是经过在自己公司内部的将近10个月试用WIKI的结果，我有两点感想：1、人数太少的公司（一个办公室就能坐下）不适合使用WIKI，因为实在交流太容易了，不值得写到WIKI里去。2、老总不支持的公司，不适合用WIKI。老总一般都只喜欢收邮件。这时候Robbin也表示了赞同，他有大型跨国企业的经验，那里的所有内部管理，都是通过email往来的，一个人的邮件都从来不删除的 ，有些人的邮箱甚至达到了1G以上。于是我想到了GMAIL，gmail提出的口号就是，从来不删除邮件，只搜索，容量达到了1G以上，岂不是正好可以用得上吗？这时dlee提出了一个置疑，这一个人要发给多个人怎么办？正好我们好几个人都有BJUG的maillist经验，这个maillist也是在google申请的，一个和gmail结合得非常好的邮件列表。随后gigix和还有一个谁提出了一个知识整理的问题，这么发来发去的邮件，太乱吧。于是我就说，那就谁发起的话题，谁最后整理，作为获得了知识以后的回报。同时也可以再发一封“漂漂亮亮”的文档给老板，算是阶段总结，就一切OK了。但是又遇到了一个企业机密的问题，这个的确比较困难。有多少老板愿意把公司的所有往来信件都交给google保管呢？但是，自己架一个邮件服务器服务器容易，弄个邮件列表也不难，写一个gmail那么好的WEB Email Client，就太难了。回到家里以后，我又结合现在google新推出的Desktop和Talk想了一下，结论是，如果google能够推出一个便宜点的企业版gmail，让公司购买，其他软件都是现成免费、而且是集成在一起的，一个小公司的知识管理，就全部可以搞定了。总结一下：1、gmail(能够有企业版的更好，不是太注重商业机密的，现在就可以用了)2、google groups3、google desktop(最好是2.0以上版本)4、google talk(新鲜出炉，支持文字和语音交流，附带gmail提醒)这就是google四件宝了。原文写于：2005年08月27日直到现在，似乎也没有这样的，可以部署于企业内部的Google四件宝，当然，Google的面向小型企业的云服务，包括Google Office，已经越来越好了。"
  },
  
  {
    "title": "下一代搜索技术的四块积木",
    "url": "/my_blog/posts/Next-Generation-Search-Engine/",
    "categories": "Thinking, IT",
    "tags": "",
    "date": "2014-06-04 22:33:00 +0800",
    





    "snippet": "按照我的设想，下一代Internet搜索技术，应该由以下四个部分组成：一、以互联网搜索为核心的网络资源搜索。现在最常见的搜索工具，Google、百度、Yahoo、MSN Search之类的，都属于这个范畴。再加上今后会出现的越来越多的各种专业信息搜索，比如论文、文献、MP3、BT、RSS等等搜索工具。二、以桌面搜索为核心的个人资源搜索。现在的桌面搜索工具还刚刚起步，今后的发展不可限量。总的趋势是，个人的计算机内的信息资源，都只需要搜索，而不需要费力气整理。就像现在GMail提出的口号。三、以即时通讯工具为桥梁的网格资源搜索。这个东西，现在似乎还只是局限与P2P文件共享的搜索，我的设想是，假设我的好友，能够帮我在他的机器里搜索有没有我要的东西，前提是我们两个人都各自装了桌面搜索工具，同时如果他愿意的话，也可以将搜索到的信息共享给自己的朋友。现在的P2P文件共享搜索，除了依托中央服务器的搜索本来就算不上是网格搜索之外，即使是基于好友的互助式搜索，也没有全文检索的能力，总之大有改进的余地。四、以机器辅助标引Tags为手段的全球信息资源整合。全球信息资源主要存在于两种地方，一个是公开的互联网上的某个服务器中，一个就是各个不同的个人电脑之中。如何提高搜索的命中率与效率，为各种信息建立主题词索引是一个关键。我之前分析过，“主题词是有管理的tags；tags无管理的主题词”。因此，姜伟的“计算机辅助主题词标引”技术，大可以派上用处。假设用户在自己的机器上装一个工具软件，在用户上网浏览网页、进行编辑Office文档等等工作的时候，这个工具可以在合适的位置提示该文档也许可以标引出几个“主题词/tags”，这样用户就可以更好的整理自己的知识与资料。与此同时，用户浏览公共信息时标引的主题词，也可以上传到某个服务器上，这个服务器可以汇总各个使用者对于同一个URL的主题词标引词情况，统计大家最为认为的，标引重复程度最高的“前N个词”作为这个URL的主题词。这对于今后搜索的效果提升，相信大有好处。以上的设想，总结起来，是需要一种全新的客户端软件＋全新的搜索服务模式＋互助式的搜索协作机制。这就是我设想的下一代搜索技术！各位走过路过的朋友，如果对实现这样的技术有兴趣，可以和我联系！原文写于：2005年8月13日，现在看来，似乎还没有我理想中的搜索服务出现，也许「360搜索能够达成我的愿望」。"
  },
  
  {
    "title": "思考tags与主题词、敏捷与CMM、草根与精英",
    "url": "/my_blog/posts/Tags_and_CMM/",
    "categories": "Thinking, IT",
    "tags": "SoftwareEngineer",
    "date": "2014-05-31 22:41:00 +0800",
    





    "snippet": "  对立往往是能够通过沟通来化解的！——庄表伟一直在思考很多事情，标题里列的这些词，是我最近思考的比较多的一些主题。我有这样的思考习惯，或者说有一个直觉的思考方向，那就是万事万物背后的道理，都应该，也是有可能融会贯通起来的。我的不少朋友都了解我这个毛病，并且基本上是善意的不“频繁”泼我的冷水。其实我还是有一定自知之明的，只是这样的思考总是更令人着迷罢了。先说tags与主题词。因为工作的关系，我在上一家公司的最后一个项目，就是与中国科学技术信息研究所合作开发一个“主题词管理系统”。所以我有机会非常深入的了解了经典的主题词体系结构以及为何设计成如此结构的原因。可以说，包含“用、代、属、分、族、参、范畴”等多种特征的主题词体系，其实是非常精巧，也是经过了很多很多专家的深思熟虑的。而主题词的根本目的，自然是为了能够：“快速”、“准确”、“无遗漏”的查找到需要寻找到信息。再说tags，我一直订阅keso的blog，有一篇blog引起了我的注意：《东拉西扯：tag与关键字》，其中不但谈到了主题词（一般民间都叫做关键字），还提到了一个我认识的朋友jiangwei。当初我们一起合作，我完成了主题词的管理系统，而他做的是主题词计算机辅助标引部分。大概是jiangwei的“技术炫耀”让原本对主题词没什么了解的keso对主题词本身发生了误会。说什么：“tag是一种人类活动，而主题词是一种机械产生的”。唉，其实主题词标引能够做到像jiangwei炫耀的那样计算机自动提炼，实在是最新的科技进步——在此之前的很多年，主题词的维护和文章的标引，都是通过手工完成的。也就是keso以一种自豪的口气称呼的“人类活动”。因此，tags与主题词的区别不在于是不是人类活动，而在于这个标引的行为，从过去的集中变成了现在的分散，从过去的专家变成了现在的普通大众，从过去的有限选择变成了现在的任意选择。在keso的那篇blog下面的跟帖，更是让人觉得“文艺”得很。  Tag与关键字之别不仅仅是人机之别，说到底还是人与人的主客观念之别，都是人的东西，机器只是一种反映，无非：Tag是以主观之，关键字是以客观之；Tag是我的，关键字是别人的；Tag用“心”，关键字用“聪明”；Tag是乐，关键字是音；Tag是曲，关键字是词；Tag是诗歌，关键字是文字；Tag是情绪的，关键字是理智的；Tag是自由的，关键字是必然的；Tag是可爱的，关键字是可信的； Tag是“灯”，关键字是“镜子”……窃以为二者在帮助我们认识自我和认识世界时相辅相成，相得益彰，是不二的！撇开那些不懂的人不谈吧，我也不认为tags和主题词之间有什么根本的分歧，无非是有管理的tags和无管理的主题词罢了。还是说说我一直在思考的更为有意义的另一个问题吧。主题词究竟该以什么方式来进行管理呢？当初我设计那个主题词管理系统的时候，也曾经考虑过这个问题，因为一个主题词系统需要与实际的主题词应用相衔接，必然需要建立一个灵活反馈机制。这个反馈机制必须兼具灵活性与统一性。当时的设想是通过wiki协作的方式，收集对于新词的使用、定义、相互关系、使用范围等等方面的信息——也许将来会有机会去完成这个设想——这样就能够打通使用者与管理者的界线，使得知识管理的自动化水平更上一个台阶。接下来，我们来看看wiki这个模式如何能够帮助tags与主题词。首先，任意的设置tags并不困难，但是这样可能导致很多类似的信息被定义为不同的tags，导致信息的分散与查找到遗漏。主题词虽然能够解决词条的统一与规范问题，但是不可避免的存在着滞后性，毕竟能够决定如何统一的专家总是忙不过来的。而wiki呢？wiki自然是大众知识共享的好工具，而且生来就有草根的特质，如果能够以这样一种模式来使用：  tags选择或自造——&amp;gt;新词进入wiki——&amp;gt;wiki协作编辑整理——&amp;gt;正式主题词——更新tags可选集。这样，一个良性循环就建立起来了，只是要应用这个模式，现在的wiki还需要经过改造。目前的wiki，任何人都可以修改，并且不断继续修改一个词条。而事实上，如果能够利用等级权限控制修改人数，那么词条的解释与词条之间的关系，就能够逐渐固化下来，成为“知识”的一部分。当然，这样的wiki，也就打破了草根与精英之间的界线了。再说敏捷与CMM，这又是一对矛盾。敏捷方法得到了大多数开发人员的支持，算得上是草根出身，而CMM基本上是从学院派来的，特别能够诱惑公司老总，算得上是精英出身。这两者的对立如何沟通呢？我曾经写过一篇文章《定论——软件开发的方法论探讨》，仔细讨论过这个问题，得出的初步结论是：“撇开各种隐喻的迷雾，软件开发目前尚未成为一种科学，而真正能够成为科学的标志就是——有一个科学的检验各种方法效果优劣的标准。在这样的标准出现之前，所有的方法都是待检验的零件，在各个零件都经过检验之后，才谈得上将合格的、有效率的零件组合起来使用的问题。”  草根自有草根的坚持，精英自有精英的道理。——庄表伟接着说这个对立的问题。第一篇是讲tags与主题词，第二篇是讲敏捷与CMM的，昨天到今天我就一直在想，如何展开讨论“草根”与“精英”的关系问题。正好keso的评论可以帮助我引出想要讨论的话题。我一开始就认为tags与主题词其实没有本质的区别，而keso认为其中大有差别。他的评论说到：  无论是人工处理，还是机器处理，主题词都是直接跟文档本身相关的，比如一份关于物价调整的报告，主题词就必定要包含“物价”，但tag是跟人相关的，它反映的是每个独立个体的思维。还是那份调价的文件，有人可能就会给它个“官僚”的tag。一张两会的照片，主题词可能是“两会”，或者“人大代表”，tag则可能是“老人”、“美女”。我感到这个评论大有启发，回复如下：  你的评论使我想到了另外一个tags与主题词的区别：tags是方便设定tags的人的。主题词是方便检索的人的。…后面还有keso的评论，我就不引了。从这里我们可以看出，tags其实是很草根的，他是个人的，个性的，是不必考虑他人的，也不必为了他人而委屈自己的。而主题词是很精英道，是公共的，是统一的，是有规范的，是不能全依着自己的性子乱选的。我们来做一个假设，如果一个人设置tags，完全由着自己的性子设置，人家都是“GIRL”，他偏要用“小妞”，甚至更为个性的词语。那么，他的资源就只能够属于他个人，别人也找不到他的东西。这样本没有问题。但是假设这个现象被推到极致，每个人都用各自不同的词语来标识“GIRL”这同一个概念，那么tags还会有什么意义吗？回到现实世界，其实人与人之间的差别没有那么大，因此即使是随意的选择tags，也会有很多的重叠，而这样的随意选择后的重叠，也就成为tags的乐趣之一了。  从草根到精英，要牺牲好多的！——庄表伟我必须承认，我不够厚道。自从我开始写自己的blog以来，我的友情链接的第一、第二位是我认识的朋友，而第三个就是keso。keso的blog和网摘我每天都用RSS Reader收下来看，这里面的规律我很早就知道啦。一个共生的圈子是这样形成的：  在自己的blog里谈论keso——&amp;gt;keso会在他的网摘里加上那篇blog的链接——&amp;gt;那篇blog的访问量一日爆涨——&amp;gt;更多人愿意在blog里或赞扬或漫骂keso——&amp;gt;一个不断长大的共生圈……如何加入这样的圈子呢？你必须使用圈内的常用词（常用tags也是一回事），比如tags、blog、RSS、草根，诸如此类。这样你的文章才能够被keso发现，师父领进了门，接下来就要靠自己努力了。再来说草根与精英的对立现象，其实草根与精英并无本质上的对立，一个草根如果打算与更多的人交流，希望自己的声音被更多的人听到，就必须规范自己的语言，溶入一个圈子，牺牲自己的“自然语言”，而加入一个更为高级的“话语体系”。更高的目标，就是首创、发明更多的圈内的语言，丰富这个“话语体系”，成为“话语霸权”的拥有者……这一切都是那么显而易见，唯一需要犹豫的是我，我到底要不要也走这条路呢？后来我想通了，这个世界只有一种游戏规则，就是精英们制订游戏规则，要在这样一个世界中发出更能影响他人的声音，就必须加入这个游戏。如果用tags打比方，我如果越是希望别人发现我发布的信息，就必须给这个信息标识一些更为“规范的”、“流行的”、“有吸引力的”——tags。这样的tags与主题词还有区别吗？当然了，tags毕竟是宽容的，他允许你自娱自乐，不强制你必须在“规范主题词表”内选择。这样的形式，使得“不媚俗”也可以很“流行”。注意这个逻辑背后的“悖论”。就像“草根的代言人，也是精英的一种”一样。让我再复述一遍：精英自有精英的道理，因为唯一的规则，是他们制订的。  理性就是用智慧分析问题；建设性就是用智慧解决问题。——庄表伟我从来都不是一个愤青，所以如果你看到我前面的那四篇blog，认为我是在控诉这万恶的“精英规则”，那你就错了。我当年相当喜欢读《经济观察报》，其中一个重要的原因，就是在它报头上的那一行字：“理性、建设性”，并且在挺长的一段时间内，用上面的这句话作为自己的签名档。所以我看待这些对立问题的时候，首先想到的是分析，深入的分析，而不是急于进行所谓的道德评判。在这篇blog的第一部分中，我就写到：“对立往往能够通过沟通来化解的！”这背后的理由是相信技术理性的力量。有很多对立的问题，比如tags与主题词、敏捷与CMM、草根与精英之类，都可以通过更为深入的分析，发现其本质上的关系：tags与主题词的关系，从本质上来说，就是在标引的自由度与可检索性之间的一个权衡。要解决这个矛盾，就需要采用更加方便灵活的技术，同时提高标引的自由度与可检索性。敏捷与CMM的关系，从本质上来说，就是在对人的重视与对过程的重视之间的一个权衡。要解决这个矛盾，需要有一个能从本原上判别各种开发方法与技巧好坏的标准，最终求得一个最优解。草根与精英的关系，从本质上来说，就是在多个不同的、或大或小的话语体系之间进行选择，在保留多少个性与溶入多少群体之间进行权衡。这个问题很难解决，我们只能说，最理想的状态是：“大家都能够知道有这么个规则，而且，还能不去理睬这个规则，仅仅是为了愉悦自己，而不用为了别人委屈自己。”其实还可以再联想到很多东西，不过就不再挂在这个标题下面了。keso的光已经沾得不少了。:p原文写于：2005年5月，是连续的5篇文章，在这里合并为一篇。"
  },
  
  {
    "title": "聊我所理解的敏捷(Agile)——外一篇",
    "url": "/my_blog/posts/Agile-and-others/",
    "categories": "Thinking, IT",
    "tags": "SoftwareEngineer",
    "date": "2014-05-13 22:14:00 +0800",
    





    "snippet": "那些众所周知的敏捷宣言，敏捷方法，敏捷教科书，敏捷大神，我就不提了。只是聊聊，我所理解的敏捷的本质。敏捷的本质，是承认软件开发的复杂性。而且承认，这种复杂性，达到了这样一种程度：“无法通过足够充分的前期准备，而消除后续的风险。甚至于，前期准备得越是充分，后续的风险越大。”往往有很多人，将建造大楼与软件开发做简单的类比，以说明前期设计的重要性。但事实上，我们无法想象，一幢大楼，在接近完工的时候，有新需求出来，要求整个设计从从一幢四边形的楼，变成一幢六边形的楼。但是，在软件开发领域，就是会出现这样的需求，而且，这种需求虽然会被所有的开发人员痛骂，但却“实际上具有其合理性”。如何理解需求的复杂性、易变性？软件的出现，还不到100年。建筑的历史，则至少有5~6千年了吧。人类对于建筑的需求，已经足够稳定（相对于软件而言）。另一方面，软件的可能性，又实在是太强大了，至少重力因素软件可以毫不考虑。软件开发这个领域，还太年轻，大家都没有足够的经验。年轻到了，甚至现在去急于总结经验，都是错误的！来源于Christopher Alexander《A Pattern Language: Towns, Buildings, Construction》曾经给予Gang of Four以巨大的启发，所以他们写出了著名的《Design Patterns: Elements of Reusable Object-Oriented Software》。但是，现在看来，设计模式的流毒真的不少…所谓敏捷方法，不过是一种需求发现与谈判策略过去的思路，认为需要尽可能发现所有的需求，并且做好设计，然后再开始开发。现在大家已经意识到，一边做，一边确认，一边发现，一边纠正。从总体成本上衡量，反而会更加低。但是，在实际施行敏捷的过程中，“一边做，一边确认，一边发现，一边纠正”，也同样可能存在巨大的浪费。而且，因为披上了敏捷的外衣，反而变得无可指责了。本质上，这是一种对于开发方，而非需求方，更加有利的谈判策略。总结陈词我们现在还缺少一系列量化的手段，去衡量需求的复杂度，开发的效率以及各种流程方法的优劣。（不要跟我提Function Point Estimation，那种教授坐在书桌边发明的方法~~）因为缺乏这种量化，所以大师满天飞，却让人无所适从。外一篇：“设计模式的荼毒”体现在何处？可以从两个角度来谈这个问题：1. 建筑里的结构工程师，如何设计结构？我们都知道，建筑设计中的结构工程师，非常重要，而且，他们必须非常深入的了解数学这门学问。在结构设计出来之后，他们还需要做一些模拟与演算，以确保他们设计的结构，能够承载整个建筑。再进一步，一个敢于设计结构的结构工程师，有很长的一个学习阶段，以了解前辈大师的经典结构与数学模型。可以说，建筑结构学，是一门科学，是一门以数学模型和科学实验为基础的严谨的科学。2. 中医如何看病中医，也有一套理论：阴阳呀、五行呀、相生相克呀，等等等等。在这套理论的基础上，也有上千年的经验积累，什么药吃了能治什么病，大概是什么计量。但是，说到底，这是一门「经验科学」，或者直白一点说：「这不是一门科学」。声明一下：我不是中医黑，虽然我也不是中医粉，至少中医的确有大师，他们真的治好了很多病人，这个我绝不会否认。毕竟：疗效的好坏，还是很难伪造的。3. 软件架构师，如何设计架构？架构师，看起来很像结构工程师，但是：他们没有科学基础，只有一些「设计模式」和「架构模式」。那些「模式」的有效性与适用范围，并无严谨的证明，只有一些模模糊糊的「实践案例」。「听说设计模式是好东西」，就像「听说人参大补元气」一样。真正的中医，尚且不敢给病人乱开人参，但是架构师，他们真敢把所有的「设计模式」都用上。中医再怎么不靠谱，真是把病人给治死了，医生也会吃不了兜着走。但是，我们什么时候听说过一个项目的失败，是因为架构师不合格呢？还有个更大的罪魁祸首「需求变动」顶在前面呢。4. 总结陈词一种「理论」却没有严谨的理论支撑，一门「手艺」却难以客观的评价手艺高低，随便看两本模式的书，就敢开整。没有流毒，就怪了。"
  },
  
  {
    "title": "架构的力量",
    "url": "/my_blog/posts/power-of-architecture/",
    "categories": "Thinking, IT",
    "tags": "",
    "date": "2014-04-27 12:01:00 +0800",
    





    "snippet": "最近看了两本书，这两本书当然大有不同，一本书专注于分析软件设计，尤其是架构设计的书；而另一本则是在分析互联网领域的法律与创新的关系问题。两本都是好书，都值得分别为他们写一篇读书心得，只是这里想谈谈的是两本书中，相通的部分——「架构的力量」。  端对端原则在《思想的未来》中，作者回顾了互联网的架构设计思想：「这一原则是由网络设计者Jerome Saltzer、David Clark、David P.Reed在1981年首次提出的，被称为端对端(end-to-end argument, e2e)，用以指导网络设计者们开发网络协议及应用程序。」「端对端原则认为，网络的智能不应当放在网络内，而应当位于网络的端点，即网络内的计算机只是履行应用程序所需的基本功能，而一些特殊功能应由网络边缘的计算机来实现。」「据RFC 1958所述，虽然因特网社区中许多成员会认为因特网不存在架构，但是，社区成员普遍相信，因特网的目标是连通性，工具是因特网协议，智能位于端对端而不是隐藏与网络之中。网络的任务是尽可能灵活有效地传输数据包，而其他的一切都应该靠边站。」由这样的架构原则，作者总结出了三个要点：「应用程序在网络边缘的计算机上执行，任何种类的应用都可以立即被运行；网络没有为任何特定应用程序做优化设计，对于任何创新都是开放的；由于网络平台的中立性，网络无法做到歧视某种特定的新设计。」在我看来：互联网最初的设计者，因为足够谦逊，所以对于「平台将会如何被使用」未做任何假设，他们的架构仅仅专注于最为简单的目标，而这也是互联网取得如今这样巨大成就的根本原因。  不要尝试预测未来在《简洁之美》中，作者极力向读者阐述：架构设计简洁的价值，因为随着时间的不断增长，软件的研发成本的绝大部分，会产生于后期维护的阶段。越是简洁的架构，就越是能够为今后的维护，节约大笔费用。另外一个值得注意的事实是：「程序员犯的最常见也是最严重的错误，就是在其实不知道未来的时候，去预测未来。」而作者给出的策略是：「最安全的情况是，完全不尝试预测未来，所有的设计决策都应当根据当前确切知道的信息来做。」在我看来，当年的互联网设计者，就是那种最伟大的程序员/设计师，他们未做任何假设，仅仅专注于解决信息传输的需求。  一个可能的误区不去尝试预测未来，根据当前确切知道的信息来做。这样的逻辑，可能会让人偷懒。  「啊，我们这就开始干吧！」  「我们不要做太多的假设！(不必想那些设计的事情)」架构是存在的，设计是需要的，需求要尽可能的去搜集与分析。在做到这三个要点之后，才能谈及「不要假设」，「不要过度设计」。在此之前，还是不要放松为好。架构是有力量的，简洁的架构，往往会产生的惊人的力量。当然，「无架构设计」不在其列。"
  },
  
  {
    "title": "iMIS为什么会失败？",
    "url": "/my_blog/posts/iMIS/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2014-04-26 09:16:00 +0800",
    





    "snippet": "今天在和同事讨论系统的表结构设计，在回家的路上，我突然“顿悟”了。大约在三年前，我在上一家公司里干得相当的不错，如鱼得水。我们开发了不少的Web项目，无论是速度还是质量，都能令人大家满意。我们在项目开发中不断地总结经验，打算将一直一来项目中采用的技术产品化、平台化。我踌躇满志地计划着下一个版本的设计，在过去PHP的基础上，我打算采用java进行开发，虽然我在此之前没有用java开发过软件或者网站，但是我当时的态度是：语言不过是工具，采用任何语言来实现我的这个框架都只有细节的区别。这个新的框架，我给它起了一个不错的名字：“iMIS——集成管理信息系统”。当然，如果有PHP和java开发经验的朋友应该能够预感到，这个iMIS只怕前景不妙，因为PHP中的面向对象相比java的面向对象实在是太简陋了，而我当时的面向对象的基础实在是差得羞于见人。而在当时我是不这么认为的。但是，不要误会，我的iMIS不是倒在实际的项目上，而是倒在了公司的决策会议上了。当时公司另外还有一个开发框架，名字也不错，叫做“carmot”。这个框架的设计者可不像我这么“外行”，他是正牌的java程序员，而且在来我们公司之前，是教java编程的教师。两个系统作为公司将来可能采用的备选开发平台竞争，我们公司的CTO的选择是显而易见的——现在回想起他当时跟我的数次长谈，我想他当时应该已经做到足够委婉了。后来，我并不死心，还是在一个中等大小的房地产网站上开始了iMIS的试验，后来有将这个平台使用到了三四个项目之中。这三四个项目，并不失败，开发效率依然很高，而且都基本圆满的实现了用户的需求。因此我也从来没有真正想通过，为什么当初他们不同意采用我的iMIS？后来我一怒之下，打算将iMIS开源，重新命名为“OpenIS”，还写了两个文档，打算找人帮我一起继续开发这个框架。openis系统的历史、目标与方案的选择openis 系统的特性保存在ITEye上的版本找帮手需要名气的，我打算到各大java论坛去打打名气，最先去的是CSDN，然后到了jdon，最后落户在了javaeye。名气渐渐是有了，帮手却始终没有找到，认识了很多真正的java高手（我在1年以前是不能算的），也学到了很多java的知识（之前的java代码现在看了都觉得脸红），唯独没有任何长进的是Hibernate的知识，我故意不去学习任何已有的O/R Mapping知识，因为我打算自己做的框架中自然包含着我自己的O/R Mapping。暂时打住一下，各位可能会认为我这篇blog是篇“OO迷途羔羊”的忏悔吧，其实不是，我还是一点都没有觉得自己的思路有什么问题，只是逐渐地理解了自己为什么会失败而已。思考软件开发(1)——面向对象的前前后后我也来发邮件接着说，上面的两篇文章，是我最早发在javaeye的两篇讨论面向对象的文章。在经过这么长时间的与人讨论之后，我已经越来越意识到，我对于面向对象编程（OOP）的开发从来就不能算是主流的观点，当然随着后来AOP之类思想的兴起，我逐渐感到有了知音。这是我当年的iMIS失败的原因之一。另外一方面，我对于数据库主流的看法也不是主流的数据库设计的思路，在我看来，经典的数据库设计理论，根本就未曾考虑过像我们现在这样的“必需要拥抱变化”的极限开发境况。数据库范式的设计者，几乎不考虑库结构需要不断变动的情况。而且为了尽可能的减少冗余数据，宁可多写代码，也不准多占磁盘空间。在经典的对象（Object）与经典的关系数据库（Relation）之间，有一条巨大的鸿沟，这就导致一个好的O/R Mapping工具，必须在“面向对象成为绝对主流”之后出现，来填平这一鸿沟。可以预料到的是：“Object与Relation之间的差距越大，Mapping工具就会越复杂。”现在的Hibernate，正在越来越复杂，可以预见的是，要用好Hibernate，绝非一般程序员想象的那样：“不用再想数据库设计的问题了”，而是必须对面向对象和数据库都有非常深入的了解，才可能用好Hibernate。回到我的iMIS上来，当初我的iMIS的设计之所以会遭遇不信任，并不是因为他不可行，而是因为没有人相信它可行，无论是一个java好手，还是一个数据库好手，都会很自然的将iMIS的设计理解为“不走正道”，“肯定没有好下场”。唉，关键在于观念的转变呀！原文写于：2005年05月12日后记：补充两个事情，OpenIS这个名字，后来被人支持，可以读作：O’Penis，果然是扑街的命啊。再者，多年以后，与老同事聊天，才了解到一些技术之外的事情，我的那个iMIS，在部门经理嘴里，被说得一钱不值，因为当时的年轻气盛，对部门经理多有轻蔑与批评，难免被人在身后打了小报告。这些非技术的事情，我一直都不太擅长的（这么说来，好像我的技术有多擅长似的）。"
  },
  
  {
    "title": "Java社群该向Ruby on Rails学习些什么？",
    "url": "/my_blog/posts/Java-To-Rails/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2014-04-26 08:58:00 +0800",
    





    "snippet": "软件开发者是分社群的，大多数时候都是按照语言来划分大的派别，门派不同的人，很少相互交流——跟那种用XXX的有什么好说的？越是这门语言足够的自给自足，越是懒得看别的语言的东西。作为一个次新兴语言，Java社群已经足够封闭了。自己内部热闹非凡，新技术、新名词、新战争、新领袖层出不穷，哪里有空去理会Java以外的世界？可是最近的事情有点奇怪了，Java社群在非常热烈的讨论另外一个语言的项目“Ruby on Rails”！这是什么东西？CSDN的Java频道出了一篇文章：“最美的MVC,ORM方案原来在别处–Ruby on Rails”！是不是很令人惊讶？这么长他人自己灭自己威风的事情，咱们Java社群的人可是从来没干过的。我当时也看了这篇文章，第一反应就是无动于衷，我还跟同事讲：“现在年纪大了，早就没有学新语言的冲动了 Smile ”后来呢？偶然的机会我下载了一份PDF，下载地址是：Ruby on Rails实践然后就看起来了。多好的介绍啊！简单，清晰，准确，有诱惑力！于是我下载了Ruby，One-Click就安装完成了，然后在DOS窗口下输入了一条命令：gem install rails –remote就安装了Ruby on Rails。再输入一条命令：rails mybook就建立我的第一个Web应用项目。再输入一条命令：ruby mybook\\script\\server就启动了WEB Server。在浏览器里，就看到了初始的Welcome页面！再说两个数字：一个Web Server需要8行代码。一个CRUD需要1行代码。我的浅尝到此为止，但是留下的印象确实无比深刻！为什么Java社群里那么多开源项目，“成百上千的Framework”，没有一个有这么方便？注意，我只说方便！方便才是硬道理！这个道理，Java社群里也有人懂的，比如Hibernate的作者Gavin King就说：“10分钟之内把Hibernate跑起来”。Good，但是，一个包含Hibernate的Web应用要跑起来，需要多少时间？一个流行的架构“WebWork+Spring+Hibernate”，加在一起的一个最简单demo，需要多少时间才能跑起来？等等，还没有选定WebServer呢！再有，为什么不是iBaits呢？为什么不是Pico呢？为什么不是Velocity呢？为什么不是……有人也许会说：“ruby社群只是发展得比java晚，所以现在只有这么一个拿得出手的东西，咱们java的好东西太多了，所以选起来累一些。”但是，问题在于，Java社群里的那么多好东西，怎么就没有一个有RoR那么方便呢？java社群必须认真反思了！我们究竟在追求什么？“美感”“架构”“灵活性”“健壮性”“先进性”“规范性”“设计模式”那么“易学性”和“易用性”呢？难道我们开发新的框架，不是为了减少程序员的劳动吗？看到人家做出来的东西，总感觉有不足之处，然后呢？自己另外做一个。然后呢？还有人又做了第三个，第四个。。。。其实我们不需要那么多“富有创意”的项目，只要有几个能用的，顺手的就好了。如何才能改变Java社群的这种现状呢？思考中…原文写于：2005年05月27日后记：这就是我最早接触Ruby &amp;amp; Rails的记录了。至今未悔…"
  },
  
  {
    "title": "外国大牛也不过如此——《梦断代码》读后感",
    "url": "/my_blog/posts/dreaming-in-code/",
    "categories": "Thinking, IT",
    "tags": "OpenSource",
    "date": "2014-04-24 11:34:00 +0800",
    





    "snippet": "　　花了一周的时间，看完了《Dreaming in Code》（梦断代码），看得我心潮起伏。对里面那帮家伙的评价也起起落落。最终的结论是：外国大牛也不过如此。　　别看他们名头那么响，做了那么多超有名的项目，实际的能力（软件开发能力与项目管理能力）看来相当有限。感想很多，想到一点说一点吧。　　1、以前有一篇文章叫“谦卑的程序员”，有这么一段话：“优秀的程序员很清楚自己的能力是有限的，所以他对待编程任务的态度是完全谦卑的，特别是，他们会象逃避瘟疫那样逃避‘聪明的技巧’”。但是，那些所谓的大牛，却一点的不知道这一点。一开始他们就决定要做一个桌面软件，然后打算用python+wxWidgets来实现。到后来我才知道，这帮家伙居然一个都不懂python的桌面开发。那个他们伟大的梦想——要打通所有的数据间的隔阂——究竟意味着多少技术难度，他们心里也一点数都没有。总之，这些“大牛”，让人想到的是自我感觉良好的“半瓶醋”。他们的目标太伟大了，这是我在看到这本书的中段的时候的体会。技术要最新潮的，软件要革命性的，要平台化以支持插件的，用户体验要最好的，代码要开源的，唯独工期是不确定的。越是伟大的目标，越是需要强有力的风险控制能力。再引用一遍范总的格言：“欲望不要超过能力”。而他们，就根本没有意识到自己的能力严重不足。　　2、一个team中，牛人太多了！如何才能良好的合作呢？他们永远在开会，却始终议而不决，大家都是管过“大团队”的。要他们几个人合作起来Coding，就太难了。　　3、还有一个证明他们不是“大牛”的证据是，他们缺乏技术决断力，那几年里流行起来的很多技术，他们都有随波逐流的冲动。比如他们尝试过RDF来描述数据；尝试过Python的ZOPE；憧憬过P2P（但是他们的团队里没有一个懂P2P的）；企图从wxWidgets转到Mozilla的XUL。。。怎么说呢？这样的摇摆和见异思迁，简直是典型的初哥的作风。真正的大牛，对于技术的趋势，以及如何在项目中运用，心中都自有判断的。　　4、据说Chandle 1.0也正式发布了，我去下载了一个，希望能够有惊喜发生~~还是奇慢无比，根本就不具备实用价值！　　5、如果是我来做这个项目的话，首先就不会在这么多个方面同时冒险。其次，在项目开始之前会先安排一个技术可行性的研究阶段。最重要的一点，我会早点把不称职的“大牛”开走。随便再说两句：参加CSDN 2008英雄大会上海站的活动，听了Ivar Jacobson博士的演讲，对他的说法的“不以为然”依然不变。无论是Smart Process还是Smart Software Development，我都还是不以为然。韩磊在介绍Ivar的时候，说博士的演讲价值3000美金，我认为，未必。与上次介绍Smart Process时提到WayPoint相比，这回的演讲没有再提到“明确的知识”，也没有介绍什么能够帮助开发的软件工具，而是更加强调人的重要性。总算是进步了。原文写于：2008年09月13日后记：现在想来，当时的评价的确略苛刻了些，开源项目从来难做，成功的极少而失败的极多。依托Github这样的社交化平台，似乎会比过去容易一些了。当然，根本的要点依然是：talk is cheap, show me the code"
  },
  
  {
    "title": "SNS、IM、BBS与JavaEye",
    "url": "/my_blog/posts/SNS-IM-BBS-JavaEye/",
    "categories": "Thinking, IT",
    "tags": "",
    "date": "2014-04-23 09:28:00 +0800",
    





    "snippet": "今天在跟Robbin聊天，聊的话题也比较散，只能记一个大概了。背景1、最近JavaEye在很激烈的讨论关于技术书籍翻译的事情。 [读书] 书评：《敏捷软件开发》中文版第二版 [读书] 语无伦次的译者作者黑名单 好多译者都浮出来了，还有出版社的朋友，也参与了讨论。气氛甚为热烈。背景2、这两天在博文视点出版社的Groups里，也正好在讨论一部书稿，叫做《编程新手真言》，被不少人，包括我在内，毫不留情的批评了一通。背景3、百度Hi推出体验版，采用邀请机制，一时间邀请的Blogger与想要获得邀请的帖子满天飞，热闹得不得了。背景4、SNS（国内抄袭Facebook与Myspaces的网站）大繁荣。正好Robbin给了一个文章链接。SNS：下一个天堂？我看了之后，也觉得写得非常有道理。在讨论之后，形成了以下观点观点1、国内与国外的网络用户，对于互联网的使用模式，是不同的。我们更习惯于BBS，IM，而国外更习惯于Web SNS和email/maillist。WebSNS在中国搞不成，最大的阻碍是IM工具的方便性。观点2、Google的gtalk开发得很弱，是因为他们对于IM Talk的需求就很弱。Gmail开发得很强，也是因为他们对于Mail的需求就很强。观点3、想在国内复制SNS网站的辉煌，基本上没戏，虽然有很成功的校内网，但是那是由于地处校园网之内，而且被水产掉的校园网BBS，使得同学们无路可去。再回到对于JavaEye的未来期望上来。我的观点与建议有以下一些：  坚定不移的以BBS为核心，辅之以Blog，这是用户在JavaEye交流与分享的主要渠道。SNS的追求、第三方应用的API支持，不妨缓做。  建议模仿起点中文网，推出IT写作连载频道，鼓励并支持技术原创与翻译作品的发表。  推出连载付费模式，以便作者能够获得更多的收益。  推出打印服务，可以与印客合作，作者、网站与印客收入分成。  与出版社合作，在已经证明有众多读者的作品中，挑选来出版实体书。  JavaEye的wiki不妨缓做（robbin对这一条并不同意）原文写于：2008年03月27日后记：六年以后，再来看当年的这篇文章，真是唏嘘不已。SNS早已分化、更新、换代。别说国内的Clone，连美国的Facebook，都有下滑的趋势。后来的twitter、tumblr、pinterest、Quora，国内的微博、已经死掉的点点、还有正火的知乎。更不要说随着移动互联网兴起的微信了…另外，JavaEye已经经历了被收购、改名、衰落的过程，印客也早就倒了，只是当初我提议的写作频道，现在倒是有：简书、知乎专栏、十五言、百度阅读这样的大大小小的探索者了。颇感欣慰。"
  }
  
]

